{"version":3,"sources":["webpack://Hls/webpack/universalModuleDefinition","webpack://Hls/webpack/bootstrap","webpack://Hls/./src/utils/logger.js","webpack://Hls/./src/events.js","webpack://Hls/./src/errors.js","webpack://Hls/./src/polyfills/number-isFinite.js","webpack://Hls/./src/demux/id3.js","webpack://Hls/./src/utils/get-self-scope.js","webpack://Hls/./src/empty.js","webpack://Hls/./node_modules/url-toolkit/src/url-toolkit.js","webpack://Hls/./node_modules/eventemitter3/index.js","webpack://Hls/./src/crypt/aes-crypto.js","webpack://Hls/./src/crypt/fast-aes-key.js","webpack://Hls/./src/crypt/aes-decryptor.js","webpack://Hls/./src/crypt/decrypter.js","webpack://Hls/./src/demux/adts.js","webpack://Hls/./src/demux/demuxer-inline.js","webpack://Hls/./src/demux/aacdemuxer.js","webpack://Hls/./src/demux/mpegaudio.js","webpack://Hls/./src/demux/exp-golomb.js","webpack://Hls/./src/demux/sample-aes.js","webpack://Hls/./src/demux/tsdemuxer.js","webpack://Hls/./src/demux/mp3demuxer.js","webpack://Hls/./src/remux/aac-helper.js","webpack://Hls/./src/remux/mp4-generator.js","webpack://Hls/./src/remux/mp4-remuxer.js","webpack://Hls/./src/remux/passthrough-remuxer.js","webpack://Hls/./src/demux/mp4demuxer.js","webpack://Hls/./node_modules/webworkify-webpack/index.js","webpack://Hls/./src/demux/demuxer-worker.js","webpack://Hls/./src/types/loader.ts","webpack://Hls/./src/event-handler.ts","webpack://Hls/./src/loader/fragment.ts","webpack://Hls/./src/loader/level-key.ts","webpack://Hls/./src/loader/level.js","webpack://Hls/./src/utils/attr-list.js","webpack://Hls/./src/utils/codecs.js","webpack://Hls/./src/loader/m3u8-parser.js","webpack://Hls/./src/loader/playlist-loader.ts","webpack://Hls/./src/loader/fragment-loader.js","webpack://Hls/./src/loader/key-loader.js","webpack://Hls/./src/controller/fragment-tracker.js","webpack://Hls/./src/utils/binary-search.ts","webpack://Hls/./src/utils/buffer-helper.ts","webpack://Hls/./src/utils/mediasource-helper.ts","webpack://Hls/./src/observer.ts","webpack://Hls/./src/demux/demuxer.js","webpack://Hls/./src/controller/level-helper.js","webpack://Hls/./src/utils/time-ranges.js","webpack://Hls/./src/utils/discontinuities.js","webpack://Hls/./src/controller/fragment-finders.js","webpack://Hls/./src/controller/gap-controller.js","webpack://Hls/./src/controller/base-stream-controller.js","webpack://Hls/./src/controller/stream-controller.js","webpack://Hls/./src/task-loop.js","webpack://Hls/./src/controller/level-controller.js","webpack://Hls/./src/utils/texttrack-utils.js","webpack://Hls/./src/controller/id3-track-controller.js","webpack://Hls/./src/utils/ewma.js","webpack://Hls/./src/utils/ewma-bandwidth-estimator.js","webpack://Hls/./src/controller/abr-controller.js","webpack://Hls/./src/controller/buffer-controller.ts","webpack://Hls/./src/controller/cap-level-controller.js","webpack://Hls/./src/controller/fps-controller.js","webpack://Hls/./src/utils/xhr-loader.js","webpack://Hls/./src/config.ts","webpack://Hls/./src/hls.js","webpack://Hls/./src/is-supported.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","enableLogs","logger","_get_self_scope__WEBPACK_IMPORTED_MODULE_0__","noop","fakeLogger","trace","debug","log","warn","info","error","exportedLogger","global","getSelfScope","exportLoggerFunctions","debugConfig","_len2","arguments","length","functions","Array","_key2","forEach","type","func","console","_len","args","_key","msg","formatMsg","apply","consolePrintFn","e","HlsEvents","MEDIA_ATTACHING","MEDIA_ATTACHED","MEDIA_DETACHING","MEDIA_DETACHED","BUFFER_RESET","BUFFER_CODECS","BUFFER_CREATED","BUFFER_APPENDING","BUFFER_APPENDED","BUFFER_EOS","BUFFER_FLUSHING","BUFFER_FLUSHED","MANIFEST_LOADING","MANIFEST_LOADED","MANIFEST_PARSED","LEVEL_SWITCHING","LEVEL_SWITCHED","LEVEL_LOADING","LEVEL_LOADED","LEVEL_UPDATED","LEVEL_PTS_UPDATED","AUDIO_TRACKS_UPDATED","AUDIO_TRACK_SWITCHING","AUDIO_TRACK_SWITCHED","AUDIO_TRACK_LOADING","AUDIO_TRACK_LOADED","SUBTITLE_TRACKS_UPDATED","SUBTITLE_TRACK_SWITCH","SUBTITLE_TRACK_LOADING","SUBTITLE_TRACK_LOADED","SUBTITLE_FRAG_PROCESSED","INIT_PTS_FOUND","FRAG_LOADING","FRAG_LOAD_PROGRESS","FRAG_LOAD_EMERGENCY_ABORTED","FRAG_LOADED","FRAG_DECRYPTED","FRAG_PARSING_INIT_SEGMENT","FRAG_PARSING_USERDATA","FRAG_PARSING_METADATA","FRAG_PARSING_DATA","FRAG_PARSED","FRAG_BUFFERED","FRAG_CHANGED","FPS_DROP","FPS_DROP_LEVEL_CAPPING","ERROR","DESTROYING","KEY_LOADING","KEY_LOADED","STREAM_STATE_TRANSITION","EME_CONFIGURING","EME_CONFIGURED","ErrorTypes","ErrorDetails","NETWORK_ERROR","MEDIA_ERROR","KEY_SYSTEM_ERROR","MUX_ERROR","OTHER_ERROR","KEY_SYSTEM_NO_ACCESS","KEY_SYSTEM_NO_KEYS","KEY_SYSTEM_GENERATE_REQUEST_FAILED","KEY_SYSTEM_LICENSE_REQUEST_FAILED","KEY_SYSTEM_LICENSE_UPDATE_FAILED","MANIFEST_LOAD_ERROR","MANIFEST_LOAD_TIMEOUT","MANIFEST_PARSING_ERROR","MANIFEST_INCOMPATIBLE_CODECS_ERROR","LEVEL_LOAD_ERROR","LEVEL_LOAD_TIMEOUT","LEVEL_SWITCH_ERROR","AUDIO_TRACK_LOAD_ERROR","AUDIO_TRACK_LOAD_TIMEOUT","FRAG_LOAD_ERROR","FRAG_LOAD_TIMEOUT","FRAG_DECRYPT_ERROR","FRAG_PARSING_ERROR","REMUX_ALLOC_ERROR","KEY_LOAD_ERROR","KEY_LOAD_TIMEOUT","BUFFER_ADD_CODEC_ERROR","BUFFER_APPEND_ERROR","BUFFER_APPENDING_ERROR","BUFFER_STALLED_ERROR","BUFFER_FULL_ERROR","BUFFER_SEEK_OVER_HOLE","BUFFER_NUDGE_ON_STALL","INTERNAL_EXCEPTION","isFiniteNumber","Number","isFinite","decoder","_utils_get_self_scope__WEBPACK_IMPORTED_MODULE_0__","ID3","isHeader","data","offset","isFooter","getID3Data","front","_readSize","subarray","size","getTimeStamp","frames","getID3Frames","frame","isTimeStampFrame","_readTimeStamp","_getFrameData","String","fromCharCode","id3Data","end","frameData","_decodeFrame","push","_decodePrivFrame","_decodeTextFrame","_decodeURLFrame","timeStampFrame","byteLength","Uint8Array","pts33Bit","timestamp","Math","round","owner","_utf8ArrayToStr","privateData","buffer","index","description","text","url","array","exitOnNull","getTextDecoder","decoded","decode","idx","indexOf","substring","replace","char2","char3","len","out","TextDecoder","window","self","URL_REGEX","FIRST_SEGMENT_REGEX","SLASH_DOT_REGEX","SLASH_DOT_DOT_REGEX","URLToolkit","buildAbsoluteURL","baseURL","relativeURL","opts","trim","alwaysNormalize","basePartsForNormalise","parseURL","Error","path","normalizePath","buildURLFromParts","relativeParts","scheme","baseParts","netLoc","pathParts","exec","builtParts","params","query","fragment","baseURLPath","newPath","lastIndexOf","parts","split","reverse","join","has","prefix","Events","EE","fn","context","once","addListener","emitter","event","TypeError","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","__proto__","eventNames","events","names","slice","getOwnPropertySymbols","concat","listeners","handlers","ee","listenerCount","emit","a1","a2","a3","a4","a5","removeListener","undefined","j","on","removeAllListeners","off","prefixed","AESCrypto","subtle","iv","aesIV","decrypt","FastAESKey","expandKey","importKey","AESDecryptor","rcon","subMix","Uint32Array","invSubMix","sBox","invSBox","initTable","uint8ArrayToUint32Array_","arrayBuffer","view","DataView","newArray","getUint32","subMix0","subMix1","subMix2","subMix3","invSubMix0","invSubMix1","invSubMix2","invSubMix3","x","xi","sx","x2","x4","x8","keyBuffer","sameKey","keySize","ksRow","invKsRow","prev","ksRows","keySchedule","invKeySchedule","sbox","networkToHostOrderSwap","word","inputArrayBuffer","removePKCS7Padding","t0","t1","t2","t3","s0","s1","s2","s3","inputWords0","inputWords1","inputWords2","inputWords3","outputBytes","paddingBytes","nRounds","invSBOX","initVector","initVector0","initVector1","initVector2","initVector3","inputInt32","Int32Array","outputInt32","swapWord","getUint8","destroy","Decrypter","observer","config","_temp","_ref$removePKCS7Paddi","logEnabled","browserCrypto","crypto","webkitSubtle","disableWebCrypto","isSync","enableSoftwareAES","callback","_this","decryptor","fastAesKey","then","aesKey","catch","err","onWebCryptoError","result","message","trigger","Event","details","fatal","reason","isHeaderPattern","getHeaderLength","getFullFrameLength","probe","frameLength","newOffset","initTrackConfig","track","audioCodec","samplerate","adtsObjectType","adtsSampleingIndex","adtsExtensionSampleingIndex","adtsChanelConfig","userAgent","navigator","toLowerCase","manifestCodec","adtsSampleingRates","test","channelCount","codec","getAudioConfig","getFrameDuration","appendFrame","pts","frameIndex","header","frameDuration","headerLength","stamp","parseFrameHeader","aacSample","unit","dts","samples","sample","now","AACDemuxer","remuxer","resetInitSegment","initSegment","videoCodec","duration","_audioTrack","container","id","sequenceNumber","isAAC","inputTimeScale","resetTimeStamp","ADTS","append","timeOffset","contiguous","accurateTimeOffset","number_isFinite","id3Samples","remux","MpegAudio","BitratesMap","SamplingRateMap","SamplesCoefficients","BytesInSlot","parseHeader","samplesPerFrame","sampleRate","headerB","headerC","headerE","headerF","headerG","columnInBitrates","bitRate","columnInSampleRates","sampleCoefficient","bytesInSlot","parseInt","ExpGolomb","bytesAvailable","bitsAvailable","loadWord","position","workingBytes","availableBytes","min","set","skipBits","count","skipBytes","readBits","bits","valu","skipLZ","leadingZeroCount","skipUEG","skipEG","readUEG","clz","readEG","readBoolean","readUByte","readUShort","readUInt","skipScalingList","lastScale","nextScale","readSPS","profileIdc","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","chromaFormatIdc","picOrderCntType","pixelRatio","width","ceil","height","readSliceType","SampleAesDecrypter","decryptdata","discardEPB","decrypter","decryptBuffer","encryptedData","decryptAacSample","sampleIndex","sync","curUnit","encryptedBuffer","byteOffset","localthis","decryptedData","decryptAacSamples","getAvcEncryptedData","decodedData","encryptedDataLen","floor","Int8Array","outputPos","inputPos","getAvcDecryptedUnit","decryptAvcSample","unitIndex","decryptAvcSamples","curUnits","units","RemuxerTrackIdConfig","video","audio","id3","TSDemuxer","typeSupported","sampleAes","setDecryptData","method","syncOffset","_syncOffset","scanwindow","createTrack","pid","dropped","pmtParsed","_pmtId","_avcTrack","_id3Track","_txtTrack","aacOverFlow","aacLastPTS","avcSample","_duration","start","stt","pes","unknownPIDs","avcTrack","audioTrack","id3Track","avcId","audioId","id3Id","pmtId","avcData","pesData","audioData","parsePAT","_parsePAT","parsePMT","_parsePMT","parsePES","_parsePES","parseAVCPES","_parseAVCPES","parseAACPES","_parseAACPES","parseMPEGPES","_parseMPEGPES","parseID3PES","_parseID3PES","parsedPIDs","mpeg","mp3","avc","decryptAndRemux","videoTrack","textTrack","decryptAndRemuxAvc","_initPTS","_initDTS","mpegSupported","isSampleAes","tableEnd","stream","frag","pesFlags","pesLen","pesHdrLen","pesPts","pesDts","payloadStartOffset","newData","splice","dataLen","pushAccesUnit","nbSamples","forceKeyFrameOnDiscontinuity","sps","last","expGolombDecoder","_parseAVCNALu","spsfound","createAVCSample","audFound","sliceType","payloadType","payloadSize","endOfCaptions","b","firstByte","totalCCs","byteArray","_insertSampleInOrder","bytes","uuidStrArray","userDataPayloadBytes","toString","uuid","userData","userDataBytes","codecarray","codecstring","h","pps","arr","pos","_getLastNalUnit","lastUnit","overflow","lastUnitType","state","naluState","lastState","lastUnitStart","tmp","newLength","EPBPositions","sourceIndex","shift","newPTS","abs","MP3Demuxer","AAC","getSilentFrame","UINT32_MAX","pow","MP4","init","types","avc1","avcC","btrt","dinf","dref","esds","ftyp","hdlr","mdat","mdhd","mdia","mfhd","minf","moof","moov","mp4a",".mp3","mvex","mvhd","pasp","sdtp","stbl","stco","stsc","stsd","stsz","stts","tfdt","tfhd","traf","trak","trun","trex","tkhd","vmhd","smhd","charCodeAt","videoHdlr","audioHdlr","HDLR_TYPES","STTS","STSC","STCO","STSZ","VMHD","SMHD","STSD","majorBrand","avc1Brand","minorVersion","FTYP","box","DINF","payload","timescale","upperWordDuration","lowerWordDuration","sn","baseMediaDecodeTime","tracks","boxes","flags","dependsOn","isDependedOn","hasRedundancy","avcc","hSpacing","vSpacing","configlen","sampleDependencyTable","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","cts","arraylen","isLeading","paddingValue","isNonSync","degradPrio","movie","MP4Remuxer","vendor","isSafari","match","ISGenerated","defaultTimeStamp","generateIS","nbAudioSamples","nbVideoSamples","audioTimeOffset","videoTimeOffset","audiovideoDeltaDts","max","audioTrackLength","remuxAudio","endPTS","startPTS","remuxVideo","videoData","remuxEmptyAudio","remuxID3","remuxText","initPTS","initDTS","audioSamples","videoSamples","computePTSDTS","Infinity","metadata","keys","mp4SampleDuration","firstPTS","firstDTS","lastPTS","lastDTS","timeScale","inputSamples","outputSamples","ptsNormalize","_PTSNormalize","nextAvcDts","sort","a","deltadts","deltapts","PTSDTSshift","reduce","curr","delta","nbNalu","naluLen","nbUnits","sampleLen","mdatSize","setUint32","avcSampleUnits","mp4SampleLength","compositionTimeOffset","unitData","unitDataLen","lastFrameDuration","stretchShortVideoTrack","maxBufferHole","gapTolerance","deltaToFrameEnd","nextAudioPts","data1","data2","startDTS","endDTS","hasAudio","hasVideo","nb","mp4Sample","fillFrame","mp4timeScale","scaleFactor","inputSampleDuration","rawMPEG","filter","maxAudioFramesDrift","nextPts","toFixed","missing","newStamp","audioSample","numMissingFrames","unitLen","lastSampleDuration","silentFrame","reference","PassThroughRemuxer","rawData","streamType","performance","Date","DemuxerInline","demuxer","discontinuity","trackSwitch","defaultInitPTS","startTime","endTime","stats","tstart","tdecrypt","pushDecrypted","muxConfig","demux","MP4Demuxer","mux","_utils_logger__WEBPACK_IMPORTED_MODULE_0__","_events__WEBPACK_IMPORTED_MODULE_1__","initData","parseInitSegment","audiovideo","findBox","bin2str","readUint16","val","readUint32","writeUint32","subresults","endbox","results","parseSegmentIndex","references","moovEndOffset","sidx","version","startByte","referencesCount","referenceIndex","referenceInfo","referenceSize","subsegmentDuration","earliestPresentationTime","trackId","soun","vide","codecBox","codecType","getStartDTS","trafs","baseTimes","map","scale","offsetStartDTS","upper","lower","webpackBootstrapFunc","configurable","oe","f","ENTRY_MODULE","default","moduleNameReqExp","dependencyRegExp","quoteRegExp","str","getModuleDependencies","sources","queueName","retval","fnString","wrapperSignature","webpackRequireName","re","RegExp","isNaN","hasValuesInQueues","queues","hasValues","options","main","requiredModules","all","modulesQueue","seenModules","moduleToCheck","pop","newModules","newModulesKeys","getRequiredModules","src","entryModule","JSON","stringify","blob","Blob","bare","workerUrl","URL","webkitURL","mozURL","msURL","createObjectURL","worker","Worker","objectURL","_demux_demuxer_inline__WEBPACK_IMPORTED_MODULE_0__","_utils_logger__WEBPACK_IMPORTED_MODULE_2__","eventemitter3__WEBPACK_IMPORTED_MODULE_3__","DemuxerWorker","forwardMessage","ev","postMessage","addEventListener","cmd","parse","transferable","PlaylistContextType","PlaylistLevelType","FORBIDDEN_EVENT_NAMES","hlsEventGeneric","hlsHandlerDestroying","hlsHandlerDestroyed","EventHandler","hls","handledEvents","useGenericHandler","onEvent","registerListeners","onHandlerDestroying","unregisterListeners","onHandlerDestroyed","isEventHandler","onEventGeneric","funcName","constructor","ElementaryStreamTypes","LevelKey","baseURI","relativeURI","_uri","baseuri","reluri","Fragment","_url","_byteRange","_decryptdata","_elementaryStreams","AUDIO","VIDEO","rawProgramDateTime","programDateTime","tagList","relurl","baseurl","levelkey","setByteRange","previousFrag","byteRange","byteRangeEndOffset","addElementaryStream","hasElementaryStream","createInitializationVector","segmentNumber","uint8View","setDecryptDataFromLevelKey","uri","Level","baseUrl","endCC","endSN","fragments","live","needSidxRanges","startCC","startSN","startTimeOffset","targetduration","totalduration","DECIMAL_RESOLUTION_REGEX","ATTR_LIST_REGEX","AttrList","attrs","attr","parseAttrList","decimalInteger","attrName","intValue","MAX_SAFE_INTEGER","hexadecimalInteger","stringValue","hexadecimalIntegerAsNumber","decimalFloatingPoint","parseFloat","enumeratedString","decimalResolution","res","input","lastIndex","sampleEntryCodesISO","a3ds","ac-3","ac-4","alac","alaw","dra1","dts+","dts-","dtsc","dtse","dtsh","ec-3","enca","g719","g726","m4ae","mha1","mha2","mhm1","mhm2","mlpa","raw ","Opus","samr","sawb","sawp","sevc","sqcp","ssmv","twos","ulaw","avc2","avc3","avc4","avcp","drac","dvav","dvhe","encv","hev1","hvc1","mjp2","mp4v","mvc1","mvc2","mvc3","mvc4","resv","rv60","s263","svc1","svc2","vc-1","vp08","vp09","isCodecSupportedInMp4","MediaSource","isTypeSupported","MASTER_PLAYLIST_REGEX","MASTER_PLAYLIST_MEDIA_REGEX","LEVEL_PLAYLIST_REGEX_FAST","source","LEVEL_PLAYLIST_REGEX_SLOW","MP4_REGEX_SUFFIX","M3U8Parser","findGroup","groups","mediaGroupId","matchingGroup","group","convertAVC1ToAVCOTI","avcdata","substr","resolve","parseMasterPlaylist","string","levels","setCodecs","codecs","level","filtered","typeCodes","isCodecType","preferred","unknownCodecs","resolution","bitrate","NAME","CODECS","parseMasterPlaylistMedia","audioGroups","medias","media","TYPE","groupId","DEFAULT","autoselect","AUTOSELECT","forced","FORCED","URI","lang","LANGUAGE","instreamId","groupCodec","parseLevelPlaylist","levelUrlId","currentSN","cc","prevFrag","firstPdtIndex","title","urlId","assignProgramDateTime","value1","value2","toUpperCase","keyAttrs","decryptmethod","decrypturi","decryptiv","mapAttrs","BYTERANGE","averagetargetduration","every","startIndex","fragPrev","backfillProgramDateTimes","endProgramDateTime","PlaylistLoader","_EventHandler","loaders","canHaveQualityLevels","AUDIO_TRACK","SUBTITLE_TRACK","mapContextToLevelType","SUBTITLE","MAIN","getResponseUrl","response","createInternalLoader","PLoader","pLoader","Loader","loader","getInternalLoader","resetInternalLoader","contextType","destroyInternalLoaders","onManifestLoading","load","MANIFEST","responseType","onLevelLoading","LEVEL","onAudioTrackLoading","onSubtitleTrackLoading","maxRetry","timeout","retryDelay","maxRetryDelay","loaderContext","abort","manifestLoadingMaxRetry","manifestLoadingTimeOut","manifestLoadingRetryDelay","manifestLoadingMaxRetryTimeout","levelLoadingTimeOut","levelLoadingMaxRetry","levelLoadingRetryDelay","levelLoadingMaxRetryTimeout","loaderConfig","loaderCallbacks","onSuccess","loadsuccess","onError","loaderror","onTimeout","loadtimeout","networkDetails","isSidxRequest","_handleSidxRequest","_handlePlaylistLoaded","tload","_handleTrackOrLevelPlaylist","_handleMasterPlaylist","_handleManifestParsingError","_handleNetworkError","audioTracks","subtitles","captions","embeddedAudioFound","unshift","levelId","levelType","levelDetails","singleLevel","tparsed","sidxUrl","rangeStart","rangeEnd","sidxInfo","sidxReferences","segmentRef","segRefInfo","errorData","FragmentLoader","loaderName","onFragLoading","FragmentILoader","fLoader","DefaultILoader","loaded","progressData","byteRangeStartOffset","fragLoadingTimeOut","fragLoadingMaxRetryTimeout","onProgress","loadprogress","KeyLoader","decryptkey","decrypturl","onKeyLoading","fragLoadingRetryDelay","FragmentState","FragmentTracker","bufferPadding","timeRanges","_proto","getBufferedFrag","bufferedFrags","fragmentEntity","body","buffered","bufferedFragKey","detectEvictedFragments","elementaryStream","timeRange","fragmentTimes","time","_this2","esData","range","isTimeBuffered","removeFragment","detectPartialFragments","_this3","fragKey","getFragmentKey","getBufferedTimes","fragmentPartial","partial","getPartialFragment","timePadding","_this4","bestFragment","bestOverlap","isPartial","getState","onFragLoaded","bitrateTest","onBufferAppended","_this5","onFragBuffered","hasFragment","removeAllFragments","BinarySearch","search","list","comparisonFn","minIndex","maxIndex","currentIndex","currentElement","comparisonResult","BufferHelper","isBuffered","bufferInfo","maxHoleDuration","vbuffered","bufferedInfo","nextStart","diff","buffered2","buf2len","buf2end","bufferStartNext","bufferLen","bufferStart","bufferEnd","getMediaSource","WebKitMediaSource","Observer","_EventEmitter","Demuxer","mp4","enableWorker","w","work","onwmsg","onWorkerMessage","onerror","filename","lineno","revokeObjectURL","removeEventListener","terminate","lastFrag","nextSN","ArrayBuffer","addGroupId","audioGroupIds","textGroupIds","updatePTS","fromIdx","toIdx","fragFrom","fragTo","fragToPTS","updateFragPTSDTS","maxStartPTS","deltaPTS","drift","fragIdx","PTSKnown","mapFragmentIntersection","oldPlaylist","newPlaylist","intersectionFn","oldFrag","newFrag","TimeRanges","adjustPts","sliding","alignStream","lastLevel","shouldAlign","shouldAlignOnDiscontinuities","referenceFrag","prevDetails","curDetails","prevFrags","curFrags","prevStartFrag","firstFrag","currentFrag","findFirstFragWithCC","findDiscontinuousReferenceFrag","alignDiscontinuities","lastDetails","hasProgramDateTime","lastPDT","newPDT","alignPDT","fragmentWithinToleranceTest","maxFragLookUpTolerance","candidate","candidateLookupTolerance","pdtWithinToleranceTest","pdtBufferEnd","GapController","fragmentTracker","stallReported","poll","lastCurrentTime","currentTime","tnow","stalled","nudgeRetry","ended","readyState","seeking","stalledDuration","_reportStall","_tryFixBufferStall","_trySkipBufferHole","highBufferWatchdogPeriod","_tryNudgeBuffer","lastEndTime","nudgeMaxRetry","targetTime","nudgeOffset","State","STOPPED","STARTING","IDLE","PAUSED","FRAG_LOADING_WAITING_RETRY","WAITING_TRACK","PARSING","PARSED","ENDED","WAITING_INIT_PTS","WAITING_LEVEL","StreamController","_BaseStreamController","audioCodecSwap","_state","gapController","startLoad","startPosition","stopLoad","setInterval","fragLoadError","startFragRequested","startLevel","nextLoadLevel","loadedmetadata","nextLoadPosition","tick","forceStartLoad","doTick","_doTickIdle","retryDate","_checkBuffer","_checkFragmentChanged","levelLastLoaded","startFragPrefetch","levelInfo","maxBufLen","levelBitrate","maxBufferSize","maxBufferLength","maxMaxBufferLength","mediaBuffer","_streamEnded","altAudio","_fetchPayloadOrEos","fragPrevious","fragLen","initialLiveManifestSize","_ensureFragmentAtLivePoint","_findFragment","encrypted","emeEnabled","_loadKey","_loadFragment","maxLatency","liveMaxLatencyDuration","liveMaxLatencyDurationCount","liveSyncPosition","computeLivePosition","PDTValue","isArray","seg","findFragmentByPDT","targetSN","fragNext","findFragmentByPTS","curSNIdx","sameLevel","nextFrag","backtracked","fragState","fragCurrent","autoLevel","autoLevelEnabled","_reduceMaxBufferLength","followingBufferedFrag","fragPlayingCurrent","fragPlaying","fragPlayingLevel","immediateLevelSwitch","immediateSwitch","previouslyPaused","paused","pause","flushMainBuffer","POSITIVE_INFINITY","immediateLevelSwitchEnd","play","nextLevelSwitch","fetchdelay","nextBufferedFrag","nextLevelId","nextLevel","fragLastKbps","startOffset","endOffset","flushScope","onMediaAttached","onvseeking","onMediaSeeking","onvseeked","onMediaSeeked","onvended","onMediaEnded","autoStartLoad","onMediaDetaching","onManifestParsed","aac","heaac","audioCodecSwitch","onLevelLoaded","newDetails","newLevelId","curLevel","oldDetails","PTSFrag","ccOffset","newFragments","oldFragments","adjustSliding","LevelHelper","onKeyLoaded","fragLoaded","currentLevel","tbuffered","pendingBuffering","appended","initSegmentData","_getAudioCodec","onFragParsingInitSegment","fragNew","trackName","ua","levelCodec","parent","content","onFragParsingData","onFragParsed","_checkAppendedParsed","onAudioTrackSwitching","onAudioTrackSwitched","videoBuffer","onBufferCreated","mediaTrack","alternate","pending","total","tfirst","mediaBuffered","fragLoadingMaxRetry","delay","levelRetry","minLength","_seekToStartPos","onFragLoadEmergencyAborted","onBufferFlushed","swapAudioCodec","targetLatency","liveSyncDuration","liveSyncDurationCount","defaultAudioCodec","nextState","previousState","_liveSyncPosition","clearInterval","clearNextTick","tolerance","fragStartOffset","fragEndOffset","_TaskLoop","TaskLoop","_tickInterval","_tickTimer","_tickCallCount","_boundTick","_assertThisInitialized","hasInterval","hasNextTick","millis","clearTimeout","setTimeout","chromeOrFirefox","LevelController","canload","currentLevelIndex","manualLevelIndex","timer","clearTimer","_levels","levelRetryCount","loadError","loadLevel","onManifestLoaded","bitrateStart","levelSet","levelFromSet","videoCodecFound","audioCodecFound","attributes","fragmentError","SUBTITLES","_ref","_ref2","_firstLevel","firstLevel","some","setLevelInternal","newLevel","levelProperties","levelIndex","levelError","recoverLevel","errorEvent","redundantLevels","errorDetails","nextAutoLevel","_ref3","reloadInterval","currentPlaylist","lastRequestTime","minReloadInterval","computeReloadInterval","trequest","audioGroupId","levelObject","_startLevel","configStartLevel","sendAddTrackEvent","videoEl","document","createEvent","initEvent","dispatchEvent","ID3TrackController","cues","removeCue","clearCurrentCues","getID3Track","textTracks","kind","label","addTextTrack","onFragParsingMetadata","Cue","WebKitDataCue","VTTCue","TextTrackCue","cue","addCue","EWMA","halfLife","alpha_","exp","estimate_","totalWeight_","weight","adjAlpha","getTotalWeight","getEstimate","zeroFactor","EwmaBandWidthEstimator","slow","fast","defaultEstimate","defaultEstimate_","minWeight_","minDelayMs_","slow_","fast_","durationMs","numBytes","durationS","bandwidthInBps","canEstimate","AbrController","lastLoadedFragLevel","_nextAutoLevel","_bwEstimator","onCheck","_abandonRulesCheck","abr_controller_assertThisInitialized","ewmaFast","ewmaSlow","abrEwmaFastLive","abrEwmaSlowLive","abrEwmaFastVoD","abrEwmaSlowVoD","abrEwmaDefaultEstimate","minAutoLevel","aborted","playbackRate","requestDelay","loadRate","bw","realBitrate","expectedLen","fragLoadedDelay","bufferStarvationDelay","levelNextBitrate","fragLevelNextLoadedDelay","abrMaxWithRealBitrate","loadedBytes","loadedDuration","fragLoadingProcessingMs","bwEstimate","bitrateTestDelay","_findBestLevel","currentFragDuration","currentBw","maxAutoLevel","maxFetchDuration","bwFactor","bwUpFactor","avgDuration","adjustedbw","fetchDuration","forcedAutoLevel","bwEstimator","nextABRAutoLevel","_nextABRAutoLevel","avgbw","bestLevel","abrBandWidthFactor","abrBandWidthUpFactor","maxStarvationDelay","maxLoadingDelay","BufferController","_msDuration","_levelDuration","_levelTargetDuration","_live","_objectUrl","_needsFlush","_needsEos","audioTimestampOffset","bufferCodecEventsExpected","mediaSource","segments","appending","appendError","flushBufferCounter","pendingTracks","sourceBuffer","flushRange","_onMediaSourceOpen","checkPendingTracks","_onMediaSourceClose","_onMediaSourceEnded","_onSBUpdateEnd","audioBuffer","timestampOffset","doFlush","checkEos","counter","segment","sbSet","sb","doAppending","updateMediaElementDuration","flushLiveBackBuffer","_onSBUpdateError","onLevelPtsUpdated","updating","onMediaAttaching","ms","endOfStream","removeAttribute","pendingTracksCount","createSourceBuffers","onBufferReset","removeSourceBuffer","onBufferCodecs","mimeType","addSourceBuffer","onBufferAppending","onBufferEos","onBufferFlushing","liveBackBufferLength","bufferTypes","targetBackBufferPosition","bufferType","removeBufferRange","onLevelUpdated","liveDurationInfinity","flushBuffer","appendBuffer","code","appendErrorMaxRetry","sbType","bufStart","bufEnd","removeStart","removeEnd","remove","CapLevelController","autoLevelCapping","restrictedLevels","capLevelToPlayerSize","stopCapping","onFpsDropLevelCapping","isLevelAllowed","droppedLevel","HTMLVideoElement","startCapping","onLevelsUpdated","detectPlayerSize","levelsLength","getMaxLevel","streamController","capLevelIndex","validLevels","getMaxLevelByMediaSize","mediaWidth","mediaHeight","maxLevelIndex","devicePixelRatio","clientWidth","offsetWidth","contentScaleFactor","clientHeight","offsetHeight","FPSController","isVideoPlaybackQualityAvailable","capLevelOnFPSDrop","getVideoPlaybackQuality","checkFPSInterval","fpsDroppedMonitoringPeriod","checkFPS","decodedFrames","droppedFrames","lastTime","currentPeriod","currentDropped","lastDroppedFrames","currentDecoded","lastDecodedFrames","droppedFPS","totalDroppedFrames","fpsDroppedMonitoringThreshold","videoPlaybackQuality","totalVideoFrames","droppedVideoFrames","webkitDecodedFrameCount","webkitDroppedFrameCount","XMLHttpRequest","XhrLoader","xhrSetup","requestTimeout","retryTimeout","callbacks","retry","loadInternal","xhr","open","status","setRequestHeader","onreadystatechange","readystatechange","onprogress","send","currentTarget","responseText","responseURL","statusText","lengthComputable","hlsDefaultConfig","_objectSpread","lowBufferWatchdogPeriod","abrController","bufferController","capLevelController","fpsController","minAutoBitrate","emeInitDataInFrag","requestMediaKeySystemAccessFunc","getEMEInitializationDataFunc","getEMELicenseFunc","subtitleStreamController","subtitleTrackController","timelineController","audioStreamController","audioTrackController","emeController","Hls","_Observer","defaultConfig","DefaultConfig","prop","_autoLevelCapping","hls_assertThisInitialized","playListLoader","fragmentLoader","keyLoader","id3TrackController","levelController","networkControllers","Controller","coreComponents","isSupported","SourceBuffer","WebKitSourceBuffer","sourceBufferValidAPI","detachMedia","component","attachMedia","loadSource","location","href","controller","recoverMediaError","manualLevel","shouldStartCapping","newCapLevelToPlayerSize","NaN","audioTrackId","subtitleTracks","subtitleTrack","subtitleTrackId","subtitleDisplay"],"mappings":"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","file":"hls.light.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Hls\"] = factory();\n\telse\n\t\troot[\"Hls\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","import { getSelfScope } from './get-self-scope';\n\nfunction noop (...args) {}\n\nconst fakeLogger = {\n  trace: noop,\n  debug: noop,\n  log: noop,\n  warn: noop,\n  info: noop,\n  error: noop\n};\n\nlet exportedLogger = fakeLogger;\n\n// let lastCallTime;\n// function formatMsgWithTimeInfo(type, msg) {\n//   const now = Date.now();\n//   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';\n//   lastCallTime = now;\n//   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';\n//   return msg;\n// }\n\nfunction formatMsg (type, msg) {\n  msg = '[' + type + '] > ' + msg;\n  return msg;\n}\n\nconst global = getSelfScope();\n\nfunction consolePrintFn (type) {\n  const func = global.console[type];\n  if (func) {\n    return function (...args) {\n      if (args[0]) {\n        args[0] = formatMsg(type, args[0]);\n      }\n\n      func.apply(global.console, args);\n    };\n  }\n  return noop;\n}\n\nfunction exportLoggerFunctions (debugConfig, ...functions) {\n  functions.forEach(function (type) {\n    exportedLogger[type] = debugConfig[type] ? debugConfig[type].bind(debugConfig) : consolePrintFn(type);\n  });\n}\n\nexport const enableLogs = function (debugConfig) {\n  // check that console is available\n  if ((global.console && debugConfig === true) || typeof debugConfig === 'object') {\n    exportLoggerFunctions(debugConfig,\n      // Remove out from list here to hard-disable a log-level\n      // 'trace',\n      'debug',\n      'log',\n      'info',\n      'warn',\n      'error'\n    );\n    // Some browsers don't allow to use bind on console object anyway\n    // fallback to default if needed\n    try {\n      exportedLogger.log();\n    } catch (e) {\n      exportedLogger = fakeLogger;\n    }\n  } else {\n    exportedLogger = fakeLogger;\n  }\n};\n\nexport const logger = exportedLogger;\n","/**\n * @readonly\n * @enum {string}\n */\nconst HlsEvents = {\n  // fired before MediaSource is attaching to media element - data: { media }\n  MEDIA_ATTACHING: 'hlsMediaAttaching',\n  // fired when MediaSource has been succesfully attached to media element - data: { }\n  MEDIA_ATTACHED: 'hlsMediaAttached',\n  // fired before detaching MediaSource from media element - data: { }\n  MEDIA_DETACHING: 'hlsMediaDetaching',\n  // fired when MediaSource has been detached from media element - data: { }\n  MEDIA_DETACHED: 'hlsMediaDetached',\n  // fired when we buffer is going to be reset - data: { }\n  BUFFER_RESET: 'hlsBufferReset',\n  // fired when we know about the codecs that we need buffers for to push into - data: {tracks : { container, codec, levelCodec, initSegment, metadata }}\n  BUFFER_CODECS: 'hlsBufferCodecs',\n  // fired when sourcebuffers have been created - data: { tracks : tracks }\n  BUFFER_CREATED: 'hlsBufferCreated',\n  // fired when we append a segment to the buffer - data: { segment: segment object }\n  BUFFER_APPENDING: 'hlsBufferAppending',\n  // fired when we are done with appending a media segment to the buffer - data : { parent : segment parent that triggered BUFFER_APPENDING, pending : nb of segments waiting for appending for this segment parent}\n  BUFFER_APPENDED: 'hlsBufferAppended',\n  // fired when the stream is finished and we want to notify the media buffer that there will be no more data - data: { }\n  BUFFER_EOS: 'hlsBufferEos',\n  // fired when the media buffer should be flushed - data { startOffset, endOffset }\n  BUFFER_FLUSHING: 'hlsBufferFlushing',\n  // fired when the media buffer has been flushed - data: { }\n  BUFFER_FLUSHED: 'hlsBufferFlushed',\n  // fired to signal that a manifest loading starts - data: { url : manifestURL}\n  MANIFEST_LOADING: 'hlsManifestLoading',\n  // fired after manifest has been loaded - data: { levels : [available quality levels], audioTracks : [ available audio tracks], url : manifestURL, stats : { trequest, tfirst, tload, mtime}}\n  MANIFEST_LOADED: 'hlsManifestLoaded',\n  // fired after manifest has been parsed - data: { levels : [available quality levels], firstLevel : index of first quality level appearing in Manifest}\n  MANIFEST_PARSED: 'hlsManifestParsed',\n  // fired when a level switch is requested - data: { level : id of new level }\n  LEVEL_SWITCHING: 'hlsLevelSwitching',\n  // fired when a level switch is effective - data: { level : id of new level }\n  LEVEL_SWITCHED: 'hlsLevelSwitched',\n  // fired when a level playlist loading starts - data: { url : level URL, level : id of level being loaded}\n  LEVEL_LOADING: 'hlsLevelLoading',\n  // fired when a level playlist loading finishes - data: { details : levelDetails object, level : id of loaded level, stats : { trequest, tfirst, tload, mtime} }\n  LEVEL_LOADED: 'hlsLevelLoaded',\n  // fired when a level's details have been updated based on previous details, after it has been loaded - data: { details : levelDetails object, level : id of updated level }\n  LEVEL_UPDATED: 'hlsLevelUpdated',\n  // fired when a level's PTS information has been updated after parsing a fragment - data: { details : levelDetails object, level : id of updated level, drift: PTS drift observed when parsing last fragment }\n  LEVEL_PTS_UPDATED: 'hlsLevelPtsUpdated',\n  // fired to notify that audio track lists has been updated - data: { audioTracks : audioTracks }\n  AUDIO_TRACKS_UPDATED: 'hlsAudioTracksUpdated',\n  // fired when an audio track switching is requested - data: { id : audio track id }\n  AUDIO_TRACK_SWITCHING: 'hlsAudioTrackSwitching',\n  // fired when an audio track switch actually occurs - data: { id : audio track id }\n  AUDIO_TRACK_SWITCHED: 'hlsAudioTrackSwitched',\n  // fired when an audio track loading starts - data: { url : audio track URL, id : audio track id }\n  AUDIO_TRACK_LOADING: 'hlsAudioTrackLoading',\n  // fired when an audio track loading finishes - data: { details : levelDetails object, id : audio track id, stats : { trequest, tfirst, tload, mtime } }\n  AUDIO_TRACK_LOADED: 'hlsAudioTrackLoaded',\n  // fired to notify that subtitle track lists has been updated - data: { subtitleTracks : subtitleTracks }\n  SUBTITLE_TRACKS_UPDATED: 'hlsSubtitleTracksUpdated',\n  // fired when an subtitle track switch occurs - data: { id : subtitle track id }\n  SUBTITLE_TRACK_SWITCH: 'hlsSubtitleTrackSwitch',\n  // fired when a subtitle track loading starts - data: { url : subtitle track URL, id : subtitle track id }\n  SUBTITLE_TRACK_LOADING: 'hlsSubtitleTrackLoading',\n  // fired when a subtitle track loading finishes - data: { details : levelDetails object, id : subtitle track id, stats : { trequest, tfirst, tload, mtime } }\n  SUBTITLE_TRACK_LOADED: 'hlsSubtitleTrackLoaded',\n  // fired when a subtitle fragment has been processed - data: { success : boolean, frag : the processed frag }\n  SUBTITLE_FRAG_PROCESSED: 'hlsSubtitleFragProcessed',\n  // fired when the first timestamp is found - data: { id : demuxer id, initPTS: initPTS, frag : fragment object }\n  INIT_PTS_FOUND: 'hlsInitPtsFound',\n  // fired when a fragment loading starts - data: { frag : fragment object }\n  FRAG_LOADING: 'hlsFragLoading',\n  // fired when a fragment loading is progressing - data: { frag : fragment object, { trequest, tfirst, loaded } }\n  FRAG_LOAD_PROGRESS: 'hlsFragLoadProgress',\n  // Identifier for fragment load aborting for emergency switch down - data: { frag : fragment object }\n  FRAG_LOAD_EMERGENCY_ABORTED: 'hlsFragLoadEmergencyAborted',\n  // fired when a fragment loading is completed - data: { frag : fragment object, payload : fragment payload, stats : { trequest, tfirst, tload, length } }\n  FRAG_LOADED: 'hlsFragLoaded',\n  // fired when a fragment has finished decrypting - data: { id : demuxer id, frag: fragment object, payload : fragment payload, stats : { tstart, tdecrypt } }\n  FRAG_DECRYPTED: 'hlsFragDecrypted',\n  // fired when Init Segment has been extracted from fragment - data: { id : demuxer id, frag: fragment object, moov : moov MP4 box, codecs : codecs found while parsing fragment }\n  FRAG_PARSING_INIT_SEGMENT: 'hlsFragParsingInitSegment',\n  // fired when parsing sei text is completed - data: { id : demuxer id, frag: fragment object, samples : [ sei samples pes ] }\n  FRAG_PARSING_USERDATA: 'hlsFragParsingUserdata',\n  // fired when parsing id3 is completed - data: { id : demuxer id, frag: fragment object, samples : [ id3 samples pes ] }\n  FRAG_PARSING_METADATA: 'hlsFragParsingMetadata',\n  // fired when data have been extracted from fragment - data: { id : demuxer id, frag: fragment object, data1 : moof MP4 box or TS fragments, data2 : mdat MP4 box or null}\n  FRAG_PARSING_DATA: 'hlsFragParsingData',\n  // fired when fragment parsing is completed - data: { id : demuxer id, frag: fragment object }\n  FRAG_PARSED: 'hlsFragParsed',\n  // fired when fragment remuxed MP4 boxes have all been appended into SourceBuffer - data: { id : demuxer id, frag : fragment object, stats : { trequest, tfirst, tload, tparsed, tbuffered, length, bwEstimate } }\n  FRAG_BUFFERED: 'hlsFragBuffered',\n  // fired when fragment matching with current media position is changing - data : { id : demuxer id, frag : fragment object }\n  FRAG_CHANGED: 'hlsFragChanged',\n  // Identifier for a FPS drop event - data: { curentDropped, currentDecoded, totalDroppedFrames }\n  FPS_DROP: 'hlsFpsDrop',\n  // triggered when FPS drop triggers auto level capping - data: { level, droppedlevel }\n  FPS_DROP_LEVEL_CAPPING: 'hlsFpsDropLevelCapping',\n  // Identifier for an error event - data: { type : error type, details : error details, fatal : if true, hls.js cannot/will not try to recover, if false, hls.js will try to recover,other error specific data }\n  ERROR: 'hlsError',\n  // fired when hls.js instance starts destroying. Different from MEDIA_DETACHED as one could want to detach and reattach a media to the instance of hls.js to handle mid-rolls for example - data: { }\n  DESTROYING: 'hlsDestroying',\n  // fired when a decrypt key loading starts - data: { frag : fragment object }\n  KEY_LOADING: 'hlsKeyLoading',\n  // fired when a decrypt key loading is completed - data: { frag : fragment object, payload : key payload, stats : { trequest, tfirst, tload, length } }\n  KEY_LOADED: 'hlsKeyLoaded',\n  // fired upon stream controller state transitions - data: { previousState, nextState }\n  STREAM_STATE_TRANSITION: 'hlsStreamStateTransition',\n  // fired when EME is being configured\n  EME_CONFIGURING: 'hlsEmeConfiguring',\n  // fired when EME has been configured\n  EME_CONFIGURED: 'hlsEmeConfigured'\n};\n\nexport default HlsEvents;\n","export const ErrorTypes = {\n  // Identifier for a network error (loading error / timeout ...)\n  NETWORK_ERROR: 'networkError',\n  // Identifier for a media Error (video/parsing/mediasource error)\n  MEDIA_ERROR: 'mediaError',\n  // EME (encrypted media extensions) errors\n  KEY_SYSTEM_ERROR: 'keySystemError',\n  // Identifier for a mux Error (demuxing/remuxing)\n  MUX_ERROR: 'muxError',\n  // Identifier for all other errors\n  OTHER_ERROR: 'otherError'\n};\n\n/**\n * @enum {ErrorDetails}\n * @typedef {string} ErrorDetail\n */\nexport const ErrorDetails = {\n  // Identifier for not being able to access media keys system - data: {}\n  KEY_SYSTEM_NO_ACCESS: 'keySystemNoAccess',\n  // Identifier for not being able to set keys on media - data: {}\n  KEY_SYSTEM_NO_KEYS: 'keySystemNoKeys',\n  // Identifier for generating a license request failure - data: {}\n  KEY_SYSTEM_GENERATE_REQUEST_FAILED: 'keySystemGenerateRequestFailed',\n  // Identifier for a license request failure - data: {}\n  KEY_SYSTEM_LICENSE_REQUEST_FAILED: 'keySystemLicenseRequestFailed',\n  // Identifier for a license update failure - data: {}\n  KEY_SYSTEM_LICENSE_UPDATE_FAILED: 'keySystemLicenseUpdateFailed',\n  // Identifier for a manifest load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  MANIFEST_LOAD_ERROR: 'manifestLoadError',\n  // Identifier for a manifest load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  MANIFEST_LOAD_TIMEOUT: 'manifestLoadTimeOut',\n  // Identifier for a manifest parsing error - data: { url : faulty URL, reason : error reason}\n  MANIFEST_PARSING_ERROR: 'manifestParsingError',\n  // Identifier for a manifest with only incompatible codecs error - data: { url : faulty URL, reason : error reason}\n  MANIFEST_INCOMPATIBLE_CODECS_ERROR: 'manifestIncompatibleCodecsError',\n  // Identifier for a level load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  LEVEL_LOAD_ERROR: 'levelLoadError',\n  // Identifier for a level load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  LEVEL_LOAD_TIMEOUT: 'levelLoadTimeOut',\n  // Identifier for a level switch error - data: { level : faulty level Id, event : error description}\n  LEVEL_SWITCH_ERROR: 'levelSwitchError',\n  // Identifier for an audio track load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  AUDIO_TRACK_LOAD_ERROR: 'audioTrackLoadError',\n  // Identifier for an audio track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  AUDIO_TRACK_LOAD_TIMEOUT: 'audioTrackLoadTimeOut',\n  // Identifier for fragment load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n  FRAG_LOAD_ERROR: 'fragLoadError',\n  // Identifier for fragment load timeout error - data: { frag : fragment object}\n  FRAG_LOAD_TIMEOUT: 'fragLoadTimeOut',\n  // Identifier for a fragment decryption error event - data: {id : demuxer Id,frag: fragment object, reason : parsing error description }\n  FRAG_DECRYPT_ERROR: 'fragDecryptError',\n  // Identifier for a fragment parsing error event - data: { id : demuxer Id, reason : parsing error description }\n  // will be renamed DEMUX_PARSING_ERROR and switched to MUX_ERROR in the next major release\n  FRAG_PARSING_ERROR: 'fragParsingError',\n  // Identifier for a remux alloc error event - data: { id : demuxer Id, frag : fragment object, bytes : nb of bytes on which allocation failed , reason : error text }\n  REMUX_ALLOC_ERROR: 'remuxAllocError',\n  // Identifier for decrypt key load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n  KEY_LOAD_ERROR: 'keyLoadError',\n  // Identifier for decrypt key load timeout error - data: { frag : fragment object}\n  KEY_LOAD_TIMEOUT: 'keyLoadTimeOut',\n  // Triggered when an exception occurs while adding a sourceBuffer to MediaSource - data : {  err : exception , mimeType : mimeType }\n  BUFFER_ADD_CODEC_ERROR: 'bufferAddCodecError',\n  // Identifier for a buffer append error - data: append error description\n  BUFFER_APPEND_ERROR: 'bufferAppendError',\n  // Identifier for a buffer appending error event - data: appending error description\n  BUFFER_APPENDING_ERROR: 'bufferAppendingError',\n  // Identifier for a buffer stalled error event\n  BUFFER_STALLED_ERROR: 'bufferStalledError',\n  // Identifier for a buffer full event\n  BUFFER_FULL_ERROR: 'bufferFullError',\n  // Identifier for a buffer seek over hole event\n  BUFFER_SEEK_OVER_HOLE: 'bufferSeekOverHole',\n  // Identifier for a buffer nudge on stall (playback is stuck although currentTime is in a buffered area)\n  BUFFER_NUDGE_ON_STALL: 'bufferNudgeOnStall',\n  // Identifier for an internal exception happening inside hls.js while handling an event\n  INTERNAL_EXCEPTION: 'internalException'\n};\n","export const isFiniteNumber = Number.isFinite || function (value) {\n  return typeof value === 'number' && isFinite(value);\n};\n","import { getSelfScope } from '../utils/get-self-scope';\n\n/**\n * ID3 parser\n */\nclass ID3 {\n  /**\n   * Returns true if an ID3 header can be found at offset in data\n   * @param {Uint8Array} data - The data to search in\n   * @param {number} offset - The offset at which to start searching\n   * @return {boolean} - True if an ID3 header is found\n   */\n  static isHeader (data, offset) {\n    /*\n    * http://id3.org/id3v2.3.0\n    * [0]     = 'I'\n    * [1]     = 'D'\n    * [2]     = '3'\n    * [3,4]   = {Version}\n    * [5]     = {Flags}\n    * [6-9]   = {ID3 Size}\n    *\n    * An ID3v2 tag can be detected with the following pattern:\n    *  $49 44 33 yy yy xx zz zz zz zz\n    * Where yy is less than $FF, xx is the 'flags' byte and zz is less than $80\n    */\n    if (offset + 10 <= data.length) {\n      // look for 'ID3' identifier\n      if (data[offset] === 0x49 && data[offset + 1] === 0x44 && data[offset + 2] === 0x33) {\n        // check version is within range\n        if (data[offset + 3] < 0xFF && data[offset + 4] < 0xFF) {\n          // check size is within range\n          if (data[offset + 6] < 0x80 && data[offset + 7] < 0x80 && data[offset + 8] < 0x80 && data[offset + 9] < 0x80) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns true if an ID3 footer can be found at offset in data\n   * @param {Uint8Array} data - The data to search in\n   * @param {number} offset - The offset at which to start searching\n   * @return {boolean} - True if an ID3 footer is found\n   */\n  static isFooter (data, offset) {\n    /*\n    * The footer is a copy of the header, but with a different identifier\n    */\n    if (offset + 10 <= data.length) {\n      // look for '3DI' identifier\n      if (data[offset] === 0x33 && data[offset + 1] === 0x44 && data[offset + 2] === 0x49) {\n        // check version is within range\n        if (data[offset + 3] < 0xFF && data[offset + 4] < 0xFF) {\n          // check size is within range\n          if (data[offset + 6] < 0x80 && data[offset + 7] < 0x80 && data[offset + 8] < 0x80 && data[offset + 9] < 0x80) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns any adjacent ID3 tags found in data starting at offset, as one block of data\n   * @param {Uint8Array} data - The data to search in\n   * @param {number} offset - The offset at which to start searching\n   * @return {Uint8Array} - The block of data containing any ID3 tags found\n   */\n  static getID3Data (data, offset) {\n    const front = offset;\n    let length = 0;\n\n    while (ID3.isHeader(data, offset)) {\n      // ID3 header is 10 bytes\n      length += 10;\n\n      const size = ID3._readSize(data, offset + 6);\n      length += size;\n\n      if (ID3.isFooter(data, offset + 10)) {\n        // ID3 footer is 10 bytes\n        length += 10;\n      }\n\n      offset += length;\n    }\n\n    if (length > 0) {\n      return data.subarray(front, front + length);\n    }\n\n    return undefined;\n  }\n\n  static _readSize (data, offset) {\n    let size = 0;\n    size = ((data[offset] & 0x7f) << 21);\n    size |= ((data[offset + 1] & 0x7f) << 14);\n    size |= ((data[offset + 2] & 0x7f) << 7);\n    size |= (data[offset + 3] & 0x7f);\n    return size;\n  }\n\n  /**\n   * Searches for the Elementary Stream timestamp found in the ID3 data chunk\n   * @param {Uint8Array} data - Block of data containing one or more ID3 tags\n   * @return {number} - The timestamp\n   */\n  static getTimeStamp (data) {\n    const frames = ID3.getID3Frames(data);\n    for (let i = 0; i < frames.length; i++) {\n      const frame = frames[i];\n      if (ID3.isTimeStampFrame(frame)) {\n        return ID3._readTimeStamp(frame);\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Returns true if the ID3 frame is an Elementary Stream timestamp frame\n   * @param {ID3 frame} frame\n   */\n  static isTimeStampFrame (frame) {\n    return (frame && frame.key === 'PRIV' && frame.info === 'com.apple.streaming.transportStreamTimestamp');\n  }\n\n  static _getFrameData (data) {\n    /*\n    Frame ID       $xx xx xx xx (four characters)\n    Size           $xx xx xx xx\n    Flags          $xx xx\n    */\n    const type = String.fromCharCode(data[0], data[1], data[2], data[3]);\n    const size = ID3._readSize(data, 4);\n\n    // skip frame id, size, and flags\n    let offset = 10;\n\n    return { type, size, data: data.subarray(offset, offset + size) };\n  }\n\n  /**\n   * Returns an array of ID3 frames found in all the ID3 tags in the id3Data\n   * @param {Uint8Array} id3Data - The ID3 data containing one or more ID3 tags\n   * @return {ID3 frame[]} - Array of ID3 frame objects\n   */\n  static getID3Frames (id3Data) {\n    let offset = 0;\n    const frames = [];\n\n    while (ID3.isHeader(id3Data, offset)) {\n      const size = ID3._readSize(id3Data, offset + 6);\n      // skip past ID3 header\n      offset += 10;\n      const end = offset + size;\n      // loop through frames in the ID3 tag\n      while (offset + 8 < end) {\n        const frameData = ID3._getFrameData(id3Data.subarray(offset));\n        const frame = ID3._decodeFrame(frameData);\n        if (frame) {\n          frames.push(frame);\n        }\n\n        // skip frame header and frame data\n        offset += frameData.size + 10;\n      }\n\n      if (ID3.isFooter(id3Data, offset)) {\n        offset += 10;\n      }\n    }\n\n    return frames;\n  }\n\n  static _decodeFrame (frame) {\n    if (frame.type === 'PRIV') {\n      return ID3._decodePrivFrame(frame);\n    } else if (frame.type[0] === 'T') {\n      return ID3._decodeTextFrame(frame);\n    } else if (frame.type[0] === 'W') {\n      return ID3._decodeURLFrame(frame);\n    }\n\n    return undefined;\n  }\n\n  static _readTimeStamp (timeStampFrame) {\n    if (timeStampFrame.data.byteLength === 8) {\n      const data = new Uint8Array(timeStampFrame.data);\n      // timestamp is 33 bit expressed as a big-endian eight-octet number,\n      // with the upper 31 bits set to zero.\n      const pts33Bit = data[3] & 0x1;\n      let timestamp = (data[4] << 23) +\n                      (data[5] << 15) +\n                      (data[6] << 7) +\n                       data[7];\n      timestamp /= 45;\n\n      if (pts33Bit) {\n        timestamp += 47721858.84;\n      } // 2^32 / 90\n\n      return Math.round(timestamp);\n    }\n\n    return undefined;\n  }\n\n  static _decodePrivFrame (frame) {\n    /*\n    Format: <text string>\\0<binary data>\n    */\n    if (frame.size < 2) {\n      return undefined;\n    }\n\n    const owner = ID3._utf8ArrayToStr(frame.data, true);\n    const privateData = new Uint8Array(frame.data.subarray(owner.length + 1));\n\n    return { key: frame.type, info: owner, data: privateData.buffer };\n  }\n\n  static _decodeTextFrame (frame) {\n    if (frame.size < 2) {\n      return undefined;\n    }\n\n    if (frame.type === 'TXXX') {\n      /*\n      Format:\n      [0]   = {Text Encoding}\n      [1-?] = {Description}\\0{Value}\n      */\n      let index = 1;\n      const description = ID3._utf8ArrayToStr(frame.data.subarray(index), true);\n\n      index += description.length + 1;\n      const value = ID3._utf8ArrayToStr(frame.data.subarray(index));\n\n      return { key: frame.type, info: description, data: value };\n    } else {\n      /*\n      Format:\n      [0]   = {Text Encoding}\n      [1-?] = {Value}\n      */\n      const text = ID3._utf8ArrayToStr(frame.data.subarray(1));\n      return { key: frame.type, data: text };\n    }\n  }\n\n  static _decodeURLFrame (frame) {\n    if (frame.type === 'WXXX') {\n      /*\n      Format:\n      [0]   = {Text Encoding}\n      [1-?] = {Description}\\0{URL}\n      */\n      if (frame.size < 2) {\n        return undefined;\n      }\n\n      let index = 1;\n      const description = ID3._utf8ArrayToStr(frame.data.subarray(index));\n\n      index += description.length + 1;\n      const value = ID3._utf8ArrayToStr(frame.data.subarray(index));\n\n      return { key: frame.type, info: description, data: value };\n    } else {\n      /*\n      Format:\n      [0-?] = {URL}\n      */\n      const url = ID3._utf8ArrayToStr(frame.data);\n      return { key: frame.type, data: url };\n    }\n  }\n\n  // http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197\n  // http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt\n  /* utf.js - UTF-8 <=> UTF-16 convertion\n   *\n   * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\n   * Version: 1.0\n   * LastModified: Dec 25 1999\n   * This library is free.  You can redistribute it and/or modify it.\n   */\n  static _utf8ArrayToStr (array, exitOnNull = false) {\n    const decoder = getTextDecoder();\n    if (decoder) {\n      const decoded = decoder.decode(array);\n\n      if (exitOnNull) {\n        // grab up to the first null\n        const idx = decoded.indexOf('\\0');\n        return idx !== -1 ? decoded.substring(0, idx) : decoded;\n      }\n\n      // remove any null characters\n      return decoded.replace(/\\0/g, '');\n    }\n\n    const len = array.length;\n    let c;\n    let char2;\n    let char3;\n    let out = '';\n    let i = 0;\n    while (i < len) {\n      c = array[i++];\n      if (c === 0x00 && exitOnNull) {\n        return out;\n      } else if (c === 0x00 || c === 0x03) {\n        // If the character is 3 (END_OF_TEXT) or 0 (NULL) then skip it\n        continue;\n      }\n      switch (c >> 4) {\n      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n      case 12: case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode(((c & 0x0F) << 12) |\n                    ((char2 & 0x3F) << 6) |\n                    ((char3 & 0x3F) << 0));\n        break;\n      default:\n      }\n    }\n    return out;\n  }\n}\n\nlet decoder;\n\nfunction getTextDecoder () {\n  const global = getSelfScope(); // safeguard for code that might run both on worker and main thread\n  if (!decoder && typeof global.TextDecoder !== 'undefined') {\n    decoder = new global.TextDecoder('utf-8');\n  }\n\n  return decoder;\n}\n\nconst utf8ArrayToStr = ID3._utf8ArrayToStr;\n\nexport default ID3;\n\nexport { utf8ArrayToStr };\n","export function getSelfScope () {\n  // see https://stackoverflow.com/a/11237259/589493\n  if (typeof window === 'undefined') {\n    /* eslint-disable-next-line no-undef */\n    return self;\n  } else {\n    return window;\n  }\n}\n","// This file is inserted as a shim for modules which we do not want to include into the distro.\n// This replacement is done in the \"resolve\" section of the webpack config.\nmodule.exports = void 0;\n","// see https://tools.ietf.org/html/rfc1808\n\n/* jshint ignore:start */\n(function(root) { \n/* jshint ignore:end */\n\n  var URL_REGEX = /^((?:[a-zA-Z0-9+\\-.]+:)?)(\\/\\/[^\\/?#]*)?((?:[^\\/\\?#]*\\/)*.*?)??(;.*?)?(\\?.*?)?(#.*?)?$/;\n  var FIRST_SEGMENT_REGEX = /^([^\\/?#]*)(.*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/).*?(?=\\/)/g;\n\n  var URLToolkit = { // jshint ignore:line\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function(baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function(url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || ''\n      };\n    },\n    normalizePath: function(path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {} // jshint ignore:line\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function(parts) {\n      return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;\n    }\n  };\n\n/* jshint ignore:start */\n  if(typeof exports === 'object' && typeof module === 'object')\n    module.exports = URLToolkit;\n  else if(typeof define === 'function' && define.amd)\n    define([], function() { return URLToolkit; });\n  else if(typeof exports === 'object')\n    exports[\"URLToolkit\"] = URLToolkit;\n  else\n    root[\"URLToolkit\"] = URLToolkit;\n})(this);\n/* jshint ignore:end */\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","export default class AESCrypto {\n  constructor (subtle, iv) {\n    this.subtle = subtle;\n    this.aesIV = iv;\n  }\n\n  decrypt (data, key) {\n    return this.subtle.decrypt({ name: 'AES-CBC', iv: this.aesIV }, key, data);\n  }\n}\n","class FastAESKey {\n  constructor (subtle, key) {\n    this.subtle = subtle;\n    this.key = key;\n  }\n\n  expandKey () {\n    return this.subtle.importKey('raw', this.key, { name: 'AES-CBC' }, false, ['encrypt', 'decrypt']);\n  }\n}\n\nexport default FastAESKey;\n","// PKCS7\nexport function removePadding (buffer) {\n  const outputBytes = buffer.byteLength;\n  const paddingBytes = outputBytes && (new DataView(buffer)).getUint8(outputBytes - 1);\n  if (paddingBytes) {\n    return buffer.slice(0, outputBytes - paddingBytes);\n  } else {\n    return buffer;\n  }\n}\n\nclass AESDecryptor {\n  constructor () {\n    // Static after running initTable\n    this.rcon = [0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n    this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];\n    this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];\n    this.sBox = new Uint32Array(256);\n    this.invSBox = new Uint32Array(256);\n\n    // Changes during runtime\n    this.key = new Uint32Array(0);\n\n    this.initTable();\n  }\n\n  // Using view.getUint32() also swaps the byte order.\n  uint8ArrayToUint32Array_ (arrayBuffer) {\n    let view = new DataView(arrayBuffer);\n    let newArray = new Uint32Array(4);\n    for (let i = 0; i < 4; i++) {\n      newArray[i] = view.getUint32(i * 4);\n    }\n\n    return newArray;\n  }\n\n  initTable () {\n    let sBox = this.sBox;\n    let invSBox = this.invSBox;\n    let subMix = this.subMix;\n    let subMix0 = subMix[0];\n    let subMix1 = subMix[1];\n    let subMix2 = subMix[2];\n    let subMix3 = subMix[3];\n    let invSubMix = this.invSubMix;\n    let invSubMix0 = invSubMix[0];\n    let invSubMix1 = invSubMix[1];\n    let invSubMix2 = invSubMix[2];\n    let invSubMix3 = invSubMix[3];\n\n    let d = new Uint32Array(256);\n    let x = 0;\n    let xi = 0;\n    let i = 0;\n    for (i = 0; i < 256; i++) {\n      if (i < 128) {\n        d[i] = i << 1;\n      } else {\n        d[i] = (i << 1) ^ 0x11b;\n      }\n    }\n\n    for (i = 0; i < 256; i++) {\n      let sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n      sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n      sBox[x] = sx;\n      invSBox[sx] = x;\n\n      // Compute multiplication\n      let x2 = d[x];\n      let x4 = d[x2];\n      let x8 = d[x4];\n\n      // Compute sub/invSub bytes, mix columns tables\n      let t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n      subMix0[x] = (t << 24) | (t >>> 8);\n      subMix1[x] = (t << 16) | (t >>> 16);\n      subMix2[x] = (t << 8) | (t >>> 24);\n      subMix3[x] = t;\n\n      // Compute inv sub bytes, inv mix columns tables\n      t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n      invSubMix0[sx] = (t << 24) | (t >>> 8);\n      invSubMix1[sx] = (t << 16) | (t >>> 16);\n      invSubMix2[sx] = (t << 8) | (t >>> 24);\n      invSubMix3[sx] = t;\n\n      // Compute next counter\n      if (!x) {\n        x = xi = 1;\n      } else {\n        x = x2 ^ d[d[d[x8 ^ x2]]];\n        xi ^= d[d[xi]];\n      }\n    }\n  }\n\n  expandKey (keyBuffer) {\n    // convert keyBuffer to Uint32Array\n    let key = this.uint8ArrayToUint32Array_(keyBuffer);\n    let sameKey = true;\n    let offset = 0;\n\n    while (offset < key.length && sameKey) {\n      sameKey = (key[offset] === this.key[offset]);\n      offset++;\n    }\n\n    if (sameKey) {\n      return;\n    }\n\n    this.key = key;\n    let keySize = this.keySize = key.length;\n\n    if (keySize !== 4 && keySize !== 6 && keySize !== 8) {\n      throw new Error('Invalid aes key size=' + keySize);\n    }\n\n    let ksRows = this.ksRows = (keySize + 6 + 1) * 4;\n    let ksRow;\n    let invKsRow;\n\n    let keySchedule = this.keySchedule = new Uint32Array(ksRows);\n    let invKeySchedule = this.invKeySchedule = new Uint32Array(ksRows);\n    let sbox = this.sBox;\n    let rcon = this.rcon;\n\n    let invSubMix = this.invSubMix;\n    let invSubMix0 = invSubMix[0];\n    let invSubMix1 = invSubMix[1];\n    let invSubMix2 = invSubMix[2];\n    let invSubMix3 = invSubMix[3];\n\n    let prev;\n    let t;\n\n    for (ksRow = 0; ksRow < ksRows; ksRow++) {\n      if (ksRow < keySize) {\n        prev = keySchedule[ksRow] = key[ksRow];\n        continue;\n      }\n      t = prev;\n\n      if (ksRow % keySize === 0) {\n        // Rot word\n        t = (t << 8) | (t >>> 24);\n\n        // Sub word\n        t = (sbox[t >>> 24] << 24) | (sbox[(t >>> 16) & 0xff] << 16) | (sbox[(t >>> 8) & 0xff] << 8) | sbox[t & 0xff];\n\n        // Mix Rcon\n        t ^= rcon[(ksRow / keySize) | 0] << 24;\n      } else if (keySize > 6 && ksRow % keySize === 4) {\n        // Sub word\n        t = (sbox[t >>> 24] << 24) | (sbox[(t >>> 16) & 0xff] << 16) | (sbox[(t >>> 8) & 0xff] << 8) | sbox[t & 0xff];\n      }\n\n      keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t) >>> 0;\n    }\n\n    for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n      ksRow = ksRows - invKsRow;\n      if (invKsRow & 3) {\n        t = keySchedule[ksRow];\n      } else {\n        t = keySchedule[ksRow - 4];\n      }\n\n      if (invKsRow < 4 || ksRow <= 4) {\n        invKeySchedule[invKsRow] = t;\n      } else {\n        invKeySchedule[invKsRow] = invSubMix0[sbox[t >>> 24]] ^ invSubMix1[sbox[(t >>> 16) & 0xff]] ^ invSubMix2[sbox[(t >>> 8) & 0xff]] ^ invSubMix3[sbox[t & 0xff]];\n      }\n\n      invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;\n    }\n  }\n\n  // Adding this as a method greatly improves performance.\n  networkToHostOrderSwap (word) {\n    return (word << 24) | ((word & 0xff00) << 8) | ((word & 0xff0000) >> 8) | (word >>> 24);\n  }\n\n  decrypt (inputArrayBuffer, offset, aesIV, removePKCS7Padding) {\n    let nRounds = this.keySize + 6;\n    let invKeySchedule = this.invKeySchedule;\n    let invSBOX = this.invSBox;\n\n    let invSubMix = this.invSubMix;\n    let invSubMix0 = invSubMix[0];\n    let invSubMix1 = invSubMix[1];\n    let invSubMix2 = invSubMix[2];\n    let invSubMix3 = invSubMix[3];\n\n    let initVector = this.uint8ArrayToUint32Array_(aesIV);\n    let initVector0 = initVector[0];\n    let initVector1 = initVector[1];\n    let initVector2 = initVector[2];\n    let initVector3 = initVector[3];\n\n    let inputInt32 = new Int32Array(inputArrayBuffer);\n    let outputInt32 = new Int32Array(inputInt32.length);\n\n    let t0, t1, t2, t3;\n    let s0, s1, s2, s3;\n    let inputWords0, inputWords1, inputWords2, inputWords3;\n\n    let ksRow, i;\n    let swapWord = this.networkToHostOrderSwap;\n\n    while (offset < inputInt32.length) {\n      inputWords0 = swapWord(inputInt32[offset]);\n      inputWords1 = swapWord(inputInt32[offset + 1]);\n      inputWords2 = swapWord(inputInt32[offset + 2]);\n      inputWords3 = swapWord(inputInt32[offset + 3]);\n\n      s0 = inputWords0 ^ invKeySchedule[0];\n      s1 = inputWords3 ^ invKeySchedule[1];\n      s2 = inputWords2 ^ invKeySchedule[2];\n      s3 = inputWords1 ^ invKeySchedule[3];\n\n      ksRow = 4;\n\n      // Iterate through the rounds of decryption\n      for (i = 1; i < nRounds; i++) {\n        t0 = invSubMix0[s0 >>> 24] ^ invSubMix1[(s1 >> 16) & 0xff] ^ invSubMix2[(s2 >> 8) & 0xff] ^ invSubMix3[s3 & 0xff] ^ invKeySchedule[ksRow];\n        t1 = invSubMix0[s1 >>> 24] ^ invSubMix1[(s2 >> 16) & 0xff] ^ invSubMix2[(s3 >> 8) & 0xff] ^ invSubMix3[s0 & 0xff] ^ invKeySchedule[ksRow + 1];\n        t2 = invSubMix0[s2 >>> 24] ^ invSubMix1[(s3 >> 16) & 0xff] ^ invSubMix2[(s0 >> 8) & 0xff] ^ invSubMix3[s1 & 0xff] ^ invKeySchedule[ksRow + 2];\n        t3 = invSubMix0[s3 >>> 24] ^ invSubMix1[(s0 >> 16) & 0xff] ^ invSubMix2[(s1 >> 8) & 0xff] ^ invSubMix3[s2 & 0xff] ^ invKeySchedule[ksRow + 3];\n        // Update state\n        s0 = t0;\n        s1 = t1;\n        s2 = t2;\n        s3 = t3;\n\n        ksRow = ksRow + 4;\n      }\n\n      // Shift rows, sub bytes, add round key\n      t0 = ((invSBOX[s0 >>> 24] << 24) ^ (invSBOX[(s1 >> 16) & 0xff] << 16) ^ (invSBOX[(s2 >> 8) & 0xff] << 8) ^ invSBOX[s3 & 0xff]) ^ invKeySchedule[ksRow];\n      t1 = ((invSBOX[s1 >>> 24] << 24) ^ (invSBOX[(s2 >> 16) & 0xff] << 16) ^ (invSBOX[(s3 >> 8) & 0xff] << 8) ^ invSBOX[s0 & 0xff]) ^ invKeySchedule[ksRow + 1];\n      t2 = ((invSBOX[s2 >>> 24] << 24) ^ (invSBOX[(s3 >> 16) & 0xff] << 16) ^ (invSBOX[(s0 >> 8) & 0xff] << 8) ^ invSBOX[s1 & 0xff]) ^ invKeySchedule[ksRow + 2];\n      t3 = ((invSBOX[s3 >>> 24] << 24) ^ (invSBOX[(s0 >> 16) & 0xff] << 16) ^ (invSBOX[(s1 >> 8) & 0xff] << 8) ^ invSBOX[s2 & 0xff]) ^ invKeySchedule[ksRow + 3];\n      ksRow = ksRow + 3;\n\n      // Write\n      outputInt32[offset] = swapWord(t0 ^ initVector0);\n      outputInt32[offset + 1] = swapWord(t3 ^ initVector1);\n      outputInt32[offset + 2] = swapWord(t2 ^ initVector2);\n      outputInt32[offset + 3] = swapWord(t1 ^ initVector3);\n\n      // reset initVector to last 4 unsigned int\n      initVector0 = inputWords0;\n      initVector1 = inputWords1;\n      initVector2 = inputWords2;\n      initVector3 = inputWords3;\n\n      offset = offset + 4;\n    }\n\n    return removePKCS7Padding ? removePadding(outputInt32.buffer) : outputInt32.buffer;\n  }\n\n  destroy () {\n    this.key = undefined;\n    this.keySize = undefined;\n    this.ksRows = undefined;\n\n    this.sBox = undefined;\n    this.invSBox = undefined;\n    this.subMix = undefined;\n    this.invSubMix = undefined;\n    this.keySchedule = undefined;\n    this.invKeySchedule = undefined;\n\n    this.rcon = undefined;\n  }\n}\n\nexport default AESDecryptor;\n","import AESCrypto from './aes-crypto';\nimport FastAESKey from './fast-aes-key';\nimport AESDecryptor from './aes-decryptor';\n\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport { logger } from '../utils/logger';\n\nimport Event from '../events';\n\nimport { getSelfScope } from '../utils/get-self-scope';\n\n// see https://stackoverflow.com/a/11237259/589493\nconst global = getSelfScope(); // safeguard for code that might run both on worker and main thread\n\nclass Decrypter {\n  constructor (observer, config, { removePKCS7Padding = true } = {}) {\n    this.logEnabled = true;\n    this.observer = observer;\n    this.config = config;\n    this.removePKCS7Padding = removePKCS7Padding;\n    // built in decryptor expects PKCS7 padding\n    if (removePKCS7Padding) {\n      try {\n        const browserCrypto = global.crypto;\n        if (browserCrypto) {\n          this.subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;\n        }\n      } catch (e) {}\n    }\n    this.disableWebCrypto = !this.subtle;\n  }\n\n  isSync () {\n    return (this.disableWebCrypto && this.config.enableSoftwareAES);\n  }\n\n  decrypt (data, key, iv, callback) {\n    if (this.disableWebCrypto && this.config.enableSoftwareAES) {\n      if (this.logEnabled) {\n        logger.log('JS AES decrypt');\n        this.logEnabled = false;\n      }\n      let decryptor = this.decryptor;\n      if (!decryptor) {\n        this.decryptor = decryptor = new AESDecryptor();\n      }\n\n      decryptor.expandKey(key);\n      callback(decryptor.decrypt(data, 0, iv, this.removePKCS7Padding));\n    } else {\n      if (this.logEnabled) {\n        logger.log('WebCrypto AES decrypt');\n        this.logEnabled = false;\n      }\n      const subtle = this.subtle;\n      if (this.key !== key) {\n        this.key = key;\n        this.fastAesKey = new FastAESKey(subtle, key);\n      }\n\n      this.fastAesKey.expandKey()\n        .then((aesKey) => {\n          // decrypt using web crypto\n          let crypto = new AESCrypto(subtle, iv);\n          crypto.decrypt(data, aesKey)\n            .catch((err) => {\n              this.onWebCryptoError(err, data, key, iv, callback);\n            })\n            .then((result) => {\n              callback(result);\n            });\n        })\n        .catch((err) => {\n          this.onWebCryptoError(err, data, key, iv, callback);\n        });\n    }\n  }\n\n  onWebCryptoError (err, data, key, iv, callback) {\n    if (this.config.enableSoftwareAES) {\n      logger.log('WebCrypto Error, disable WebCrypto API');\n      this.disableWebCrypto = true;\n      this.logEnabled = true;\n      this.decrypt(data, key, iv, callback);\n    } else {\n      logger.error(`decrypting error : ${err.message}`);\n      this.observer.trigger(Event.ERROR, { type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.FRAG_DECRYPT_ERROR, fatal: true, reason: err.message });\n    }\n  }\n\n  destroy () {\n    let decryptor = this.decryptor;\n    if (decryptor) {\n      decryptor.destroy();\n      this.decryptor = undefined;\n    }\n  }\n}\n\nexport default Decrypter;\n","/**\n * ADTS parser helper\n * @link https://wiki.multimedia.cx/index.php?title=ADTS\n */\nimport { logger } from '../utils/logger';\nimport { ErrorTypes, ErrorDetails } from '../errors';\n\nimport Event from '../events';\n\nimport { getSelfScope } from '../utils/get-self-scope';\n\nexport function getAudioConfig (observer, data, offset, audioCodec) {\n  let adtsObjectType, // :int\n    adtsSampleingIndex, // :int\n    adtsExtensionSampleingIndex, // :int\n    adtsChanelConfig, // :int\n    config,\n    userAgent = navigator.userAgent.toLowerCase(),\n    manifestCodec = audioCodec,\n    adtsSampleingRates = [\n      96000, 88200,\n      64000, 48000,\n      44100, 32000,\n      24000, 22050,\n      16000, 12000,\n      11025, 8000,\n      7350];\n  // byte 2\n  adtsObjectType = ((data[offset + 2] & 0xC0) >>> 6) + 1;\n  adtsSampleingIndex = ((data[offset + 2] & 0x3C) >>> 2);\n  if (adtsSampleingIndex > adtsSampleingRates.length - 1) {\n    observer.trigger(Event.ERROR, { type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.FRAG_PARSING_ERROR, fatal: true, reason: `invalid ADTS sampling index:${adtsSampleingIndex}` });\n    return;\n  }\n  adtsChanelConfig = ((data[offset + 2] & 0x01) << 2);\n  // byte 3\n  adtsChanelConfig |= ((data[offset + 3] & 0xC0) >>> 6);\n  logger.log(`manifest codec:${audioCodec},ADTS data:type:${adtsObjectType},sampleingIndex:${adtsSampleingIndex}[${adtsSampleingRates[adtsSampleingIndex]}Hz],channelConfig:${adtsChanelConfig}`);\n  // firefox: freq less than 24kHz = AAC SBR (HE-AAC)\n  if (/firefox/i.test(userAgent)) {\n    if (adtsSampleingIndex >= 6) {\n      adtsObjectType = 5;\n      config = new Array(4);\n      // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n      // there is a factor 2 between frame sample rate and output sample rate\n      // multiply frequency by 2 (see table below, equivalent to substract 3)\n      adtsExtensionSampleingIndex = adtsSampleingIndex - 3;\n    } else {\n      adtsObjectType = 2;\n      config = new Array(2);\n      adtsExtensionSampleingIndex = adtsSampleingIndex;\n    }\n    // Android : always use AAC\n  } else if (userAgent.indexOf('android') !== -1) {\n    adtsObjectType = 2;\n    config = new Array(2);\n    adtsExtensionSampleingIndex = adtsSampleingIndex;\n  } else {\n    /*  for other browsers (Chrome/Vivaldi/Opera ...)\n        always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)\n    */\n    adtsObjectType = 5;\n    config = new Array(4);\n    // if (manifest codec is HE-AAC or HE-AACv2) OR (manifest codec not specified AND frequency less than 24kHz)\n    if ((audioCodec && ((audioCodec.indexOf('mp4a.40.29') !== -1) ||\n      (audioCodec.indexOf('mp4a.40.5') !== -1))) ||\n      (!audioCodec && adtsSampleingIndex >= 6)) {\n      // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n      // there is a factor 2 between frame sample rate and output sample rate\n      // multiply frequency by 2 (see table below, equivalent to substract 3)\n      adtsExtensionSampleingIndex = adtsSampleingIndex - 3;\n    } else {\n      // if (manifest codec is AAC) AND (frequency less than 24kHz AND nb channel is 1) OR (manifest codec not specified and mono audio)\n      // Chrome fails to play back with low frequency AAC LC mono when initialized with HE-AAC.  This is not a problem with stereo.\n      if (audioCodec && audioCodec.indexOf('mp4a.40.2') !== -1 && ((adtsSampleingIndex >= 6 && adtsChanelConfig === 1) ||\n            /vivaldi/i.test(userAgent)) ||\n        (!audioCodec && adtsChanelConfig === 1)) {\n        adtsObjectType = 2;\n        config = new Array(2);\n      }\n      adtsExtensionSampleingIndex = adtsSampleingIndex;\n    }\n  }\n  /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config\n      ISO 14496-3 (AAC).pdf - Table 1.13 — Syntax of AudioSpecificConfig()\n    Audio Profile / Audio Object Type\n    0: Null\n    1: AAC Main\n    2: AAC LC (Low Complexity)\n    3: AAC SSR (Scalable Sample Rate)\n    4: AAC LTP (Long Term Prediction)\n    5: SBR (Spectral Band Replication)\n    6: AAC Scalable\n   sampling freq\n    0: 96000 Hz\n    1: 88200 Hz\n    2: 64000 Hz\n    3: 48000 Hz\n    4: 44100 Hz\n    5: 32000 Hz\n    6: 24000 Hz\n    7: 22050 Hz\n    8: 16000 Hz\n    9: 12000 Hz\n    10: 11025 Hz\n    11: 8000 Hz\n    12: 7350 Hz\n    13: Reserved\n    14: Reserved\n    15: frequency is written explictly\n    Channel Configurations\n    These are the channel configurations:\n    0: Defined in AOT Specifc Config\n    1: 1 channel: front-center\n    2: 2 channels: front-left, front-right\n  */\n  // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1\n  config[0] = adtsObjectType << 3;\n  // samplingFrequencyIndex\n  config[0] |= (adtsSampleingIndex & 0x0E) >> 1;\n  config[1] |= (adtsSampleingIndex & 0x01) << 7;\n  // channelConfiguration\n  config[1] |= adtsChanelConfig << 3;\n  if (adtsObjectType === 5) {\n    // adtsExtensionSampleingIndex\n    config[1] |= (adtsExtensionSampleingIndex & 0x0E) >> 1;\n    config[2] = (adtsExtensionSampleingIndex & 0x01) << 7;\n    // adtsObjectType (force to 2, chrome is checking that object type is less than 5 ???\n    //    https://chromium.googlesource.com/chromium/src.git/+/master/media/formats/mp4/aac.cc\n    config[2] |= 2 << 2;\n    config[3] = 0;\n  }\n  return { config: config, samplerate: adtsSampleingRates[adtsSampleingIndex], channelCount: adtsChanelConfig, codec: ('mp4a.40.' + adtsObjectType), manifestCodec: manifestCodec };\n}\n\nexport function isHeaderPattern (data, offset) {\n  return data[offset] === 0xff && (data[offset + 1] & 0xf6) === 0xf0;\n}\n\nexport function getHeaderLength (data, offset) {\n  return (data[offset + 1] & 0x01 ? 7 : 9);\n}\n\nexport function getFullFrameLength (data, offset) {\n  return ((data[offset + 3] & 0x03) << 11) |\n    (data[offset + 4] << 3) |\n    ((data[offset + 5] & 0xE0) >>> 5);\n}\n\nexport function isHeader (data, offset) {\n  // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n  // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n  // More info https://wiki.multimedia.cx/index.php?title=ADTS\n  if (offset + 1 < data.length && isHeaderPattern(data, offset)) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function probe (data, offset) {\n  // same as isHeader but we also check that ADTS frame follows last ADTS frame\n  // or end of data is reached\n  if (isHeader(data, offset)) {\n    // ADTS header Length\n    let headerLength = getHeaderLength(data, offset);\n    // ADTS frame Length\n    let frameLength = headerLength;\n    if (offset + 5 < data.length) {\n      frameLength = getFullFrameLength(data, offset);\n    }\n\n    let newOffset = offset + frameLength;\n    if (newOffset === data.length || (newOffset + 1 < data.length && isHeaderPattern(data, newOffset))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function initTrackConfig (track, observer, data, offset, audioCodec) {\n  if (!track.samplerate) {\n    let config = getAudioConfig(observer, data, offset, audioCodec);\n    track.config = config.config;\n    track.samplerate = config.samplerate;\n    track.channelCount = config.channelCount;\n    track.codec = config.codec;\n    track.manifestCodec = config.manifestCodec;\n    logger.log(`parsed codec:${track.codec},rate:${config.samplerate},nb channel:${config.channelCount}`);\n  }\n}\n\nexport function getFrameDuration (samplerate) {\n  return 1024 * 90000 / samplerate;\n}\n\nexport function parseFrameHeader (data, offset, pts, frameIndex, frameDuration) {\n  let headerLength, frameLength, stamp;\n  let length = data.length;\n\n  // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header\n  headerLength = getHeaderLength(data, offset);\n  // retrieve frame size\n  frameLength = getFullFrameLength(data, offset);\n  frameLength -= headerLength;\n\n  if ((frameLength > 0) && ((offset + headerLength + frameLength) <= length)) {\n    stamp = pts + frameIndex * frameDuration;\n    // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);\n    return { headerLength, frameLength, stamp };\n  }\n\n  return undefined;\n}\n\nexport function appendFrame (track, data, offset, pts, frameIndex) {\n  let frameDuration = getFrameDuration(track.samplerate);\n  let header = parseFrameHeader(data, offset, pts, frameIndex, frameDuration);\n  if (header) {\n    let stamp = header.stamp;\n    let headerLength = header.headerLength;\n    let frameLength = header.frameLength;\n\n    // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);\n    let aacSample = {\n      unit: data.subarray(offset + headerLength, offset + headerLength + frameLength),\n      pts: stamp,\n      dts: stamp\n    };\n\n    track.samples.push(aacSample);\n    return { sample: aacSample, length: frameLength + headerLength };\n  }\n\n  return undefined;\n}\n","/**\n *\n * inline demuxer: probe fragments and instantiate\n * appropriate demuxer depending on content type (TSDemuxer, AACDemuxer, ...)\n *\n */\n\nimport Event from '../events';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport Decrypter from '../crypt/decrypter';\nimport AACDemuxer from '../demux/aacdemuxer';\nimport MP4Demuxer from '../demux/mp4demuxer';\nimport TSDemuxer from '../demux/tsdemuxer';\nimport MP3Demuxer from '../demux/mp3demuxer';\nimport MP4Remuxer from '../remux/mp4-remuxer';\nimport PassThroughRemuxer from '../remux/passthrough-remuxer';\n\nimport { getSelfScope } from '../utils/get-self-scope';\nimport { logger } from '../utils/logger';\n\n// see https://stackoverflow.com/a/11237259/589493\nconst global = getSelfScope(); // safeguard for code that might run both on worker and main thread\n\nlet now;\n// performance.now() not available on WebWorker, at least on Safari Desktop\ntry {\n  now = global.performance.now.bind(global.performance);\n} catch (err) {\n  logger.debug('Unable to use Performance API on this environment');\n  now = global.Date.now;\n}\n\nclass DemuxerInline {\n  constructor (observer, typeSupported, config, vendor) {\n    this.observer = observer;\n    this.typeSupported = typeSupported;\n    this.config = config;\n    this.vendor = vendor;\n  }\n\n  destroy () {\n    let demuxer = this.demuxer;\n    if (demuxer) {\n      demuxer.destroy();\n    }\n  }\n\n  push (data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS) {\n    if ((data.byteLength > 0) && (decryptdata != null) && (decryptdata.key != null) && (decryptdata.method === 'AES-128')) {\n      let decrypter = this.decrypter;\n      if (decrypter == null) {\n        decrypter = this.decrypter = new Decrypter(this.observer, this.config);\n      }\n\n      const startTime = now();\n      decrypter.decrypt(data, decryptdata.key.buffer, decryptdata.iv.buffer, (decryptedData) => {\n        const endTime = now();\n        this.observer.trigger(Event.FRAG_DECRYPTED, { stats: { tstart: startTime, tdecrypt: endTime } });\n        this.pushDecrypted(new Uint8Array(decryptedData), decryptdata, new Uint8Array(initSegment), audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);\n      });\n    } else {\n      this.pushDecrypted(new Uint8Array(data), decryptdata, new Uint8Array(initSegment), audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);\n    }\n  }\n\n  pushDecrypted (data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS) {\n    let demuxer = this.demuxer;\n    if (!demuxer ||\n      // in case of continuity change, or track switch\n      // we might switch from content type (AAC container to TS container, or TS to fmp4 for example)\n      // so let's check that current demuxer is still valid\n      ((discontinuity || trackSwitch) && !this.probe(data))) {\n      const observer = this.observer;\n      const typeSupported = this.typeSupported;\n      const config = this.config;\n      // probing order is TS/MP4/AAC/MP3\n      const muxConfig = [\n        { demux: TSDemuxer, remux: MP4Remuxer },\n        { demux: MP4Demuxer, remux: PassThroughRemuxer },\n        { demux: AACDemuxer, remux: MP4Remuxer },\n        { demux: MP3Demuxer, remux: MP4Remuxer }\n      ];\n\n      // probe for content type\n      for (let i = 0, len = muxConfig.length; i < len; i++) {\n        const mux = muxConfig[i];\n        const probe = mux.demux.probe;\n        if (probe(data)) {\n          const remuxer = this.remuxer = new mux.remux(observer, config, typeSupported, this.vendor);\n          demuxer = new mux.demux(observer, remuxer, config, typeSupported);\n          this.probe = probe;\n          break;\n        }\n      }\n      if (!demuxer) {\n        observer.trigger(Event.ERROR, { type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.FRAG_PARSING_ERROR, fatal: true, reason: 'no demux matching with content found' });\n        return;\n      }\n      this.demuxer = demuxer;\n    }\n    const remuxer = this.remuxer;\n\n    if (discontinuity || trackSwitch) {\n      demuxer.resetInitSegment(initSegment, audioCodec, videoCodec, duration);\n      remuxer.resetInitSegment();\n    }\n    if (discontinuity) {\n      demuxer.resetTimeStamp(defaultInitPTS);\n      remuxer.resetTimeStamp(defaultInitPTS);\n    }\n    if (typeof demuxer.setDecryptData === 'function') {\n      demuxer.setDecryptData(decryptdata);\n    }\n\n    demuxer.append(data, timeOffset, contiguous, accurateTimeOffset);\n  }\n}\n\nexport default DemuxerInline;\n","/**\n * AAC demuxer\n */\nimport * as ADTS from './adts';\nimport { logger } from '../utils/logger';\nimport ID3 from '../demux/id3';\n\nclass AACDemuxer {\n  constructor (observer, remuxer, config) {\n    this.observer = observer;\n    this.config = config;\n    this.remuxer = remuxer;\n  }\n\n  resetInitSegment (initSegment, audioCodec, videoCodec, duration) {\n    this._audioTrack = { container: 'audio/adts', type: 'audio', id: 0, sequenceNumber: 0, isAAC: true, samples: [], len: 0, manifestCodec: audioCodec, duration: duration, inputTimeScale: 90000 };\n  }\n\n  resetTimeStamp () {\n  }\n\n  static probe (data) {\n    if (!data) {\n      return false;\n    }\n\n    // Check for the ADTS sync word\n    // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n    // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n    // More info https://wiki.multimedia.cx/index.php?title=ADTS\n    const id3Data = ID3.getID3Data(data, 0) || [];\n    let offset = id3Data.length;\n\n    for (let length = data.length; offset < length; offset++) {\n      if (ADTS.probe(data, offset)) {\n        logger.log('ADTS sync word found !');\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // feed incoming data to the front of the parsing pipeline\n  append (data, timeOffset, contiguous, accurateTimeOffset) {\n    let track = this._audioTrack;\n    let id3Data = ID3.getID3Data(data, 0) || [];\n    let timestamp = ID3.getTimeStamp(id3Data);\n    let pts = Number.isFinite(timestamp) ? timestamp * 90 : timeOffset * 90000;\n    let frameIndex = 0;\n    let stamp = pts;\n    let length = data.length;\n    let offset = id3Data.length;\n\n    let id3Samples = [{ pts: stamp, dts: stamp, data: id3Data }];\n\n    while (offset < length - 1) {\n      if (ADTS.isHeader(data, offset) && (offset + 5) < length) {\n        ADTS.initTrackConfig(track, this.observer, data, offset, track.manifestCodec);\n        let frame = ADTS.appendFrame(track, data, offset, pts, frameIndex);\n        if (frame) {\n          offset += frame.length;\n          stamp = frame.sample.pts;\n          frameIndex++;\n        } else {\n          logger.log('Unable to parse AAC frame');\n          break;\n        }\n      } else if (ID3.isHeader(data, offset)) {\n        id3Data = ID3.getID3Data(data, offset);\n        id3Samples.push({ pts: stamp, dts: stamp, data: id3Data });\n        offset += id3Data.length;\n      } else {\n        // nothing found, keep looking\n        offset++;\n      }\n    }\n\n    this.remuxer.remux(track,\n      { samples: [] },\n      { samples: id3Samples, inputTimeScale: 90000 },\n      { samples: [] },\n      timeOffset,\n      contiguous,\n      accurateTimeOffset);\n  }\n\n  destroy () {\n  }\n}\n\nexport default AACDemuxer;\n","/**\n *  MPEG parser helper\n */\n\nconst MpegAudio = {\n\n  BitratesMap: [\n    32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448,\n    32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384,\n    32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320,\n    32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256,\n    8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160],\n\n  SamplingRateMap: [44100, 48000, 32000, 22050, 24000, 16000, 11025, 12000, 8000],\n\n  SamplesCoefficients: [\n    // MPEG 2.5\n    [\n      0, // Reserved\n      72, // Layer3\n      144, // Layer2\n      12 // Layer1\n    ],\n    // Reserved\n    [\n      0, // Reserved\n      0, // Layer3\n      0, // Layer2\n      0 // Layer1\n    ],\n    // MPEG 2\n    [\n      0, // Reserved\n      72, // Layer3\n      144, // Layer2\n      12 // Layer1\n    ],\n    // MPEG 1\n    [\n      0, // Reserved\n      144, // Layer3\n      144, // Layer2\n      12 // Layer1\n    ]\n  ],\n\n  BytesInSlot: [\n    0, // Reserved\n    1, // Layer3\n    1, // Layer2\n    4 // Layer1\n  ],\n\n  appendFrame: function (track, data, offset, pts, frameIndex) {\n    // Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference\n    if (offset + 24 > data.length) {\n      return undefined;\n    }\n\n    let header = this.parseHeader(data, offset);\n    if (header && offset + header.frameLength <= data.length) {\n      let frameDuration = header.samplesPerFrame * 90000 / header.sampleRate;\n      let stamp = pts + frameIndex * frameDuration;\n      let sample = { unit: data.subarray(offset, offset + header.frameLength), pts: stamp, dts: stamp };\n\n      track.config = [];\n      track.channelCount = header.channelCount;\n      track.samplerate = header.sampleRate;\n      track.samples.push(sample);\n\n      return { sample, length: header.frameLength };\n    }\n\n    return undefined;\n  },\n\n  parseHeader: function (data, offset) {\n    let headerB = (data[offset + 1] >> 3) & 3;\n    let headerC = (data[offset + 1] >> 1) & 3;\n    let headerE = (data[offset + 2] >> 4) & 15;\n    let headerF = (data[offset + 2] >> 2) & 3;\n    let headerG = (data[offset + 2] >> 1) & 1;\n    if (headerB !== 1 && headerE !== 0 && headerE !== 15 && headerF !== 3) {\n      let columnInBitrates = headerB === 3 ? (3 - headerC) : (headerC === 3 ? 3 : 4);\n      let bitRate = MpegAudio.BitratesMap[columnInBitrates * 14 + headerE - 1] * 1000;\n      let columnInSampleRates = headerB === 3 ? 0 : headerB === 2 ? 1 : 2;\n      let sampleRate = MpegAudio.SamplingRateMap[columnInSampleRates * 3 + headerF];\n      let channelCount = data[offset + 3] >> 6 === 3 ? 1 : 2; // If bits of channel mode are `11` then it is a single channel (Mono)\n      let sampleCoefficient = MpegAudio.SamplesCoefficients[headerB][headerC];\n      let bytesInSlot = MpegAudio.BytesInSlot[headerC];\n      let samplesPerFrame = sampleCoefficient * 8 * bytesInSlot;\n      let frameLength = parseInt(sampleCoefficient * bitRate / sampleRate + headerG, 10) * bytesInSlot;\n\n      return { sampleRate, channelCount, frameLength, samplesPerFrame };\n    }\n\n    return undefined;\n  },\n\n  isHeaderPattern: function (data, offset) {\n    return data[offset] === 0xff && (data[offset + 1] & 0xe0) === 0xe0 && (data[offset + 1] & 0x06) !== 0x00;\n  },\n\n  isHeader: function (data, offset) {\n    // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n    // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n    // More info http://www.mp3-tech.org/programmer/frame_header.html\n    if (offset + 1 < data.length && this.isHeaderPattern(data, offset)) {\n      return true;\n    }\n\n    return false;\n  },\n\n  probe: function (data, offset) {\n    // same as isHeader but we also check that MPEG frame follows last MPEG frame\n    // or end of data is reached\n    if (offset + 1 < data.length && this.isHeaderPattern(data, offset)) {\n      // MPEG header Length\n      let headerLength = 4;\n      // MPEG frame Length\n      let header = this.parseHeader(data, offset);\n      let frameLength = headerLength;\n      if (header && header.frameLength) {\n        frameLength = header.frameLength;\n      }\n\n      let newOffset = offset + frameLength;\n      if (newOffset === data.length || (newOffset + 1 < data.length && this.isHeaderPattern(data, newOffset))) {\n        return true;\n      }\n    }\n    return false;\n  }\n};\n\nexport default MpegAudio;\n","/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.\n*/\n\nimport { logger } from '../utils/logger';\n\nclass ExpGolomb {\n  constructor (data) {\n    this.data = data;\n    // the number of bytes left to examine in this.data\n    this.bytesAvailable = data.byteLength;\n    // the current word being examined\n    this.word = 0; // :uint\n    // the number of bits left to examine in the current word\n    this.bitsAvailable = 0; // :uint\n  }\n\n  // ():void\n  loadWord () {\n    let\n      data = this.data,\n      bytesAvailable = this.bytesAvailable,\n      position = data.byteLength - bytesAvailable,\n      workingBytes = new Uint8Array(4),\n      availableBytes = Math.min(4, bytesAvailable);\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(data.subarray(position, position + availableBytes));\n    this.word = new DataView(workingBytes.buffer).getUint32(0);\n    // track the amount of this.data that has been processed\n    this.bitsAvailable = availableBytes * 8;\n    this.bytesAvailable -= availableBytes;\n  }\n\n  // (count:int):void\n  skipBits (count) {\n    let skipBytes; // :int\n    if (this.bitsAvailable > count) {\n      this.word <<= count;\n      this.bitsAvailable -= count;\n    } else {\n      count -= this.bitsAvailable;\n      skipBytes = count >> 3;\n      count -= (skipBytes >> 3);\n      this.bytesAvailable -= skipBytes;\n      this.loadWord();\n      this.word <<= count;\n      this.bitsAvailable -= count;\n    }\n  }\n\n  // (size:int):uint\n  readBits (size) {\n    let\n      bits = Math.min(this.bitsAvailable, size), // :uint\n      valu = this.word >>> (32 - bits); // :uint\n    if (size > 32) {\n      logger.error('Cannot read more than 32 bits at a time');\n    }\n\n    this.bitsAvailable -= bits;\n    if (this.bitsAvailable > 0) {\n      this.word <<= bits;\n    } else if (this.bytesAvailable > 0) {\n      this.loadWord();\n    }\n\n    bits = size - bits;\n    if (bits > 0 && this.bitsAvailable) {\n      return valu << bits | this.readBits(bits);\n    } else {\n      return valu;\n    }\n  }\n\n  // ():uint\n  skipLZ () {\n    let leadingZeroCount; // :uint\n    for (leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {\n      if ((this.word & (0x80000000 >>> leadingZeroCount)) !== 0) {\n        // the first bit of working word is 1\n        this.word <<= leadingZeroCount;\n        this.bitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    }\n    // we exhausted word and still have not found a 1\n    this.loadWord();\n    return leadingZeroCount + this.skipLZ();\n  }\n\n  // ():void\n  skipUEG () {\n    this.skipBits(1 + this.skipLZ());\n  }\n\n  // ():void\n  skipEG () {\n    this.skipBits(1 + this.skipLZ());\n  }\n\n  // ():uint\n  readUEG () {\n    let clz = this.skipLZ(); // :uint\n    return this.readBits(clz + 1) - 1;\n  }\n\n  // ():int\n  readEG () {\n    let valu = this.readUEG(); // :int\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n    } else {\n      return -1 * (valu >>> 1); // divide by two then make it negative\n    }\n  }\n\n  // Some convenience functions\n  // :Boolean\n  readBoolean () {\n    return this.readBits(1) === 1;\n  }\n\n  // ():int\n  readUByte () {\n    return this.readBits(8);\n  }\n\n  // ():int\n  readUShort () {\n    return this.readBits(16);\n  }\n  // ():int\n  readUInt () {\n    return this.readBits(32);\n  }\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList (count) {\n    let\n      lastScale = 8,\n      nextScale = 8,\n      j,\n      deltaScale;\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = this.readEG();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n      lastScale = (nextScale === 0) ? lastScale : nextScale;\n    }\n  }\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSPS () {\n    let\n      frameCropLeftOffset = 0,\n      frameCropRightOffset = 0,\n      frameCropTopOffset = 0,\n      frameCropBottomOffset = 0,\n      profileIdc, profileCompat, levelIdc,\n      numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1,\n      picHeightInMapUnitsMinus1,\n      frameMbsOnlyFlag,\n      scalingListCount,\n      i,\n      readUByte = this.readUByte.bind(this),\n      readBits = this.readBits.bind(this),\n      readUEG = this.readUEG.bind(this),\n      readBoolean = this.readBoolean.bind(this),\n      skipBits = this.skipBits.bind(this),\n      skipEG = this.skipEG.bind(this),\n      skipUEG = this.skipUEG.bind(this),\n      skipScalingList = this.skipScalingList.bind(this);\n\n    readUByte();\n    profileIdc = readUByte(); // profile_idc\n    profileCompat = readBits(5); // constraint_set[0-4]_flag, u(5)\n    skipBits(3); // reserved_zero_3bits u(3),\n    levelIdc = readUByte(); // level_idc u(8)\n    skipUEG(); // seq_parameter_set_id\n    // some profiles have more optional data we don't need\n    if (profileIdc === 100 ||\n        profileIdc === 110 ||\n        profileIdc === 122 ||\n        profileIdc === 244 ||\n        profileIdc === 44 ||\n        profileIdc === 83 ||\n        profileIdc === 86 ||\n        profileIdc === 118 ||\n        profileIdc === 128) {\n      let chromaFormatIdc = readUEG();\n      if (chromaFormatIdc === 3) {\n        skipBits(1);\n      } // separate_colour_plane_flag\n\n      skipUEG(); // bit_depth_luma_minus8\n      skipUEG(); // bit_depth_chroma_minus8\n      skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (readBoolean()) { // seq_scaling_matrix_present_flag\n        scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (readBoolean()) { // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16);\n            } else {\n              skipScalingList(64);\n            }\n          }\n        }\n      }\n    }\n    skipUEG(); // log2_max_frame_num_minus4\n    let picOrderCntType = readUEG();\n    if (picOrderCntType === 0) {\n      readUEG(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      skipBits(1); // delta_pic_order_always_zero_flag\n      skipEG(); // offset_for_non_ref_pic\n      skipEG(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = readUEG();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        skipEG();\n      } // offset_for_ref_frame[ i ]\n    }\n    skipUEG(); // max_num_ref_frames\n    skipBits(1); // gaps_in_frame_num_value_allowed_flag\n    picWidthInMbsMinus1 = readUEG();\n    picHeightInMapUnitsMinus1 = readUEG();\n    frameMbsOnlyFlag = readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      skipBits(1);\n    } // mb_adaptive_frame_field_flag\n\n    skipBits(1); // direct_8x8_inference_flag\n    if (readBoolean()) { // frame_cropping_flag\n      frameCropLeftOffset = readUEG();\n      frameCropRightOffset = readUEG();\n      frameCropTopOffset = readUEG();\n      frameCropBottomOffset = readUEG();\n    }\n    let pixelRatio = [1, 1];\n    if (readBoolean()) {\n      // vui_parameters_present_flag\n      if (readBoolean()) {\n        // aspect_ratio_info_present_flag\n        const aspectRatioIdc = readUByte();\n        switch (aspectRatioIdc) {\n        case 1: pixelRatio = [1, 1]; break;\n        case 2: pixelRatio = [12, 11]; break;\n        case 3: pixelRatio = [10, 11]; break;\n        case 4: pixelRatio = [16, 11]; break;\n        case 5: pixelRatio = [40, 33]; break;\n        case 6: pixelRatio = [24, 11]; break;\n        case 7: pixelRatio = [20, 11]; break;\n        case 8: pixelRatio = [32, 11]; break;\n        case 9: pixelRatio = [80, 33]; break;\n        case 10: pixelRatio = [18, 11]; break;\n        case 11: pixelRatio = [15, 11]; break;\n        case 12: pixelRatio = [64, 33]; break;\n        case 13: pixelRatio = [160, 99]; break;\n        case 14: pixelRatio = [4, 3]; break;\n        case 15: pixelRatio = [3, 2]; break;\n        case 16: pixelRatio = [2, 1]; break;\n        case 255: {\n          pixelRatio = [readUByte() << 8 | readUByte(), readUByte() << 8 | readUByte()];\n          break;\n        }\n        }\n      }\n    }\n    return {\n      width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2)),\n      height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - ((frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset)),\n      pixelRatio: pixelRatio\n    };\n  }\n\n  readSliceType () {\n    // skip NALu type\n    this.readUByte();\n    // discard first_mb_in_slice\n    this.readUEG();\n    // return slice_type\n    return this.readUEG();\n  }\n}\n\nexport default ExpGolomb;\n","/**\n * SAMPLE-AES decrypter\n*/\n\nimport Decrypter from '../crypt/decrypter';\n\nclass SampleAesDecrypter {\n  constructor (observer, config, decryptdata, discardEPB) {\n    this.decryptdata = decryptdata;\n    this.discardEPB = discardEPB;\n    this.decrypter = new Decrypter(observer, config, { removePKCS7Padding: false });\n  }\n\n  decryptBuffer (encryptedData, callback) {\n    this.decrypter.decrypt(encryptedData, this.decryptdata.key.buffer, this.decryptdata.iv.buffer, callback);\n  }\n\n  // AAC - encrypt all full 16 bytes blocks starting from offset 16\n  decryptAacSample (samples, sampleIndex, callback, sync) {\n    let curUnit = samples[sampleIndex].unit;\n    let encryptedData = curUnit.subarray(16, curUnit.length - curUnit.length % 16);\n    let encryptedBuffer = encryptedData.buffer.slice(\n      encryptedData.byteOffset,\n      encryptedData.byteOffset + encryptedData.length);\n\n    let localthis = this;\n    this.decryptBuffer(encryptedBuffer, function (decryptedData) {\n      decryptedData = new Uint8Array(decryptedData);\n      curUnit.set(decryptedData, 16);\n\n      if (!sync) {\n        localthis.decryptAacSamples(samples, sampleIndex + 1, callback);\n      }\n    });\n  }\n\n  decryptAacSamples (samples, sampleIndex, callback) {\n    for (;; sampleIndex++) {\n      if (sampleIndex >= samples.length) {\n        callback();\n        return;\n      }\n\n      if (samples[sampleIndex].unit.length < 32) {\n        continue;\n      }\n\n      let sync = this.decrypter.isSync();\n\n      this.decryptAacSample(samples, sampleIndex, callback, sync);\n\n      if (!sync) {\n        return;\n      }\n    }\n  }\n\n  // AVC - encrypt one 16 bytes block out of ten, starting from offset 32\n  getAvcEncryptedData (decodedData) {\n    let encryptedDataLen = Math.floor((decodedData.length - 48) / 160) * 16 + 16;\n    let encryptedData = new Int8Array(encryptedDataLen);\n    let outputPos = 0;\n    for (let inputPos = 32; inputPos <= decodedData.length - 16; inputPos += 160, outputPos += 16) {\n      encryptedData.set(decodedData.subarray(inputPos, inputPos + 16), outputPos);\n    }\n\n    return encryptedData;\n  }\n\n  getAvcDecryptedUnit (decodedData, decryptedData) {\n    decryptedData = new Uint8Array(decryptedData);\n    let inputPos = 0;\n    for (let outputPos = 32; outputPos <= decodedData.length - 16; outputPos += 160, inputPos += 16) {\n      decodedData.set(decryptedData.subarray(inputPos, inputPos + 16), outputPos);\n    }\n\n    return decodedData;\n  }\n\n  decryptAvcSample (samples, sampleIndex, unitIndex, callback, curUnit, sync) {\n    let decodedData = this.discardEPB(curUnit.data);\n    let encryptedData = this.getAvcEncryptedData(decodedData);\n    let localthis = this;\n\n    this.decryptBuffer(encryptedData.buffer, function (decryptedData) {\n      curUnit.data = localthis.getAvcDecryptedUnit(decodedData, decryptedData);\n\n      if (!sync) {\n        localthis.decryptAvcSamples(samples, sampleIndex, unitIndex + 1, callback);\n      }\n    });\n  }\n\n  decryptAvcSamples (samples, sampleIndex, unitIndex, callback) {\n    for (;; sampleIndex++, unitIndex = 0) {\n      if (sampleIndex >= samples.length) {\n        callback();\n        return;\n      }\n\n      let curUnits = samples[sampleIndex].units;\n      for (;; unitIndex++) {\n        if (unitIndex >= curUnits.length) {\n          break;\n        }\n\n        let curUnit = curUnits[unitIndex];\n        if (curUnit.length <= 48 || (curUnit.type !== 1 && curUnit.type !== 5)) {\n          continue;\n        }\n\n        let sync = this.decrypter.isSync();\n\n        this.decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync);\n\n        if (!sync) {\n          return;\n        }\n      }\n    }\n  }\n}\n\nexport default SampleAesDecrypter;\n","/**\n * highly optimized TS demuxer:\n * parse PAT, PMT\n * extract PES packet from audio and video PIDs\n * extract AVC/H264 NAL units and AAC/ADTS samples from PES packet\n * trigger the remuxer upon parsing completion\n * it also tries to workaround as best as it can audio codec switch (HE-AAC to AAC and vice versa), without having to restart the MediaSource.\n * it also controls the remuxing process :\n * upon discontinuity or level switch detection, it will also notifies the remuxer so that it can reset its state.\n*/\n\nimport * as ADTS from './adts';\nimport MpegAudio from './mpegaudio';\nimport Event from '../events';\nimport ExpGolomb from './exp-golomb';\nimport SampleAesDecrypter from './sample-aes';\n// import Hex from '../utils/hex';\nimport { logger } from '../utils/logger';\nimport { ErrorTypes, ErrorDetails } from '../errors';\n\n// We are using fixed track IDs for driving the MP4 remuxer\n// instead of following the TS PIDs.\n// There is no reason not to do this and some browsers/SourceBuffer-demuxers\n// may not like if there are TrackID \"switches\"\n// See https://github.com/video-dev/hls.js/issues/1331\n// Here we are mapping our internal track types to constant MP4 track IDs\n// With MSE currently one can only have one track of each, and we are muxing\n// whatever video/audio rendition in them.\nconst RemuxerTrackIdConfig = {\n  video: 1,\n  audio: 2,\n  id3: 3,\n  text: 4\n};\n\nclass TSDemuxer {\n  constructor (observer, remuxer, config, typeSupported) {\n    this.observer = observer;\n    this.config = config;\n    this.typeSupported = typeSupported;\n    this.remuxer = remuxer;\n    this.sampleAes = null;\n  }\n\n  setDecryptData (decryptdata) {\n    if ((decryptdata != null) && (decryptdata.key != null) && (decryptdata.method === 'SAMPLE-AES')) {\n      this.sampleAes = new SampleAesDecrypter(this.observer, this.config, decryptdata, this.discardEPB);\n    } else {\n      this.sampleAes = null;\n    }\n  }\n\n  static probe (data) {\n    const syncOffset = TSDemuxer._syncOffset(data);\n    if (syncOffset < 0) {\n      return false;\n    } else {\n      if (syncOffset) {\n        logger.warn(`MPEG2-TS detected but first sync word found @ offset ${syncOffset}, junk ahead ?`);\n      }\n\n      return true;\n    }\n  }\n\n  static _syncOffset (data) {\n    // scan 1000 first bytes\n    const scanwindow = Math.min(1000, data.length - 3 * 188);\n    let i = 0;\n    while (i < scanwindow) {\n      // a TS fragment should contain at least 3 TS packets, a PAT, a PMT, and one PID, each starting with 0x47\n      if (data[i] === 0x47 && data[i + 188] === 0x47 && data[i + 2 * 188] === 0x47) {\n        return i;\n      } else {\n        i++;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Creates a track model internal to demuxer used to drive remuxing input\n   *\n   * @param {string} type 'audio' | 'video' | 'id3' | 'text'\n   * @param {number} duration\n   * @return {object} TSDemuxer's internal track model\n   */\n  static createTrack (type, duration) {\n    return {\n      container: type === 'video' || type === 'audio' ? 'video/mp2t' : undefined,\n      type,\n      id: RemuxerTrackIdConfig[type],\n      pid: -1,\n      inputTimeScale: 90000,\n      sequenceNumber: 0,\n      samples: [],\n      dropped: type === 'video' ? 0 : undefined,\n      isAAC: type === 'audio' ? true : undefined,\n      duration: type === 'audio' ? duration : undefined\n    };\n  }\n\n  /**\n   * Initializes a new init segment on the demuxer/remuxer interface. Needed for discontinuities/track-switches (or at stream start)\n   * Resets all internal track instances of the demuxer.\n   *\n   * @override Implements generic demuxing/remuxing interface (see DemuxerInline)\n   * @param {object} initSegment\n   * @param {string} audioCodec\n   * @param {string} videoCodec\n   * @param {number} duration (in TS timescale = 90kHz)\n   */\n  resetInitSegment (initSegment, audioCodec, videoCodec, duration) {\n    this.pmtParsed = false;\n    this._pmtId = -1;\n\n    this._avcTrack = TSDemuxer.createTrack('video', duration);\n    this._audioTrack = TSDemuxer.createTrack('audio', duration);\n    this._id3Track = TSDemuxer.createTrack('id3', duration);\n    this._txtTrack = TSDemuxer.createTrack('text', duration);\n\n    // flush any partial content\n    this.aacOverFlow = null;\n    this.aacLastPTS = null;\n    this.avcSample = null;\n    this.audioCodec = audioCodec;\n    this.videoCodec = videoCodec;\n    this._duration = duration;\n  }\n\n  /**\n   *\n   * @override\n   */\n  resetTimeStamp () {}\n\n  // feed incoming data to the front of the parsing pipeline\n  append (data, timeOffset, contiguous, accurateTimeOffset) {\n    let start, len = data.length, stt, pid, atf, offset, pes,\n      unknownPIDs = false;\n    this.contiguous = contiguous;\n    let pmtParsed = this.pmtParsed,\n      avcTrack = this._avcTrack,\n      audioTrack = this._audioTrack,\n      id3Track = this._id3Track,\n      avcId = avcTrack.pid,\n      audioId = audioTrack.pid,\n      id3Id = id3Track.pid,\n      pmtId = this._pmtId,\n      avcData = avcTrack.pesData,\n      audioData = audioTrack.pesData,\n      id3Data = id3Track.pesData,\n      parsePAT = this._parsePAT,\n      parsePMT = this._parsePMT,\n      parsePES = this._parsePES,\n      parseAVCPES = this._parseAVCPES.bind(this),\n      parseAACPES = this._parseAACPES.bind(this),\n      parseMPEGPES = this._parseMPEGPES.bind(this),\n      parseID3PES = this._parseID3PES.bind(this);\n\n    const syncOffset = TSDemuxer._syncOffset(data);\n\n    // don't parse last TS packet if incomplete\n    len -= (len + syncOffset) % 188;\n\n    // loop through TS packets\n    for (start = syncOffset; start < len; start += 188) {\n      if (data[start] === 0x47) {\n        stt = !!(data[start + 1] & 0x40);\n        // pid is a 13-bit field starting at the last bit of TS[1]\n        pid = ((data[start + 1] & 0x1f) << 8) + data[start + 2];\n        atf = (data[start + 3] & 0x30) >> 4;\n        // if an adaption field is present, its length is specified by the fifth byte of the TS packet header.\n        if (atf > 1) {\n          offset = start + 5 + data[start + 4];\n          // continue if there is only adaptation field\n          if (offset === (start + 188)) {\n            continue;\n          }\n        } else {\n          offset = start + 4;\n        }\n        switch (pid) {\n        case avcId:\n          if (stt) {\n            if (avcData && (pes = parsePES(avcData)) && pes.pts !== undefined) {\n              parseAVCPES(pes, false);\n            }\n\n            avcData = { data: [], size: 0 };\n          }\n          if (avcData) {\n            avcData.data.push(data.subarray(offset, start + 188));\n            avcData.size += start + 188 - offset;\n          }\n          break;\n        case audioId:\n          if (stt) {\n            if (audioData && (pes = parsePES(audioData)) && pes.pts !== undefined) {\n              if (audioTrack.isAAC) {\n                parseAACPES(pes);\n              } else {\n                parseMPEGPES(pes);\n              }\n            }\n            audioData = { data: [], size: 0 };\n          }\n          if (audioData) {\n            audioData.data.push(data.subarray(offset, start + 188));\n            audioData.size += start + 188 - offset;\n          }\n          break;\n        case id3Id:\n          if (stt) {\n            if (id3Data && (pes = parsePES(id3Data)) && pes.pts !== undefined) {\n              parseID3PES(pes);\n            }\n\n            id3Data = { data: [], size: 0 };\n          }\n          if (id3Data) {\n            id3Data.data.push(data.subarray(offset, start + 188));\n            id3Data.size += start + 188 - offset;\n          }\n          break;\n        case 0:\n          if (stt) {\n            offset += data[offset] + 1;\n          }\n\n          pmtId = this._pmtId = parsePAT(data, offset);\n          break;\n        case pmtId:\n          if (stt) {\n            offset += data[offset] + 1;\n          }\n\n          let parsedPIDs = parsePMT(data, offset, this.typeSupported.mpeg === true || this.typeSupported.mp3 === true, this.sampleAes != null);\n\n          // only update track id if track PID found while parsing PMT\n          // this is to avoid resetting the PID to -1 in case\n          // track PID transiently disappears from the stream\n          // this could happen in case of transient missing audio samples for example\n          // NOTE this is only the PID of the track as found in TS,\n          // but we are not using this for MP4 track IDs.\n          avcId = parsedPIDs.avc;\n          if (avcId > 0) {\n            avcTrack.pid = avcId;\n          }\n\n          audioId = parsedPIDs.audio;\n          if (audioId > 0) {\n            audioTrack.pid = audioId;\n            audioTrack.isAAC = parsedPIDs.isAAC;\n          }\n          id3Id = parsedPIDs.id3;\n          if (id3Id > 0) {\n            id3Track.pid = id3Id;\n          }\n\n          if (unknownPIDs && !pmtParsed) {\n            logger.log('reparse from beginning');\n            unknownPIDs = false;\n            // we set it to -188, the += 188 in the for loop will reset start to 0\n            start = syncOffset - 188;\n          }\n          pmtParsed = this.pmtParsed = true;\n          break;\n        case 17:\n        case 0x1fff:\n          break;\n        default:\n          unknownPIDs = true;\n          break;\n        }\n      } else {\n        this.observer.trigger(Event.ERROR, { type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.FRAG_PARSING_ERROR, fatal: false, reason: 'TS packet did not start with 0x47' });\n      }\n    }\n    // try to parse last PES packets\n    if (avcData && (pes = parsePES(avcData)) && pes.pts !== undefined) {\n      parseAVCPES(pes, true);\n      avcTrack.pesData = null;\n    } else {\n      // either avcData null or PES truncated, keep it for next frag parsing\n      avcTrack.pesData = avcData;\n    }\n\n    if (audioData && (pes = parsePES(audioData)) && pes.pts !== undefined) {\n      if (audioTrack.isAAC) {\n        parseAACPES(pes);\n      } else {\n        parseMPEGPES(pes);\n      }\n\n      audioTrack.pesData = null;\n    } else {\n      if (audioData && audioData.size) {\n        logger.log('last AAC PES packet truncated,might overlap between fragments');\n      }\n\n      // either audioData null or PES truncated, keep it for next frag parsing\n      audioTrack.pesData = audioData;\n    }\n\n    if (id3Data && (pes = parsePES(id3Data)) && pes.pts !== undefined) {\n      parseID3PES(pes);\n      id3Track.pesData = null;\n    } else {\n      // either id3Data null or PES truncated, keep it for next frag parsing\n      id3Track.pesData = id3Data;\n    }\n\n    if (this.sampleAes == null) {\n      this.remuxer.remux(audioTrack, avcTrack, id3Track, this._txtTrack, timeOffset, contiguous, accurateTimeOffset);\n    } else {\n      this.decryptAndRemux(audioTrack, avcTrack, id3Track, this._txtTrack, timeOffset, contiguous, accurateTimeOffset);\n    }\n  }\n\n  decryptAndRemux (audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {\n    if (audioTrack.samples && audioTrack.isAAC) {\n      let localthis = this;\n      this.sampleAes.decryptAacSamples(audioTrack.samples, 0, function () {\n        localthis.decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);\n      });\n    } else {\n      this.decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);\n    }\n  }\n\n  decryptAndRemuxAvc (audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {\n    if (videoTrack.samples) {\n      let localthis = this;\n      this.sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, function () {\n        localthis.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);\n      });\n    } else {\n      this.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);\n    }\n  }\n\n  destroy () {\n    this._initPTS = this._initDTS = undefined;\n    this._duration = 0;\n  }\n\n  _parsePAT (data, offset) {\n    // skip the PSI header and parse the first PMT entry\n    return (data[offset + 10] & 0x1F) << 8 | data[offset + 11];\n    // logger.log('PMT PID:'  + this._pmtId);\n  }\n\n  _parsePMT (data, offset, mpegSupported, isSampleAes) {\n    let sectionLength, tableEnd, programInfoLength, pid, result = { audio: -1, avc: -1, id3: -1, isAAC: true };\n    sectionLength = (data[offset + 1] & 0x0f) << 8 | data[offset + 2];\n    tableEnd = offset + 3 + sectionLength - 4;\n    // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n    programInfoLength = (data[offset + 10] & 0x0f) << 8 | data[offset + 11];\n    // advance the offset to the first entry in the mapping table\n    offset += 12 + programInfoLength;\n    while (offset < tableEnd) {\n      pid = (data[offset + 1] & 0x1F) << 8 | data[offset + 2];\n      switch (data[offset]) {\n      case 0xcf: // SAMPLE-AES AAC\n        if (!isSampleAes) {\n          logger.log('unkown stream type:' + data[offset]);\n          break;\n        }\n        /* falls through */\n\n        // ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)\n      case 0x0f:\n        // logger.log('AAC PID:'  + pid);\n        if (result.audio === -1) {\n          result.audio = pid;\n        }\n\n        break;\n\n        // Packetized metadata (ID3)\n      case 0x15:\n        // logger.log('ID3 PID:'  + pid);\n        if (result.id3 === -1) {\n          result.id3 = pid;\n        }\n\n        break;\n\n      case 0xdb: // SAMPLE-AES AVC\n        if (!isSampleAes) {\n          logger.log('unkown stream type:' + data[offset]);\n          break;\n        }\n        /* falls through */\n\n        // ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)\n      case 0x1b:\n        // logger.log('AVC PID:'  + pid);\n        if (result.avc === -1) {\n          result.avc = pid;\n        }\n\n        break;\n\n        // ISO/IEC 11172-3 (MPEG-1 audio)\n        // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)\n      case 0x03:\n      case 0x04:\n        // logger.log('MPEG PID:'  + pid);\n        if (!mpegSupported) {\n          logger.log('MPEG audio found, not supported in this browser for now');\n        } else if (result.audio === -1) {\n          result.audio = pid;\n          result.isAAC = false;\n        }\n        break;\n\n      case 0x24:\n        logger.warn('HEVC stream type found, not supported for now');\n        break;\n\n      default:\n        logger.log('unkown stream type:' + data[offset]);\n        break;\n      }\n      // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n      offset += ((data[offset + 3] & 0x0F) << 8 | data[offset + 4]) + 5;\n    }\n    return result;\n  }\n\n  _parsePES (stream) {\n    let i = 0, frag, pesFlags, pesPrefix, pesLen, pesHdrLen, pesData, pesPts, pesDts, payloadStartOffset, data = stream.data;\n    // safety check\n    if (!stream || stream.size === 0) {\n      return null;\n    }\n\n    // we might need up to 19 bytes to read PES header\n    // if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes\n    // usually only one merge is needed (and this is rare ...)\n    while (data[0].length < 19 && data.length > 1) {\n      let newData = new Uint8Array(data[0].length + data[1].length);\n      newData.set(data[0]);\n      newData.set(data[1], data[0].length);\n      data[0] = newData;\n      data.splice(1, 1);\n    }\n    // retrieve PTS/DTS from first fragment\n    frag = data[0];\n    pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];\n    if (pesPrefix === 1) {\n      pesLen = (frag[4] << 8) + frag[5];\n      // if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated\n      // minus 6 : PES header size\n      if (pesLen && pesLen > stream.size - 6) {\n        return null;\n      }\n\n      pesFlags = frag[7];\n      if (pesFlags & 0xC0) {\n        /* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n            as PTS / DTS is 33 bit we cannot use bitwise operator in JS,\n            as Bitwise operators treat their operands as a sequence of 32 bits */\n        pesPts = (frag[9] & 0x0E) * 536870912 +// 1 << 29\n          (frag[10] & 0xFF) * 4194304 +// 1 << 22\n          (frag[11] & 0xFE) * 16384 +// 1 << 14\n          (frag[12] & 0xFF) * 128 +// 1 << 7\n          (frag[13] & 0xFE) / 2;\n        // check if greater than 2^32 -1\n        if (pesPts > 4294967295) {\n          // decrement 2^33\n          pesPts -= 8589934592;\n        }\n        if (pesFlags & 0x40) {\n          pesDts = (frag[14] & 0x0E) * 536870912 +// 1 << 29\n            (frag[15] & 0xFF) * 4194304 +// 1 << 22\n            (frag[16] & 0xFE) * 16384 +// 1 << 14\n            (frag[17] & 0xFF) * 128 +// 1 << 7\n            (frag[18] & 0xFE) / 2;\n          // check if greater than 2^32 -1\n          if (pesDts > 4294967295) {\n            // decrement 2^33\n            pesDts -= 8589934592;\n          }\n          if (pesPts - pesDts > 60 * 90000) {\n            logger.warn(`${Math.round((pesPts - pesDts) / 90000)}s delta between PTS and DTS, align them`);\n            pesPts = pesDts;\n          }\n        } else {\n          pesDts = pesPts;\n        }\n      }\n      pesHdrLen = frag[8];\n      // 9 bytes : 6 bytes for PES header + 3 bytes for PES extension\n      payloadStartOffset = pesHdrLen + 9;\n\n      stream.size -= payloadStartOffset;\n      // reassemble PES packet\n      pesData = new Uint8Array(stream.size);\n      for (let j = 0, dataLen = data.length; j < dataLen; j++) {\n        frag = data[j];\n        let len = frag.byteLength;\n        if (payloadStartOffset) {\n          if (payloadStartOffset > len) {\n            // trim full frag if PES header bigger than frag\n            payloadStartOffset -= len;\n            continue;\n          } else {\n            // trim partial frag if PES header smaller than frag\n            frag = frag.subarray(payloadStartOffset);\n            len -= payloadStartOffset;\n            payloadStartOffset = 0;\n          }\n        }\n        pesData.set(frag, i);\n        i += len;\n      }\n      if (pesLen) {\n        // payload size : remove PES header + PES extension\n        pesLen -= pesHdrLen + 3;\n      }\n      return { data: pesData, pts: pesPts, dts: pesDts, len: pesLen };\n    } else {\n      return null;\n    }\n  }\n\n  pushAccesUnit (avcSample, avcTrack) {\n    if (avcSample.units.length && avcSample.frame) {\n      const samples = avcTrack.samples;\n      const nbSamples = samples.length;\n      // only push AVC sample if starting with a keyframe is not mandatory OR\n      //    if keyframe already found in this fragment OR\n      //       keyframe found in last fragment (track.sps) AND\n      //          samples already appended (we already found a keyframe in this fragment) OR fragment is contiguous\n      if (!this.config.forceKeyFrameOnDiscontinuity ||\n          avcSample.key === true ||\n          (avcTrack.sps && (nbSamples || this.contiguous))) {\n        avcSample.id = nbSamples;\n        samples.push(avcSample);\n      } else {\n        // dropped samples, track it\n        avcTrack.dropped++;\n      }\n    }\n    if (avcSample.debug.length) {\n      logger.log(avcSample.pts + '/' + avcSample.dts + ':' + avcSample.debug);\n    }\n  }\n\n  _parseAVCPES (pes, last) {\n    // logger.log('parse new PES');\n    let track = this._avcTrack,\n      units = this._parseAVCNALu(pes.data),\n      debug = false,\n      expGolombDecoder,\n      avcSample = this.avcSample,\n      push,\n      spsfound = false,\n      i,\n      pushAccesUnit = this.pushAccesUnit.bind(this),\n      createAVCSample = function (key, pts, dts, debug) {\n        return { key: key, pts: pts, dts: dts, units: [], debug: debug };\n      };\n    // free pes.data to save up some memory\n    pes.data = null;\n\n    // if new NAL units found and last sample still there, let's push ...\n    // this helps parsing streams with missing AUD (only do this if AUD never found)\n    if (avcSample && units.length && !track.audFound) {\n      pushAccesUnit(avcSample, track);\n      avcSample = this.avcSample = createAVCSample(false, pes.pts, pes.dts, '');\n    }\n\n    units.forEach(unit => {\n      switch (unit.type) {\n      // NDR\n      case 1:\n        push = true;\n        if (!avcSample) {\n          avcSample = this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');\n        }\n\n        if (debug) {\n          avcSample.debug += 'NDR ';\n        }\n\n        avcSample.frame = true;\n        let data = unit.data;\n        // only check slice type to detect KF in case SPS found in same packet (any keyframe is preceded by SPS ...)\n        if (spsfound && data.length > 4) {\n          // retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR\n          let sliceType = new ExpGolomb(data).readSliceType();\n          // 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice\n          // SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.\n          // An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.\n          // I slice: A slice that is not an SI slice that is decoded using intra prediction only.\n          // if (sliceType === 2 || sliceType === 7) {\n          if (sliceType === 2 || sliceType === 4 || sliceType === 7 || sliceType === 9) {\n            avcSample.key = true;\n          }\n        }\n        break;\n        // IDR\n      case 5:\n        push = true;\n        // handle PES not starting with AUD\n        if (!avcSample) {\n          avcSample = this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');\n        }\n\n        if (debug) {\n          avcSample.debug += 'IDR ';\n        }\n\n        avcSample.key = true;\n        avcSample.frame = true;\n        break;\n        // SEI\n      case 6:\n        push = true;\n        if (debug && avcSample) {\n          avcSample.debug += 'SEI ';\n        }\n\n        expGolombDecoder = new ExpGolomb(this.discardEPB(unit.data));\n\n        // skip frameType\n        expGolombDecoder.readUByte();\n\n        var payloadType = 0;\n        var payloadSize = 0;\n        var endOfCaptions = false;\n        var b = 0;\n\n        while (!endOfCaptions && expGolombDecoder.bytesAvailable > 1) {\n          payloadType = 0;\n          do {\n            b = expGolombDecoder.readUByte();\n            payloadType += b;\n          } while (b === 0xFF);\n\n          // Parse payload size.\n          payloadSize = 0;\n          do {\n            b = expGolombDecoder.readUByte();\n            payloadSize += b;\n          } while (b === 0xFF);\n\n          // TODO: there can be more than one payload in an SEI packet...\n          // TODO: need to read type and size in a while loop to get them all\n          if (payloadType === 4 && expGolombDecoder.bytesAvailable !== 0) {\n            endOfCaptions = true;\n\n            let countryCode = expGolombDecoder.readUByte();\n\n            if (countryCode === 181) {\n              let providerCode = expGolombDecoder.readUShort();\n\n              if (providerCode === 49) {\n                let userStructure = expGolombDecoder.readUInt();\n\n                if (userStructure === 0x47413934) {\n                  let userDataType = expGolombDecoder.readUByte();\n\n                  // Raw CEA-608 bytes wrapped in CEA-708 packet\n                  if (userDataType === 3) {\n                    let firstByte = expGolombDecoder.readUByte();\n                    let secondByte = expGolombDecoder.readUByte();\n\n                    let totalCCs = 31 & firstByte;\n                    let byteArray = [firstByte, secondByte];\n\n                    for (i = 0; i < totalCCs; i++) {\n                      // 3 bytes per CC\n                      byteArray.push(expGolombDecoder.readUByte());\n                      byteArray.push(expGolombDecoder.readUByte());\n                      byteArray.push(expGolombDecoder.readUByte());\n                    }\n\n                    this._insertSampleInOrder(this._txtTrack.samples, { type: 3, pts: pes.pts, bytes: byteArray });\n                  }\n                }\n              }\n            }\n          } else if (payloadType === 5 && expGolombDecoder.bytesAvailable !== 0) {\n            endOfCaptions = true;\n\n            if (payloadSize > 16) {\n              let uuidStrArray = [];\n              let userDataPayloadBytes = [];\n\n              for (i = 0; i < 16; i++) {\n                uuidStrArray.push(expGolombDecoder.readUByte().toString(16));\n\n                if (i === 3 || i === 5 || i === 7 || i === 9) {\n                  uuidStrArray.push('-');\n                }\n              }\n\n              for (i = 16; i < payloadSize; i++) {\n                userDataPayloadBytes.push(expGolombDecoder.readUByte());\n              }\n\n              this._insertSampleInOrder(this._txtTrack.samples, {\n                pts: pes.pts,\n                payloadType: payloadType,\n                uuid: uuidStrArray.join(''),\n                userData: String.fromCharCode.apply(null, userDataPayloadBytes),\n                userDataBytes: userDataPayloadBytes\n              });\n            }\n          } else if (payloadSize < expGolombDecoder.bytesAvailable) {\n            for (i = 0; i < payloadSize; i++) {\n              expGolombDecoder.readUByte();\n            }\n          }\n        }\n        break;\n        // SPS\n      case 7:\n        push = true;\n        spsfound = true;\n        if (debug && avcSample) {\n          avcSample.debug += 'SPS ';\n        }\n\n        if (!track.sps) {\n          expGolombDecoder = new ExpGolomb(unit.data);\n          let config = expGolombDecoder.readSPS();\n          track.width = config.width;\n          track.height = config.height;\n          track.pixelRatio = config.pixelRatio;\n          track.sps = [unit.data];\n          track.duration = this._duration;\n          let codecarray = unit.data.subarray(1, 4);\n          let codecstring = 'avc1.';\n          for (i = 0; i < 3; i++) {\n            let h = codecarray[i].toString(16);\n            if (h.length < 2) {\n              h = '0' + h;\n            }\n\n            codecstring += h;\n          }\n          track.codec = codecstring;\n        }\n        break;\n        // PPS\n      case 8:\n        push = true;\n        if (debug && avcSample) {\n          avcSample.debug += 'PPS ';\n        }\n\n        if (!track.pps) {\n          track.pps = [unit.data];\n        }\n\n        break;\n        // AUD\n      case 9:\n        push = false;\n        track.audFound = true;\n        if (avcSample) {\n          pushAccesUnit(avcSample, track);\n        }\n\n        avcSample = this.avcSample = createAVCSample(false, pes.pts, pes.dts, debug ? 'AUD ' : '');\n        break;\n        // Filler Data\n      case 12:\n        push = false;\n        break;\n      default:\n        push = false;\n        if (avcSample) {\n          avcSample.debug += 'unknown NAL ' + unit.type + ' ';\n        }\n\n        break;\n      }\n      if (avcSample && push) {\n        let units = avcSample.units;\n        units.push(unit);\n      }\n    });\n    // if last PES packet, push samples\n    if (last && avcSample) {\n      pushAccesUnit(avcSample, track);\n      this.avcSample = null;\n    }\n  }\n\n  _insertSampleInOrder (arr, data) {\n    let len = arr.length;\n    if (len > 0) {\n      if (data.pts >= arr[len - 1].pts) {\n        arr.push(data);\n      } else {\n        for (let pos = len - 1; pos >= 0; pos--) {\n          if (data.pts < arr[pos].pts) {\n            arr.splice(pos, 0, data);\n            break;\n          }\n        }\n      }\n    } else {\n      arr.push(data);\n    }\n  }\n\n  _getLastNalUnit () {\n    let avcSample = this.avcSample, lastUnit;\n    // try to fallback to previous sample if current one is empty\n    if (!avcSample || avcSample.units.length === 0) {\n      let track = this._avcTrack, samples = track.samples;\n      avcSample = samples[samples.length - 1];\n    }\n    if (avcSample) {\n      let units = avcSample.units;\n      lastUnit = units[units.length - 1];\n    }\n    return lastUnit;\n  }\n\n  _parseAVCNALu (array) {\n    let i = 0, len = array.byteLength, value, overflow, track = this._avcTrack, state = track.naluState || 0, lastState = state;\n    let units = [], unit, unitType, lastUnitStart = -1, lastUnitType;\n    // logger.log('PES:' + Hex.hexDump(array));\n\n    if (state === -1) {\n    // special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet\n      lastUnitStart = 0;\n      // NALu type is value read from offset 0\n      lastUnitType = array[0] & 0x1f;\n      state = 0;\n      i = 1;\n    }\n\n    while (i < len) {\n      value = array[i++];\n      // optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case\n      if (!state) {\n        state = value ? 0 : 1;\n        continue;\n      }\n      if (state === 1) {\n        state = value ? 0 : 2;\n        continue;\n      }\n      // here we have state either equal to 2 or 3\n      if (!value) {\n        state = 3;\n      } else if (value === 1) {\n        if (lastUnitStart >= 0) {\n          unit = { data: array.subarray(lastUnitStart, i - state - 1), type: lastUnitType };\n          // logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);\n          units.push(unit);\n        } else {\n          // lastUnitStart is undefined => this is the first start code found in this PES packet\n          // first check if start code delimiter is overlapping between 2 PES packets,\n          // ie it started in last packet (lastState not zero)\n          // and ended at the beginning of this PES packet (i <= 4 - lastState)\n          let lastUnit = this._getLastNalUnit();\n          if (lastUnit) {\n            if (lastState && (i <= 4 - lastState)) {\n              // start delimiter overlapping between PES packets\n              // strip start delimiter bytes from the end of last NAL unit\n              // check if lastUnit had a state different from zero\n              if (lastUnit.state) {\n                // strip last bytes\n                lastUnit.data = lastUnit.data.subarray(0, lastUnit.data.byteLength - lastState);\n              }\n            }\n            // If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.\n            overflow = i - state - 1;\n            if (overflow > 0) {\n              // logger.log('first NALU found with overflow:' + overflow);\n              let tmp = new Uint8Array(lastUnit.data.byteLength + overflow);\n              tmp.set(lastUnit.data, 0);\n              tmp.set(array.subarray(0, overflow), lastUnit.data.byteLength);\n              lastUnit.data = tmp;\n            }\n          }\n        }\n        // check if we can read unit type\n        if (i < len) {\n          unitType = array[i] & 0x1f;\n          // logger.log('find NALU @ offset:' + i + ',type:' + unitType);\n          lastUnitStart = i;\n          lastUnitType = unitType;\n          state = 0;\n        } else {\n          // not enough byte to read unit type. let's read it on next PES parsing\n          state = -1;\n        }\n      } else {\n        state = 0;\n      }\n    }\n    if (lastUnitStart >= 0 && state >= 0) {\n      unit = { data: array.subarray(lastUnitStart, len), type: lastUnitType, state: state };\n      units.push(unit);\n      // logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);\n    }\n    // no NALu found\n    if (units.length === 0) {\n      // append pes.data to previous NAL unit\n      let lastUnit = this._getLastNalUnit();\n      if (lastUnit) {\n        let tmp = new Uint8Array(lastUnit.data.byteLength + array.byteLength);\n        tmp.set(lastUnit.data, 0);\n        tmp.set(array, lastUnit.data.byteLength);\n        lastUnit.data = tmp;\n      }\n    }\n    track.naluState = state;\n    return units;\n  }\n\n  /**\n   * remove Emulation Prevention bytes from a RBSP\n   */\n  discardEPB (data) {\n    let length = data.byteLength,\n      EPBPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 &&\n          data[i + 1] === 0 &&\n          data[i + 2] === 0x03) {\n        EPBPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (EPBPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - EPBPositions.length;\n    newData = new Uint8Array(newLength);\n    let sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === EPBPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        EPBPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n    return newData;\n  }\n\n  _parseAACPES (pes) {\n    let track = this._audioTrack,\n      data = pes.data,\n      pts = pes.pts,\n      startOffset = 0,\n      aacOverFlow = this.aacOverFlow,\n      aacLastPTS = this.aacLastPTS,\n      frameDuration, frameIndex, offset, stamp, len;\n    if (aacOverFlow) {\n      let tmp = new Uint8Array(aacOverFlow.byteLength + data.byteLength);\n      tmp.set(aacOverFlow, 0);\n      tmp.set(data, aacOverFlow.byteLength);\n      // logger.log(`AAC: append overflowing ${aacOverFlow.byteLength} bytes to beginning of new PES`);\n      data = tmp;\n    }\n    // look for ADTS header (0xFFFx)\n    for (offset = startOffset, len = data.length; offset < len - 1; offset++) {\n      if (ADTS.isHeader(data, offset)) {\n        break;\n      }\n    }\n    // if ADTS header does not start straight from the beginning of the PES payload, raise an error\n    if (offset) {\n      let reason, fatal;\n      if (offset < len - 1) {\n        reason = `AAC PES did not start with ADTS header,offset:${offset}`;\n        fatal = false;\n      } else {\n        reason = 'no ADTS header found in AAC PES';\n        fatal = true;\n      }\n      logger.warn(`parsing error:${reason}`);\n      this.observer.trigger(Event.ERROR, { type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.FRAG_PARSING_ERROR, fatal: fatal, reason: reason });\n      if (fatal) {\n        return;\n      }\n    }\n\n    ADTS.initTrackConfig(track, this.observer, data, offset, this.audioCodec);\n    frameIndex = 0;\n    frameDuration = ADTS.getFrameDuration(track.samplerate);\n\n    // if last AAC frame is overflowing, we should ensure timestamps are contiguous:\n    // first sample PTS should be equal to last sample PTS + frameDuration\n    if (aacOverFlow && aacLastPTS) {\n      let newPTS = aacLastPTS + frameDuration;\n      if (Math.abs(newPTS - pts) > 1) {\n        logger.log(`AAC: align PTS for overlapping frames by ${Math.round((newPTS - pts) / 90)}`);\n        pts = newPTS;\n      }\n    }\n\n    // scan for aac samples\n    while (offset < len) {\n      if (ADTS.isHeader(data, offset) && (offset + 5) < len) {\n        let frame = ADTS.appendFrame(track, data, offset, pts, frameIndex);\n        if (frame) {\n          // logger.log(`${Math.round(frame.sample.pts)} : AAC`);\n          offset += frame.length;\n          stamp = frame.sample.pts;\n          frameIndex++;\n        } else {\n          // logger.log('Unable to parse AAC frame');\n          break;\n        }\n      } else {\n        // nothing found, keep looking\n        offset++;\n      }\n    }\n\n    if (offset < len) {\n      aacOverFlow = data.subarray(offset, len);\n      // logger.log(`AAC: overflow detected:${len-offset}`);\n    } else {\n      aacOverFlow = null;\n    }\n\n    this.aacOverFlow = aacOverFlow;\n    this.aacLastPTS = stamp;\n  }\n\n  _parseMPEGPES (pes) {\n    let data = pes.data;\n    let length = data.length;\n    let frameIndex = 0;\n    let offset = 0;\n    let pts = pes.pts;\n\n    while (offset < length) {\n      if (MpegAudio.isHeader(data, offset)) {\n        let frame = MpegAudio.appendFrame(this._audioTrack, data, offset, pts, frameIndex);\n        if (frame) {\n          offset += frame.length;\n          frameIndex++;\n        } else {\n          // logger.log('Unable to parse Mpeg audio frame');\n          break;\n        }\n      } else {\n        // nothing found, keep looking\n        offset++;\n      }\n    }\n  }\n\n  _parseID3PES (pes) {\n    this._id3Track.samples.push(pes);\n  }\n}\n\nexport default TSDemuxer;\n","/**\n * MP3 demuxer\n */\nimport ID3 from '../demux/id3';\nimport { logger } from '../utils/logger';\nimport MpegAudio from './mpegaudio';\n\nclass MP3Demuxer {\n  constructor (observer, remuxer, config) {\n    this.observer = observer;\n    this.config = config;\n    this.remuxer = remuxer;\n  }\n\n  resetInitSegment (initSegment, audioCodec, videoCodec, duration) {\n    this._audioTrack = { container: 'audio/mpeg', type: 'audio', id: -1, sequenceNumber: 0, isAAC: false, samples: [], len: 0, manifestCodec: audioCodec, duration: duration, inputTimeScale: 90000 };\n  }\n\n  resetTimeStamp () {\n  }\n\n  static probe (data) {\n    // check if data contains ID3 timestamp and MPEG sync word\n    let offset, length;\n    let id3Data = ID3.getID3Data(data, 0);\n    if (id3Data && ID3.getTimeStamp(id3Data) !== undefined) {\n      // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n      // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n      // More info http://www.mp3-tech.org/programmer/frame_header.html\n      for (offset = id3Data.length, length = Math.min(data.length - 1, offset + 100); offset < length; offset++) {\n        if (MpegAudio.probe(data, offset)) {\n          logger.log('MPEG Audio sync word found !');\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // feed incoming data to the front of the parsing pipeline\n  append (data, timeOffset, contiguous, accurateTimeOffset) {\n    let id3Data = ID3.getID3Data(data, 0);\n    let timestamp = ID3.getTimeStamp(id3Data);\n    let pts = timestamp ? 90 * timestamp : timeOffset * 90000;\n    let offset = id3Data.length;\n    let length = data.length;\n    let frameIndex = 0, stamp = 0;\n    let track = this._audioTrack;\n\n    let id3Samples = [{ pts: pts, dts: pts, data: id3Data }];\n\n    while (offset < length) {\n      if (MpegAudio.isHeader(data, offset)) {\n        let frame = MpegAudio.appendFrame(track, data, offset, pts, frameIndex);\n        if (frame) {\n          offset += frame.length;\n          stamp = frame.sample.pts;\n          frameIndex++;\n        } else {\n          // logger.log('Unable to parse Mpeg audio frame');\n          break;\n        }\n      } else if (ID3.isHeader(data, offset)) {\n        id3Data = ID3.getID3Data(data, offset);\n        id3Samples.push({ pts: stamp, dts: stamp, data: id3Data });\n        offset += id3Data.length;\n      } else {\n        // nothing found, keep looking\n        offset++;\n      }\n    }\n\n    this.remuxer.remux(track,\n      { samples: [] },\n      { samples: id3Samples, inputTimeScale: 90000 },\n      { samples: [] },\n      timeOffset,\n      contiguous,\n      accurateTimeOffset);\n  }\n\n  destroy () {\n  }\n}\n\nexport default MP3Demuxer;\n","/**\n *  AAC helper\n */\n\nclass AAC {\n  static getSilentFrame (codec, channelCount) {\n    switch (codec) {\n    case 'mp4a.40.2':\n      if (channelCount === 1) {\n        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n      } else if (channelCount === 2) {\n        return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n      } else if (channelCount === 3) {\n        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\n      } else if (channelCount === 4) {\n        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\n      } else if (channelCount === 5) {\n        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\n      } else if (channelCount === 6) {\n        return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\n      }\n\n      break;\n    // handle HE-AAC below (mp4a.40.5 / mp4a.40.29)\n    default:\n      if (channelCount === 1) {\n        // ffmpeg -y -f lavfi -i \"aevalsrc=0:d=0.05\" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n        return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n      } else if (channelCount === 2) {\n        // ffmpeg -y -f lavfi -i \"aevalsrc=0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n        return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n      } else if (channelCount === 3) {\n        // ffmpeg -y -f lavfi -i \"aevalsrc=0|0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n        return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n      }\n      break;\n    }\n    return null;\n  }\n}\n\nexport default AAC;\n","/**\n * Generate MP4 Box\n*/\n\nconst UINT32_MAX = Math.pow(2, 32) - 1;\n\nclass MP4 {\n  static init () {\n    MP4.types = {\n      avc1: [], // codingname\n      avcC: [],\n      btrt: [],\n      dinf: [],\n      dref: [],\n      esds: [],\n      ftyp: [],\n      hdlr: [],\n      mdat: [],\n      mdhd: [],\n      mdia: [],\n      mfhd: [],\n      minf: [],\n      moof: [],\n      moov: [],\n      mp4a: [],\n      '.mp3': [],\n      mvex: [],\n      mvhd: [],\n      pasp: [],\n      sdtp: [],\n      stbl: [],\n      stco: [],\n      stsc: [],\n      stsd: [],\n      stsz: [],\n      stts: [],\n      tfdt: [],\n      tfhd: [],\n      traf: [],\n      trak: [],\n      trun: [],\n      trex: [],\n      tkhd: [],\n      vmhd: [],\n      smhd: []\n    };\n\n    let i;\n    for (i in MP4.types) {\n      if (MP4.types.hasOwnProperty(i)) {\n        MP4.types[i] = [\n          i.charCodeAt(0),\n          i.charCodeAt(1),\n          i.charCodeAt(2),\n          i.charCodeAt(3)\n        ];\n      }\n    }\n\n    let videoHdlr = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x56, 0x69, 0x64, 0x65,\n      0x6f, 0x48, 0x61, 0x6e,\n      0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n    ]);\n\n    let audioHdlr = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x53, 0x6f, 0x75, 0x6e,\n      0x64, 0x48, 0x61, 0x6e,\n      0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n    ]);\n\n    MP4.HDLR_TYPES = {\n      'video': videoHdlr,\n      'audio': audioHdlr\n    };\n\n    let dref = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // entry_count\n      0x00, 0x00, 0x00, 0x0c, // entry_size\n      0x75, 0x72, 0x6c, 0x20, // 'url' type\n      0x00, // version 0\n      0x00, 0x00, 0x01 // entry_flags\n    ]);\n\n    let stco = new Uint8Array([\n      0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00 // entry_count\n    ]);\n\n    MP4.STTS = MP4.STSC = MP4.STCO = stco;\n\n    MP4.STSZ = new Uint8Array([\n      0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // sample_size\n      0x00, 0x00, 0x00, 0x00 // sample_count\n    ]);\n    MP4.VMHD = new Uint8Array([\n      0x00, // version\n      0x00, 0x00, 0x01, // flags\n      0x00, 0x00, // graphicsmode\n      0x00, 0x00,\n      0x00, 0x00,\n      0x00, 0x00 // opcolor\n    ]);\n    MP4.SMHD = new Uint8Array([\n      0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, // balance\n      0x00, 0x00 // reserved\n    ]);\n\n    MP4.STSD = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01]);// entry_count\n\n    let majorBrand = new Uint8Array([105, 115, 111, 109]); // isom\n    let avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1\n    let minorVersion = new Uint8Array([0, 0, 0, 1]);\n\n    MP4.FTYP = MP4.box(MP4.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);\n    MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));\n  }\n\n  static box (type) {\n    let\n      payload = Array.prototype.slice.call(arguments, 1),\n      size = 8,\n      i = payload.length,\n      len = i,\n      result;\n    // calculate the total size we need to allocate\n    while (i--) {\n      size += payload[i].byteLength;\n    }\n\n    result = new Uint8Array(size);\n    result[0] = (size >> 24) & 0xff;\n    result[1] = (size >> 16) & 0xff;\n    result[2] = (size >> 8) & 0xff;\n    result[3] = size & 0xff;\n    result.set(type, 4);\n    // copy the payload into the result\n    for (i = 0, size = 8; i < len; i++) {\n      // copy payload[i] array @ offset size\n      result.set(payload[i], size);\n      size += payload[i].byteLength;\n    }\n    return result;\n  }\n\n  static hdlr (type) {\n    return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);\n  }\n\n  static mdat (data) {\n    return MP4.box(MP4.types.mdat, data);\n  }\n\n  static mdhd (timescale, duration) {\n    duration *= timescale;\n    const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    return MP4.box(MP4.types.mdhd, new Uint8Array([\n      0x01, // version 1\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time\n      (timescale >> 24) & 0xFF,\n      (timescale >> 16) & 0xFF,\n      (timescale >> 8) & 0xFF,\n      timescale & 0xFF, // timescale\n      (upperWordDuration >> 24),\n      (upperWordDuration >> 16) & 0xFF,\n      (upperWordDuration >> 8) & 0xFF,\n      upperWordDuration & 0xFF,\n      (lowerWordDuration >> 24),\n      (lowerWordDuration >> 16) & 0xFF,\n      (lowerWordDuration >> 8) & 0xFF,\n      lowerWordDuration & 0xFF,\n      0x55, 0xc4, // 'und' language (undetermined)\n      0x00, 0x00\n    ]));\n  }\n\n  static mdia (track) {\n    return MP4.box(MP4.types.mdia, MP4.mdhd(track.timescale, track.duration), MP4.hdlr(track.type), MP4.minf(track));\n  }\n\n  static mfhd (sequenceNumber) {\n    return MP4.box(MP4.types.mfhd, new Uint8Array([\n      0x00,\n      0x00, 0x00, 0x00, // flags\n      (sequenceNumber >> 24),\n      (sequenceNumber >> 16) & 0xFF,\n      (sequenceNumber >> 8) & 0xFF,\n      sequenceNumber & 0xFF // sequence_number\n    ]));\n  }\n\n  static minf (track) {\n    if (track.type === 'audio') {\n      return MP4.box(MP4.types.minf, MP4.box(MP4.types.smhd, MP4.SMHD), MP4.DINF, MP4.stbl(track));\n    } else {\n      return MP4.box(MP4.types.minf, MP4.box(MP4.types.vmhd, MP4.VMHD), MP4.DINF, MP4.stbl(track));\n    }\n  }\n\n  static moof (sn, baseMediaDecodeTime, track) {\n    return MP4.box(MP4.types.moof, MP4.mfhd(sn), MP4.traf(track, baseMediaDecodeTime));\n  }\n  /**\n * @param tracks... (optional) {array} the tracks associated with this movie\n */\n  static moov (tracks) {\n    let\n      i = tracks.length,\n      boxes = [];\n\n    while (i--) {\n      boxes[i] = MP4.trak(tracks[i]);\n    }\n\n    return MP4.box.apply(null, [MP4.types.moov, MP4.mvhd(tracks[0].timescale, tracks[0].duration)].concat(boxes).concat(MP4.mvex(tracks)));\n  }\n\n  static mvex (tracks) {\n    let\n      i = tracks.length,\n      boxes = [];\n\n    while (i--) {\n      boxes[i] = MP4.trex(tracks[i]);\n    }\n\n    return MP4.box.apply(null, [MP4.types.mvex].concat(boxes));\n  }\n\n  static mvhd (timescale, duration) {\n    duration *= timescale;\n    const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    let\n      bytes = new Uint8Array([\n        0x01, // version 1\n        0x00, 0x00, 0x00, // flags\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time\n        (timescale >> 24) & 0xFF,\n        (timescale >> 16) & 0xFF,\n        (timescale >> 8) & 0xFF,\n        timescale & 0xFF, // timescale\n        (upperWordDuration >> 24),\n        (upperWordDuration >> 16) & 0xFF,\n        (upperWordDuration >> 8) & 0xFF,\n        upperWordDuration & 0xFF,\n        (lowerWordDuration >> 24),\n        (lowerWordDuration >> 16) & 0xFF,\n        (lowerWordDuration >> 8) & 0xFF,\n        lowerWordDuration & 0xFF,\n        0x00, 0x01, 0x00, 0x00, // 1.0 rate\n        0x01, 0x00, // 1.0 volume\n        0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x01, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, // pre_defined\n        0xff, 0xff, 0xff, 0xff // next_track_ID\n      ]);\n    return MP4.box(MP4.types.mvhd, bytes);\n  }\n\n  static sdtp (track) {\n    let\n      samples = track.samples || [],\n      bytes = new Uint8Array(4 + samples.length),\n      flags,\n      i;\n    // leave the full box header (4 bytes) all zero\n    // write the sample table\n    for (i = 0; i < samples.length; i++) {\n      flags = samples[i].flags;\n      bytes[i + 4] = (flags.dependsOn << 4) |\n        (flags.isDependedOn << 2) |\n        (flags.hasRedundancy);\n    }\n\n    return MP4.box(MP4.types.sdtp, bytes);\n  }\n\n  static stbl (track) {\n    return MP4.box(MP4.types.stbl, MP4.stsd(track), MP4.box(MP4.types.stts, MP4.STTS), MP4.box(MP4.types.stsc, MP4.STSC), MP4.box(MP4.types.stsz, MP4.STSZ), MP4.box(MP4.types.stco, MP4.STCO));\n  }\n\n  static avc1 (track) {\n    let sps = [], pps = [], i, data, len;\n    // assemble the SPSs\n\n    for (i = 0; i < track.sps.length; i++) {\n      data = track.sps[i];\n      len = data.byteLength;\n      sps.push((len >>> 8) & 0xFF);\n      sps.push((len & 0xFF));\n\n      // SPS\n      sps = sps.concat(Array.prototype.slice.call(data));\n    }\n\n    // assemble the PPSs\n    for (i = 0; i < track.pps.length; i++) {\n      data = track.pps[i];\n      len = data.byteLength;\n      pps.push((len >>> 8) & 0xFF);\n      pps.push((len & 0xFF));\n\n      pps = pps.concat(Array.prototype.slice.call(data));\n    }\n\n    let avcc = MP4.box(MP4.types.avcC, new Uint8Array([\n        0x01, // version\n        sps[3], // profile\n        sps[4], // profile compat\n        sps[5], // level\n        0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes\n        0xE0 | track.sps.length // 3bit reserved (111) + numOfSequenceParameterSets\n      ].concat(sps).concat([\n        track.pps.length // numOfPictureParameterSets\n      ]).concat(pps))), // \"PPS\"\n      width = track.width,\n      height = track.height,\n      hSpacing = track.pixelRatio[0],\n      vSpacing = track.pixelRatio[1];\n\n    return MP4.box(MP4.types.avc1, new Uint8Array([\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      (width >> 8) & 0xFF,\n      width & 0xff, // width\n      (height >> 8) & 0xFF,\n      height & 0xff, // height\n      0x00, 0x48, 0x00, 0x00, // horizresolution\n      0x00, 0x48, 0x00, 0x00, // vertresolution\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // frame_count\n      0x12,\n      0x64, 0x61, 0x69, 0x6C, // dailymotion/hls.js\n      0x79, 0x6D, 0x6F, 0x74,\n      0x69, 0x6F, 0x6E, 0x2F,\n      0x68, 0x6C, 0x73, 0x2E,\n      0x6A, 0x73, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // compressorname\n      0x00, 0x18, // depth = 24\n      0x11, 0x11]), // pre_defined = -1\n    avcc,\n    MP4.box(MP4.types.btrt, new Uint8Array([\n      0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n      0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n      0x00, 0x2d, 0xc6, 0xc0])), // avgBitrate\n    MP4.box(MP4.types.pasp, new Uint8Array([\n      (hSpacing >> 24), // hSpacing\n      (hSpacing >> 16) & 0xFF,\n      (hSpacing >> 8) & 0xFF,\n      hSpacing & 0xFF,\n      (vSpacing >> 24), // vSpacing\n      (vSpacing >> 16) & 0xFF,\n      (vSpacing >> 8) & 0xFF,\n      vSpacing & 0xFF]))\n    );\n  }\n\n  static esds (track) {\n    let configlen = track.config.length;\n    return new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n\n      0x03, // descriptor_type\n      0x17 + configlen, // length\n      0x00, 0x01, // es_id\n      0x00, // stream_priority\n\n      0x04, // descriptor_type\n      0x0f + configlen, // length\n      0x40, // codec : mpeg4_audio\n      0x15, // stream_type\n      0x00, 0x00, 0x00, // buffer_size\n      0x00, 0x00, 0x00, 0x00, // maxBitrate\n      0x00, 0x00, 0x00, 0x00, // avgBitrate\n\n      0x05 // descriptor_type\n    ].concat([configlen]).concat(track.config).concat([0x06, 0x01, 0x02])); // GASpecificConfig)); // length + audio config descriptor\n  }\n\n  static mp4a (track) {\n    let samplerate = track.samplerate;\n    return MP4.box(MP4.types.mp4a, new Uint8Array([\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, track.channelCount, // channelcount\n      0x00, 0x10, // sampleSize:16bits\n      0x00, 0x00, 0x00, 0x00, // reserved2\n      (samplerate >> 8) & 0xFF,\n      samplerate & 0xff, //\n      0x00, 0x00]),\n    MP4.box(MP4.types.esds, MP4.esds(track)));\n  }\n\n  static mp3 (track) {\n    let samplerate = track.samplerate;\n    return MP4.box(MP4.types['.mp3'], new Uint8Array([\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, track.channelCount, // channelcount\n      0x00, 0x10, // sampleSize:16bits\n      0x00, 0x00, 0x00, 0x00, // reserved2\n      (samplerate >> 8) & 0xFF,\n      samplerate & 0xff, //\n      0x00, 0x00]));\n  }\n\n  static stsd (track) {\n    if (track.type === 'audio') {\n      if (!track.isAAC && track.codec === 'mp3') {\n        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp3(track));\n      }\n\n      return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));\n    } else {\n      return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));\n    }\n  }\n\n  static tkhd (track) {\n    let id = track.id,\n      duration = track.duration * track.timescale,\n      width = track.width,\n      height = track.height,\n      upperWordDuration = Math.floor(duration / (UINT32_MAX + 1)),\n      lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    return MP4.box(MP4.types.tkhd, new Uint8Array([\n      0x01, // version 1\n      0x00, 0x00, 0x07, // flags\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time\n      (id >> 24) & 0xFF,\n      (id >> 16) & 0xFF,\n      (id >> 8) & 0xFF,\n      id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (upperWordDuration >> 24),\n      (upperWordDuration >> 16) & 0xFF,\n      (upperWordDuration >> 8) & 0xFF,\n      upperWordDuration & 0xFF,\n      (lowerWordDuration >> 24),\n      (lowerWordDuration >> 16) & 0xFF,\n      (lowerWordDuration >> 8) & 0xFF,\n      lowerWordDuration & 0xFF,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, // layer\n      0x00, 0x00, // alternate_group\n      0x00, 0x00, // non-audio track volume\n      0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      (width >> 8) & 0xFF,\n      width & 0xFF,\n      0x00, 0x00, // width\n      (height >> 8) & 0xFF,\n      height & 0xFF,\n      0x00, 0x00 // height\n    ]));\n  }\n\n  static traf (track, baseMediaDecodeTime) {\n    let sampleDependencyTable = MP4.sdtp(track),\n      id = track.id,\n      upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1)),\n      lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));\n    return MP4.box(MP4.types.traf,\n      MP4.box(MP4.types.tfhd, new Uint8Array([\n        0x00, // version 0\n        0x00, 0x00, 0x00, // flags\n        (id >> 24),\n        (id >> 16) & 0XFF,\n        (id >> 8) & 0XFF,\n        (id & 0xFF) // track_ID\n      ])),\n      MP4.box(MP4.types.tfdt, new Uint8Array([\n        0x01, // version 1\n        0x00, 0x00, 0x00, // flags\n        (upperWordBaseMediaDecodeTime >> 24),\n        (upperWordBaseMediaDecodeTime >> 16) & 0XFF,\n        (upperWordBaseMediaDecodeTime >> 8) & 0XFF,\n        (upperWordBaseMediaDecodeTime & 0xFF),\n        (lowerWordBaseMediaDecodeTime >> 24),\n        (lowerWordBaseMediaDecodeTime >> 16) & 0XFF,\n        (lowerWordBaseMediaDecodeTime >> 8) & 0XFF,\n        (lowerWordBaseMediaDecodeTime & 0xFF)\n      ])),\n      MP4.trun(track,\n        sampleDependencyTable.length +\n                    16 + // tfhd\n                    20 + // tfdt\n                    8 + // traf header\n                    16 + // mfhd\n                    8 + // moof header\n                    8), // mdat header\n      sampleDependencyTable);\n  }\n\n  /**\n   * Generate a track box.\n   * @param track {object} a track definition\n   * @return {Uint8Array} the track box\n   */\n  static trak (track) {\n    track.duration = track.duration || 0xffffffff;\n    return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));\n  }\n\n  static trex (track) {\n    let id = track.id;\n    return MP4.box(MP4.types.trex, new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      (id >> 24),\n      (id >> 16) & 0XFF,\n      (id >> 8) & 0XFF,\n      (id & 0xFF), // track_ID\n      0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n      0x00, 0x00, 0x00, 0x00, // default_sample_duration\n      0x00, 0x00, 0x00, 0x00, // default_sample_size\n      0x00, 0x01, 0x00, 0x01 // default_sample_flags\n    ]));\n  }\n\n  static trun (track, offset) {\n    let samples = track.samples || [],\n      len = samples.length,\n      arraylen = 12 + (16 * len),\n      array = new Uint8Array(arraylen),\n      i, sample, duration, size, flags, cts;\n    offset += 8 + arraylen;\n    array.set([\n      0x00, // version 0\n      0x00, 0x0f, 0x01, // flags\n      (len >>> 24) & 0xFF,\n      (len >>> 16) & 0xFF,\n      (len >>> 8) & 0xFF,\n      len & 0xFF, // sample_count\n      (offset >>> 24) & 0xFF,\n      (offset >>> 16) & 0xFF,\n      (offset >>> 8) & 0xFF,\n      offset & 0xFF // data_offset\n    ], 0);\n    for (i = 0; i < len; i++) {\n      sample = samples[i];\n      duration = sample.duration;\n      size = sample.size;\n      flags = sample.flags;\n      cts = sample.cts;\n      array.set([\n        (duration >>> 24) & 0xFF,\n        (duration >>> 16) & 0xFF,\n        (duration >>> 8) & 0xFF,\n        duration & 0xFF, // sample_duration\n        (size >>> 24) & 0xFF,\n        (size >>> 16) & 0xFF,\n        (size >>> 8) & 0xFF,\n        size & 0xFF, // sample_size\n        (flags.isLeading << 2) | flags.dependsOn,\n        (flags.isDependedOn << 6) |\n          (flags.hasRedundancy << 4) |\n          (flags.paddingValue << 1) |\n          flags.isNonSync,\n        flags.degradPrio & 0xF0 << 8,\n        flags.degradPrio & 0x0F, // sample_flags\n        (cts >>> 24) & 0xFF,\n        (cts >>> 16) & 0xFF,\n        (cts >>> 8) & 0xFF,\n        cts & 0xFF // sample_composition_time_offset\n      ], 12 + 16 * i);\n    }\n    return MP4.box(MP4.types.trun, array);\n  }\n\n  static initSegment (tracks) {\n    if (!MP4.types) {\n      MP4.init();\n    }\n\n    let movie = MP4.moov(tracks), result;\n    result = new Uint8Array(MP4.FTYP.byteLength + movie.byteLength);\n    result.set(MP4.FTYP);\n    result.set(movie, MP4.FTYP.byteLength);\n    return result;\n  }\n}\n\nexport default MP4;\n","/**\n * fMP4 remuxer\n*/\n\nimport AAC from './aac-helper';\nimport MP4 from './mp4-generator';\n\nimport Event from '../events';\nimport { ErrorTypes, ErrorDetails } from '../errors';\n\nimport { logger } from '../utils/logger';\n\n// 10 seconds\nconst MAX_SILENT_FRAME_DURATION = 10 * 1000;\n\nclass MP4Remuxer {\n  constructor (observer, config, typeSupported, vendor) {\n    this.observer = observer;\n    this.config = config;\n    this.typeSupported = typeSupported;\n    const userAgent = navigator.userAgent;\n    this.isSafari = vendor && vendor.indexOf('Apple') > -1 && userAgent && !userAgent.match('CriOS');\n    this.ISGenerated = false;\n  }\n\n  destroy () {\n  }\n\n  resetTimeStamp (defaultTimeStamp) {\n    this._initPTS = this._initDTS = defaultTimeStamp;\n  }\n\n  resetInitSegment () {\n    this.ISGenerated = false;\n  }\n\n  remux (audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {\n    // generate Init Segment if needed\n    if (!this.ISGenerated) {\n      this.generateIS(audioTrack, videoTrack, timeOffset);\n    }\n\n    if (this.ISGenerated) {\n      const nbAudioSamples = audioTrack.samples.length;\n      const nbVideoSamples = videoTrack.samples.length;\n      let audioTimeOffset = timeOffset;\n      let videoTimeOffset = timeOffset;\n      if (nbAudioSamples && nbVideoSamples) {\n        // timeOffset is expected to be the offset of the first timestamp of this fragment (first DTS)\n        // if first audio DTS is not aligned with first video DTS then we need to take that into account\n        // when providing timeOffset to remuxAudio / remuxVideo. if we don't do that, there might be a permanent / small\n        // drift between audio and video streams\n        let audiovideoDeltaDts = (audioTrack.samples[0].pts - videoTrack.samples[0].pts) / videoTrack.inputTimeScale;\n        audioTimeOffset += Math.max(0, audiovideoDeltaDts);\n        videoTimeOffset += Math.max(0, -audiovideoDeltaDts);\n      }\n      // Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is\n      // calculated in remuxAudio.\n      // logger.log('nb AAC samples:' + audioTrack.samples.length);\n      if (nbAudioSamples) {\n        // if initSegment was generated without video samples, regenerate it again\n        if (!audioTrack.timescale) {\n          logger.warn('regenerate InitSegment as audio detected');\n          this.generateIS(audioTrack, videoTrack, timeOffset);\n        }\n        let audioData = this.remuxAudio(audioTrack, audioTimeOffset, contiguous, accurateTimeOffset);\n        // logger.log('nb AVC samples:' + videoTrack.samples.length);\n        if (nbVideoSamples) {\n          let audioTrackLength;\n          if (audioData) {\n            audioTrackLength = audioData.endPTS - audioData.startPTS;\n          }\n\n          // if initSegment was generated without video samples, regenerate it again\n          if (!videoTrack.timescale) {\n            logger.warn('regenerate InitSegment as video detected');\n            this.generateIS(audioTrack, videoTrack, timeOffset);\n          }\n          this.remuxVideo(videoTrack, videoTimeOffset, contiguous, audioTrackLength, accurateTimeOffset);\n        }\n      } else {\n        // logger.log('nb AVC samples:' + videoTrack.samples.length);\n        if (nbVideoSamples) {\n          let videoData = this.remuxVideo(videoTrack, videoTimeOffset, contiguous, 0, accurateTimeOffset);\n          if (videoData && audioTrack.codec) {\n            this.remuxEmptyAudio(audioTrack, audioTimeOffset, contiguous, videoData);\n          }\n        }\n      }\n    }\n    // logger.log('nb ID3 samples:' + audioTrack.samples.length);\n    if (id3Track.samples.length) {\n      this.remuxID3(id3Track, timeOffset);\n    }\n\n    // logger.log('nb ID3 samples:' + audioTrack.samples.length);\n    if (textTrack.samples.length) {\n      this.remuxText(textTrack, timeOffset);\n    }\n\n    // notify end of parsing\n    this.observer.trigger(Event.FRAG_PARSED);\n  }\n\n  generateIS (audioTrack, videoTrack, timeOffset) {\n    let observer = this.observer,\n      audioSamples = audioTrack.samples,\n      videoSamples = videoTrack.samples,\n      typeSupported = this.typeSupported,\n      container = 'audio/mp4',\n      tracks = {},\n      data = { tracks: tracks },\n      computePTSDTS = (this._initPTS === undefined),\n      initPTS, initDTS;\n\n    if (computePTSDTS) {\n      initPTS = initDTS = Infinity;\n    }\n\n    if (audioTrack.config && audioSamples.length) {\n      // let's use audio sampling rate as MP4 time scale.\n      // rationale is that there is a integer nb of audio frames per audio sample (1024 for AAC)\n      // using audio sampling rate here helps having an integer MP4 frame duration\n      // this avoids potential rounding issue and AV sync issue\n      audioTrack.timescale = audioTrack.samplerate;\n      logger.log(`audio sampling rate : ${audioTrack.samplerate}`);\n      if (!audioTrack.isAAC) {\n        if (typeSupported.mpeg) { // Chrome and Safari\n          container = 'audio/mpeg';\n          audioTrack.codec = '';\n        } else if (typeSupported.mp3) { // Firefox\n          audioTrack.codec = 'mp3';\n        }\n      }\n      tracks.audio = {\n        container: container,\n        codec: audioTrack.codec,\n        initSegment: !audioTrack.isAAC && typeSupported.mpeg ? new Uint8Array() : MP4.initSegment([audioTrack]),\n        metadata: {\n          channelCount: audioTrack.channelCount\n        }\n      };\n      if (computePTSDTS) {\n        // remember first PTS of this demuxing context. for audio, PTS = DTS\n        initPTS = initDTS = audioSamples[0].pts - audioTrack.inputTimeScale * timeOffset;\n      }\n    }\n\n    if (videoTrack.sps && videoTrack.pps && videoSamples.length) {\n      // let's use input time scale as MP4 video timescale\n      // we use input time scale straight away to avoid rounding issues on frame duration / cts computation\n      const inputTimeScale = videoTrack.inputTimeScale;\n      videoTrack.timescale = inputTimeScale;\n      tracks.video = {\n        container: 'video/mp4',\n        codec: videoTrack.codec,\n        initSegment: MP4.initSegment([videoTrack]),\n        metadata: {\n          width: videoTrack.width,\n          height: videoTrack.height\n        }\n      };\n      if (computePTSDTS) {\n        initPTS = Math.min(initPTS, videoSamples[0].pts - inputTimeScale * timeOffset);\n        initDTS = Math.min(initDTS, videoSamples[0].dts - inputTimeScale * timeOffset);\n        this.observer.trigger(Event.INIT_PTS_FOUND, { initPTS: initPTS });\n      }\n    }\n\n    if (Object.keys(tracks).length) {\n      observer.trigger(Event.FRAG_PARSING_INIT_SEGMENT, data);\n      this.ISGenerated = true;\n      if (computePTSDTS) {\n        this._initPTS = initPTS;\n        this._initDTS = initDTS;\n      }\n    } else {\n      observer.trigger(Event.ERROR, { type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.FRAG_PARSING_ERROR, fatal: false, reason: 'no audio/video samples found' });\n    }\n  }\n\n  remuxVideo (track, timeOffset, contiguous, audioTrackLength, accurateTimeOffset) {\n    let offset = 8;\n    let mp4SampleDuration;\n    let mdat;\n    let moof;\n    let firstPTS;\n    let firstDTS;\n    let lastPTS;\n    let lastDTS;\n    const timeScale = track.timescale;\n    const inputSamples = track.samples;\n    const outputSamples = [];\n    const nbSamples = inputSamples.length;\n    const ptsNormalize = this._PTSNormalize;\n    const initPTS = this._initPTS;\n\n    // if parsed fragment is contiguous with last one, let's use last DTS value as reference\n    let nextAvcDts = this.nextAvcDts;\n\n    const isSafari = this.isSafari;\n\n    if (nbSamples === 0) {\n      return;\n    }\n\n    // Safari does not like overlapping DTS on consecutive fragments. let's use nextAvcDts to overcome this if fragments are consecutive\n    if (isSafari) {\n      // also consider consecutive fragments as being contiguous (even if a level switch occurs),\n      // for sake of clarity:\n      // consecutive fragments are frags with\n      //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR\n      //  - less than 200 ms PTS gaps (timeScale/5)\n      contiguous |= (inputSamples.length && nextAvcDts &&\n                     ((accurateTimeOffset && Math.abs(timeOffset - nextAvcDts / timeScale) < 0.1) ||\n                      Math.abs((inputSamples[0].pts - nextAvcDts - initPTS)) < timeScale / 5)\n      );\n    }\n\n    if (!contiguous) {\n      // if not contiguous, let's use target timeOffset\n      nextAvcDts = timeOffset * timeScale;\n    }\n\n    // PTS is coded on 33bits, and can loop from -2^32 to 2^32\n    // ptsNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value\n    inputSamples.forEach(function (sample) {\n      sample.pts = ptsNormalize(sample.pts - initPTS, nextAvcDts);\n      sample.dts = ptsNormalize(sample.dts - initPTS, nextAvcDts);\n    });\n\n    // sort video samples by DTS then PTS then demux id order\n    inputSamples.sort(function (a, b) {\n      const deltadts = a.dts - b.dts;\n      const deltapts = a.pts - b.pts;\n      return deltadts || (deltapts || (a.id - b.id));\n    });\n\n    // handle broken streams with PTS < DTS, tolerance up 200ms (18000 in 90kHz timescale)\n    let PTSDTSshift = inputSamples.reduce((prev, curr) => Math.max(Math.min(prev, curr.pts - curr.dts), -18000), 0);\n    if (PTSDTSshift < 0) {\n      logger.warn(`PTS < DTS detected in video samples, shifting DTS by ${Math.round(PTSDTSshift / 90)} ms to overcome this issue`);\n      for (let i = 0; i < inputSamples.length; i++) {\n        inputSamples[i].dts += PTSDTSshift;\n      }\n    }\n\n    // compute first DTS and last DTS, normalize them against reference value\n    let sample = inputSamples[0];\n    firstDTS = Math.max(sample.dts, 0);\n    firstPTS = Math.max(sample.pts, 0);\n\n    // check timestamp continuity accross consecutive fragments (this is to remove inter-fragment gap/hole)\n    let delta = Math.round((firstDTS - nextAvcDts) / 90);\n    // if fragment are contiguous, detect hole/overlapping between fragments\n    if (contiguous) {\n      if (delta) {\n        if (delta > 1) {\n          logger.log(`AVC:${delta} ms hole between fragments detected,filling it`);\n        } else if (delta < -1) {\n          logger.log(`AVC:${(-delta)} ms overlapping between fragments detected`);\n        }\n\n        // remove hole/gap : set DTS to next expected DTS\n        firstDTS = nextAvcDts;\n        inputSamples[0].dts = firstDTS;\n        // offset PTS as well, ensure that PTS is smaller or equal than new DTS\n        firstPTS = Math.max(firstPTS - delta, nextAvcDts);\n        inputSamples[0].pts = firstPTS;\n        logger.log(`Video/PTS/DTS adjusted: ${Math.round(firstPTS / 90)}/${Math.round(firstDTS / 90)},delta:${delta} ms`);\n      }\n    }\n\n    // compute lastPTS/lastDTS\n    sample = inputSamples[inputSamples.length - 1];\n    lastDTS = Math.max(sample.dts, 0);\n    lastPTS = Math.max(sample.pts, 0, lastDTS);\n\n    // on Safari let's signal the same sample duration for all samples\n    // sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS\n    // set this constant duration as being the avg delta between consecutive DTS.\n    if (isSafari) {\n      mp4SampleDuration = Math.round((lastDTS - firstDTS) / (inputSamples.length - 1));\n    }\n\n    let nbNalu = 0, naluLen = 0;\n    for (let i = 0; i < nbSamples; i++) {\n      // compute total/avc sample length and nb of NAL units\n      let sample = inputSamples[i], units = sample.units, nbUnits = units.length, sampleLen = 0;\n      for (let j = 0; j < nbUnits; j++) {\n        sampleLen += units[j].data.length;\n      }\n\n      naluLen += sampleLen;\n      nbNalu += nbUnits;\n      sample.length = sampleLen;\n\n      // normalize PTS/DTS\n      if (isSafari) {\n        // sample DTS is computed using a constant decoding offset (mp4SampleDuration) between samples\n        sample.dts = firstDTS + i * mp4SampleDuration;\n      } else {\n        // ensure sample monotonic DTS\n        sample.dts = Math.max(sample.dts, firstDTS);\n      }\n      // ensure that computed value is greater or equal than sample DTS\n      sample.pts = Math.max(sample.pts, sample.dts);\n    }\n\n    /* concatenate the video data and construct the mdat in place\n      (need 8 more bytes to fill length and mpdat type) */\n    let mdatSize = naluLen + (4 * nbNalu) + 8;\n    try {\n      mdat = new Uint8Array(mdatSize);\n    } catch (err) {\n      this.observer.trigger(Event.ERROR, { type: ErrorTypes.MUX_ERROR, details: ErrorDetails.REMUX_ALLOC_ERROR, fatal: false, bytes: mdatSize, reason: `fail allocating video mdat ${mdatSize}` });\n      return;\n    }\n    let view = new DataView(mdat.buffer);\n    view.setUint32(0, mdatSize);\n    mdat.set(MP4.types.mdat, 4);\n\n    for (let i = 0; i < nbSamples; i++) {\n      let avcSample = inputSamples[i],\n        avcSampleUnits = avcSample.units,\n        mp4SampleLength = 0,\n        compositionTimeOffset;\n      // convert NALU bitstream to MP4 format (prepend NALU with size field)\n      for (let j = 0, nbUnits = avcSampleUnits.length; j < nbUnits; j++) {\n        let unit = avcSampleUnits[j],\n          unitData = unit.data,\n          unitDataLen = unit.data.byteLength;\n        view.setUint32(offset, unitDataLen);\n        offset += 4;\n        mdat.set(unitData, offset);\n        offset += unitDataLen;\n        mp4SampleLength += 4 + unitDataLen;\n      }\n\n      if (!isSafari) {\n        // expected sample duration is the Decoding Timestamp diff of consecutive samples\n        if (i < nbSamples - 1) {\n          mp4SampleDuration = inputSamples[i + 1].dts - avcSample.dts;\n        } else {\n          let config = this.config,\n            lastFrameDuration = avcSample.dts - inputSamples[i > 0 ? i - 1 : i].dts;\n          if (config.stretchShortVideoTrack) {\n            // In some cases, a segment's audio track duration may exceed the video track duration.\n            // Since we've already remuxed audio, and we know how long the audio track is, we look to\n            // see if the delta to the next segment is longer than maxBufferHole.\n            // If so, playback would potentially get stuck, so we artificially inflate\n            // the duration of the last frame to minimize any potential gap between segments.\n            let maxBufferHole = config.maxBufferHole,\n              gapTolerance = Math.floor(maxBufferHole * timeScale),\n              deltaToFrameEnd = (audioTrackLength ? firstPTS + audioTrackLength * timeScale : this.nextAudioPts) - avcSample.pts;\n            if (deltaToFrameEnd > gapTolerance) {\n              // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video\n              // frame overlap. maxBufferHole should be >> lastFrameDuration anyway.\n              mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;\n              if (mp4SampleDuration < 0) {\n                mp4SampleDuration = lastFrameDuration;\n              }\n\n              logger.log(`It is approximately ${deltaToFrameEnd / 90} ms to the next segment; using duration ${mp4SampleDuration / 90} ms for the last video frame.`);\n            } else {\n              mp4SampleDuration = lastFrameDuration;\n            }\n          } else {\n            mp4SampleDuration = lastFrameDuration;\n          }\n        }\n        compositionTimeOffset = Math.round(avcSample.pts - avcSample.dts);\n      } else {\n        compositionTimeOffset = Math.max(0, mp4SampleDuration * Math.round((avcSample.pts - avcSample.dts) / mp4SampleDuration));\n      }\n\n      // console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${avcSample.pts}/${avcSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(avcSample.pts/4294967296).toFixed(3)}');\n      outputSamples.push({\n        size: mp4SampleLength,\n        // constant duration\n        duration: mp4SampleDuration,\n        cts: compositionTimeOffset,\n        flags: {\n          isLeading: 0,\n          isDependedOn: 0,\n          hasRedundancy: 0,\n          degradPrio: 0,\n          dependsOn: avcSample.key ? 2 : 1,\n          isNonSync: avcSample.key ? 0 : 1\n        }\n      });\n    }\n    // next AVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)\n    this.nextAvcDts = lastDTS + mp4SampleDuration;\n    let dropped = track.dropped;\n    track.nbNalu = 0;\n    track.dropped = 0;\n    if (outputSamples.length && navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n      let flags = outputSamples[0].flags;\n      // chrome workaround, mark first sample as being a Random Access Point to avoid sourcebuffer append issue\n      // https://code.google.com/p/chromium/issues/detail?id=229412\n      flags.dependsOn = 2;\n      flags.isNonSync = 0;\n    }\n    track.samples = outputSamples;\n    moof = MP4.moof(track.sequenceNumber++, firstDTS, track);\n    track.samples = [];\n\n    let data = {\n      data1: moof,\n      data2: mdat,\n      startPTS: firstPTS / timeScale,\n      endPTS: (lastPTS + mp4SampleDuration) / timeScale,\n      startDTS: firstDTS / timeScale,\n      endDTS: this.nextAvcDts / timeScale,\n      type: 'video',\n      hasAudio: false,\n      hasVideo: true,\n      nb: outputSamples.length,\n      dropped: dropped\n    };\n    this.observer.trigger(Event.FRAG_PARSING_DATA, data);\n    return data;\n  }\n\n  remuxAudio (track, timeOffset, contiguous, accurateTimeOffset) {\n    const inputTimeScale = track.inputTimeScale;\n    const mp4timeScale = track.timescale;\n    const scaleFactor = inputTimeScale / mp4timeScale;\n    const mp4SampleDuration = track.isAAC ? 1024 : 1152;\n    const inputSampleDuration = mp4SampleDuration * scaleFactor;\n    const ptsNormalize = this._PTSNormalize;\n    const initPTS = this._initPTS;\n    const rawMPEG = !track.isAAC && this.typeSupported.mpeg;\n\n    let mp4Sample,\n      fillFrame,\n      mdat, moof,\n      firstPTS, lastPTS,\n      offset = (rawMPEG ? 0 : 8),\n      inputSamples = track.samples,\n      outputSamples = [],\n      nextAudioPts = this.nextAudioPts;\n\n    // for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),\n    // for sake of clarity:\n    // consecutive fragments are frags with\n    //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR\n    //  - less than 20 audio frames distance\n    // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)\n    // this helps ensuring audio continuity\n    // and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame\n    contiguous |= (inputSamples.length && nextAudioPts &&\n                   ((accurateTimeOffset && Math.abs(timeOffset - nextAudioPts / inputTimeScale) < 0.1) ||\n                    Math.abs((inputSamples[0].pts - nextAudioPts - initPTS)) < 20 * inputSampleDuration)\n    );\n\n    // compute normalized PTS\n    inputSamples.forEach(function (sample) {\n      sample.pts = sample.dts = ptsNormalize(sample.pts - initPTS, timeOffset * inputTimeScale);\n    });\n\n    // filter out sample with negative PTS that are not playable anyway\n    // if we don't remove these negative samples, they will shift all audio samples forward.\n    // leading to audio overlap between current / next fragment\n    inputSamples = inputSamples.filter(function (sample) {\n      return sample.pts >= 0;\n    });\n\n    // in case all samples have negative PTS, and have been filtered out, return now\n    if (inputSamples.length === 0) {\n      return;\n    }\n\n    if (!contiguous) {\n      if (!accurateTimeOffset) {\n        // if frag are mot contiguous and if we cant trust time offset, let's use first sample PTS as next audio PTS\n        nextAudioPts = inputSamples[0].pts;\n      } else {\n        // if timeOffset is accurate, let's use it as predicted next audio PTS\n        nextAudioPts = timeOffset * inputTimeScale;\n      }\n    }\n\n    // If the audio track is missing samples, the frames seem to get \"left-shifted\" within the\n    // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.\n    // In an effort to prevent this from happening, we inject frames here where there are gaps.\n    // When possible, we inject a silent frame; when that's not possible, we duplicate the last\n    // frame.\n\n    if (track.isAAC) {\n      const maxAudioFramesDrift = this.config.maxAudioFramesDrift;\n      for (let i = 0, nextPts = nextAudioPts; i < inputSamples.length;) {\n        // First, let's see how far off this frame is from where we expect it to be\n        var sample = inputSamples[i], delta;\n        let pts = sample.pts;\n        delta = pts - nextPts;\n\n        const duration = Math.abs(1000 * delta / inputTimeScale);\n\n        // If we're overlapping by more than a duration, drop this sample\n        if (delta <= -maxAudioFramesDrift * inputSampleDuration) {\n          logger.warn(`Dropping 1 audio frame @ ${(nextPts / inputTimeScale).toFixed(3)}s due to ${Math.round(duration)} ms overlap.`);\n          inputSamples.splice(i, 1);\n          // Don't touch nextPtsNorm or i\n        } // eslint-disable-line brace-style\n\n        // Insert missing frames if:\n        // 1: We're more than maxAudioFramesDrift frame away\n        // 2: Not more than MAX_SILENT_FRAME_DURATION away\n        // 3: currentTime (aka nextPtsNorm) is not 0\n        else if (delta >= maxAudioFramesDrift * inputSampleDuration && duration < MAX_SILENT_FRAME_DURATION && nextPts) {\n          let missing = Math.round(delta / inputSampleDuration);\n          logger.warn(`Injecting ${missing} audio frame @ ${(nextPts / inputTimeScale).toFixed(3)}s due to ${Math.round(1000 * delta / inputTimeScale)} ms gap.`);\n          for (let j = 0; j < missing; j++) {\n            let newStamp = Math.max(nextPts, 0);\n            fillFrame = AAC.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);\n            if (!fillFrame) {\n              logger.log('Unable to get silent frame for given audio codec; duplicating last frame instead.');\n              fillFrame = sample.unit.subarray();\n            }\n            inputSamples.splice(i, 0, { unit: fillFrame, pts: newStamp, dts: newStamp });\n            nextPts += inputSampleDuration;\n            i++;\n          }\n\n          // Adjust sample to next expected pts\n          sample.pts = sample.dts = nextPts;\n          nextPts += inputSampleDuration;\n          i++;\n        } else {\n        // Otherwise, just adjust pts\n          if (Math.abs(delta) > (0.1 * inputSampleDuration)) {\n            // logger.log(`Invalid frame delta ${Math.round(delta + inputSampleDuration)} at PTS ${Math.round(pts / 90)} (should be ${Math.round(inputSampleDuration)}).`);\n          }\n          sample.pts = sample.dts = nextPts;\n          nextPts += inputSampleDuration;\n          i++;\n        }\n      }\n    }\n\n    // compute mdat size, as we eventually filtered/added some samples\n    let nbSamples = inputSamples.length;\n    let mdatSize = 0;\n    while (nbSamples--) {\n      mdatSize += inputSamples[nbSamples].unit.byteLength;\n    }\n\n    for (let j = 0, nbSamples = inputSamples.length; j < nbSamples; j++) {\n      let audioSample = inputSamples[j];\n      let unit = audioSample.unit;\n      let pts = audioSample.pts;\n      // logger.log(`Audio/PTS:${Math.round(pts/90)}`);\n      // if not first sample\n      if (lastPTS !== undefined) {\n        mp4Sample.duration = Math.round((pts - lastPTS) / scaleFactor);\n      } else {\n        let delta = Math.round(1000 * (pts - nextAudioPts) / inputTimeScale),\n          numMissingFrames = 0;\n        // if fragment are contiguous, detect hole/overlapping between fragments\n        // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)\n        if (contiguous && track.isAAC) {\n          // log delta\n          if (delta) {\n            if (delta > 0 && delta < MAX_SILENT_FRAME_DURATION) {\n              numMissingFrames = Math.round((pts - nextAudioPts) / inputSampleDuration);\n              logger.log(`${delta} ms hole between AAC samples detected,filling it`);\n              if (numMissingFrames > 0) {\n                fillFrame = AAC.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);\n                if (!fillFrame) {\n                  fillFrame = unit.subarray();\n                }\n\n                mdatSize += numMissingFrames * fillFrame.length;\n              }\n              // if we have frame overlap, overlapping for more than half a frame duraion\n            } else if (delta < -12) {\n              // drop overlapping audio frames... browser will deal with it\n              logger.log(`drop overlapping AAC sample, expected/parsed/delta:${(nextAudioPts / inputTimeScale).toFixed(3)}s/${(pts / inputTimeScale).toFixed(3)}s/${(-delta)}ms`);\n              mdatSize -= unit.byteLength;\n              continue;\n            }\n            // set PTS/DTS to expected PTS/DTS\n            pts = nextAudioPts;\n          }\n        }\n        // remember first PTS of our audioSamples\n        firstPTS = pts;\n        if (mdatSize > 0) {\n          mdatSize += offset;\n          try {\n            mdat = new Uint8Array(mdatSize);\n          } catch (err) {\n            this.observer.trigger(Event.ERROR, { type: ErrorTypes.MUX_ERROR, details: ErrorDetails.REMUX_ALLOC_ERROR, fatal: false, bytes: mdatSize, reason: `fail allocating audio mdat ${mdatSize}` });\n            return;\n          }\n          if (!rawMPEG) {\n            const view = new DataView(mdat.buffer);\n            view.setUint32(0, mdatSize);\n            mdat.set(MP4.types.mdat, 4);\n          }\n        } else {\n          // no audio samples\n          return;\n        }\n        for (let i = 0; i < numMissingFrames; i++) {\n          fillFrame = AAC.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);\n          if (!fillFrame) {\n            logger.log('Unable to get silent frame for given audio codec; duplicating this frame instead.');\n            fillFrame = unit.subarray();\n          }\n          mdat.set(fillFrame, offset);\n          offset += fillFrame.byteLength;\n          mp4Sample = {\n            size: fillFrame.byteLength,\n            cts: 0,\n            duration: 1024,\n            flags: {\n              isLeading: 0,\n              isDependedOn: 0,\n              hasRedundancy: 0,\n              degradPrio: 0,\n              dependsOn: 1\n            }\n          };\n          outputSamples.push(mp4Sample);\n        }\n      }\n      mdat.set(unit, offset);\n      let unitLen = unit.byteLength;\n      offset += unitLen;\n      // console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${audioSample.pts}/${audioSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(audioSample.pts/4294967296).toFixed(3)}');\n      mp4Sample = {\n        size: unitLen,\n        cts: 0,\n        duration: 0,\n        flags: {\n          isLeading: 0,\n          isDependedOn: 0,\n          hasRedundancy: 0,\n          degradPrio: 0,\n          dependsOn: 1\n        }\n      };\n      outputSamples.push(mp4Sample);\n      lastPTS = pts;\n    }\n    let lastSampleDuration = 0;\n    nbSamples = outputSamples.length;\n    // set last sample duration as being identical to previous sample\n    if (nbSamples >= 2) {\n      lastSampleDuration = outputSamples[nbSamples - 2].duration;\n      mp4Sample.duration = lastSampleDuration;\n    }\n    if (nbSamples) {\n      // next audio sample PTS should be equal to last sample PTS + duration\n      this.nextAudioPts = nextAudioPts = lastPTS + scaleFactor * lastSampleDuration;\n      // logger.log('Audio/PTS/PTSend:' + audioSample.pts.toFixed(0) + '/' + this.nextAacDts.toFixed(0));\n      track.samples = outputSamples;\n      if (rawMPEG) {\n        moof = new Uint8Array();\n      } else {\n        moof = MP4.moof(track.sequenceNumber++, firstPTS / scaleFactor, track);\n      }\n\n      track.samples = [];\n      const start = firstPTS / inputTimeScale;\n      const end = nextAudioPts / inputTimeScale;\n      const audioData = {\n        data1: moof,\n        data2: mdat,\n        startPTS: start,\n        endPTS: end,\n        startDTS: start,\n        endDTS: end,\n        type: 'audio',\n        hasAudio: true,\n        hasVideo: false,\n        nb: nbSamples\n      };\n      this.observer.trigger(Event.FRAG_PARSING_DATA, audioData);\n      return audioData;\n    }\n    return null;\n  }\n\n  remuxEmptyAudio (track, timeOffset, contiguous, videoData) {\n    let inputTimeScale = track.inputTimeScale,\n      mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale,\n      scaleFactor = inputTimeScale / mp4timeScale,\n      nextAudioPts = this.nextAudioPts,\n\n      // sync with video's timestamp\n      startDTS = (nextAudioPts !== undefined ? nextAudioPts : videoData.startDTS * inputTimeScale) + this._initDTS,\n      endDTS = videoData.endDTS * inputTimeScale + this._initDTS,\n      // one sample's duration value\n      sampleDuration = 1024,\n      frameDuration = scaleFactor * sampleDuration,\n\n      // samples count of this segment's duration\n      nbSamples = Math.ceil((endDTS - startDTS) / frameDuration),\n\n      // silent frame\n      silentFrame = AAC.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);\n\n    logger.warn('remux empty Audio');\n    // Can't remux if we can't generate a silent frame...\n    if (!silentFrame) {\n      logger.trace('Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!');\n      return;\n    }\n\n    let samples = [];\n    for (let i = 0; i < nbSamples; i++) {\n      let stamp = startDTS + i * frameDuration;\n      samples.push({ unit: silentFrame, pts: stamp, dts: stamp });\n    }\n    track.samples = samples;\n\n    this.remuxAudio(track, timeOffset, contiguous);\n  }\n\n  remuxID3 (track) {\n    let length = track.samples.length, sample;\n    const inputTimeScale = track.inputTimeScale;\n    const initPTS = this._initPTS;\n    const initDTS = this._initDTS;\n    // consume samples\n    if (length) {\n      for (let index = 0; index < length; index++) {\n        sample = track.samples[index];\n        // setting id3 pts, dts to relative time\n        // using this._initPTS and this._initDTS to calculate relative time\n        sample.pts = ((sample.pts - initPTS) / inputTimeScale);\n        sample.dts = ((sample.dts - initDTS) / inputTimeScale);\n      }\n      this.observer.trigger(Event.FRAG_PARSING_METADATA, {\n        samples: track.samples\n      });\n    }\n\n    track.samples = [];\n  }\n\n  remuxText (track) {\n    track.samples.sort(function (a, b) {\n      return (a.pts - b.pts);\n    });\n\n    let length = track.samples.length, sample;\n    const inputTimeScale = track.inputTimeScale;\n    const initPTS = this._initPTS;\n    // consume samples\n    if (length) {\n      for (let index = 0; index < length; index++) {\n        sample = track.samples[index];\n        // setting text pts, dts to relative time\n        // using this._initPTS and this._initDTS to calculate relative time\n        sample.pts = ((sample.pts - initPTS) / inputTimeScale);\n      }\n      this.observer.trigger(Event.FRAG_PARSING_USERDATA, {\n        samples: track.samples\n      });\n    }\n\n    track.samples = [];\n  }\n\n  _PTSNormalize (value, reference) {\n    let offset;\n    if (reference === undefined) {\n      return value;\n    }\n\n    if (reference < value) {\n      // - 2^33\n      offset = -8589934592;\n    } else {\n      // + 2^33\n      offset = 8589934592;\n    }\n    /* PTS is 33bit (from 0 to 2^33 -1)\n      if diff between value and reference is bigger than half of the amplitude (2^32) then it means that\n      PTS looping occured. fill the gap */\n    while (Math.abs(value - reference) > 4294967296) {\n      value += offset;\n    }\n\n    return value;\n  }\n}\n\nexport default MP4Remuxer;\n","/**\n * passthrough remuxer\n*/\nimport Event from '../events';\n\nclass PassThroughRemuxer {\n  constructor (observer) {\n    this.observer = observer;\n  }\n\n  destroy () {\n  }\n\n  resetTimeStamp () {\n  }\n\n  resetInitSegment () {\n  }\n\n  remux (audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset, rawData) {\n    let observer = this.observer;\n    let streamType = '';\n    if (audioTrack) {\n      streamType += 'audio';\n    }\n\n    if (videoTrack) {\n      streamType += 'video';\n    }\n\n    observer.trigger(Event.FRAG_PARSING_DATA, {\n      data1: rawData,\n      startPTS: timeOffset,\n      startDTS: timeOffset,\n      type: streamType,\n      hasAudio: !!audioTrack,\n      hasVideo: !!videoTrack,\n      nb: 1,\n      dropped: 0\n    });\n    // notify end of parsing\n    observer.trigger(Event.FRAG_PARSED);\n  }\n}\n\nexport default PassThroughRemuxer;\n","/**\n * MP4 demuxer\n */\nimport { logger } from '../utils/logger';\nimport Event from '../events';\n\nconst UINT32_MAX = Math.pow(2, 32) - 1;\n\nclass MP4Demuxer {\n  constructor (observer, remuxer) {\n    this.observer = observer;\n    this.remuxer = remuxer;\n  }\n\n  resetTimeStamp (initPTS) {\n    this.initPTS = initPTS;\n  }\n\n  resetInitSegment (initSegment, audioCodec, videoCodec, duration) {\n    // jshint unused:false\n    if (initSegment && initSegment.byteLength) {\n      const initData = this.initData = MP4Demuxer.parseInitSegment(initSegment);\n\n      // default audio codec if nothing specified\n      // TODO : extract that from initsegment\n      if (audioCodec == null) {\n        audioCodec = 'mp4a.40.5';\n      }\n\n      if (videoCodec == null) {\n        videoCodec = 'avc1.42e01e';\n      }\n\n      const tracks = {};\n      if (initData.audio && initData.video) {\n        tracks.audiovideo = { container: 'video/mp4', codec: audioCodec + ',' + videoCodec, initSegment: duration ? initSegment : null };\n      } else {\n        if (initData.audio) {\n          tracks.audio = { container: 'audio/mp4', codec: audioCodec, initSegment: duration ? initSegment : null };\n        }\n\n        if (initData.video) {\n          tracks.video = { container: 'video/mp4', codec: videoCodec, initSegment: duration ? initSegment : null };\n        }\n      }\n      this.observer.trigger(Event.FRAG_PARSING_INIT_SEGMENT, { tracks });\n    } else {\n      if (audioCodec) {\n        this.audioCodec = audioCodec;\n      }\n\n      if (videoCodec) {\n        this.videoCodec = videoCodec;\n      }\n    }\n  }\n\n  static probe (data) {\n    // ensure we find a moof box in the first 16 kB\n    return MP4Demuxer.findBox({ data: data, start: 0, end: Math.min(data.length, 16384) }, ['moof']).length > 0;\n  }\n\n  static bin2str (buffer) {\n    return String.fromCharCode.apply(null, buffer);\n  }\n\n  static readUint16 (buffer, offset) {\n    if (buffer.data) {\n      offset += buffer.start;\n      buffer = buffer.data;\n    }\n\n    const val = buffer[offset] << 8 |\n                buffer[offset + 1];\n\n    return val < 0 ? 65536 + val : val;\n  }\n\n  static readUint32 (buffer, offset) {\n    if (buffer.data) {\n      offset += buffer.start;\n      buffer = buffer.data;\n    }\n\n    const val = buffer[offset] << 24 |\n                buffer[offset + 1] << 16 |\n                buffer[offset + 2] << 8 |\n                buffer[offset + 3];\n    return val < 0 ? 4294967296 + val : val;\n  }\n\n  static writeUint32 (buffer, offset, value) {\n    if (buffer.data) {\n      offset += buffer.start;\n      buffer = buffer.data;\n    }\n    buffer[offset] = value >> 24;\n    buffer[offset + 1] = (value >> 16) & 0xff;\n    buffer[offset + 2] = (value >> 8) & 0xff;\n    buffer[offset + 3] = value & 0xff;\n  }\n\n  // Find the data for a box specified by its path\n  static findBox (data, path) {\n    let results = [],\n      i, size, type, end, subresults, start, endbox;\n\n    if (data.data) {\n      start = data.start;\n      end = data.end;\n      data = data.data;\n    } else {\n      start = 0;\n      end = data.byteLength;\n    }\n\n    if (!path.length) {\n      // short-circuit the search for empty paths\n      return null;\n    }\n\n    for (i = start; i < end;) {\n      size = MP4Demuxer.readUint32(data, i);\n      type = MP4Demuxer.bin2str(data.subarray(i + 4, i + 8));\n      endbox = size > 1 ? i + size : end;\n\n      if (type === path[0]) {\n        if (path.length === 1) {\n          // this is the end of the path and we've found the box we were\n          // looking for\n          results.push({ data: data, start: i + 8, end: endbox });\n        } else {\n          // recursively search for the next box along the path\n          subresults = MP4Demuxer.findBox({ data: data, start: i + 8, end: endbox }, path.slice(1));\n          if (subresults.length) {\n            results = results.concat(subresults);\n          }\n        }\n      }\n      i = endbox;\n    }\n\n    // we've finished searching all of data\n    return results;\n  }\n\n  static parseSegmentIndex (initSegment) {\n    const moov = MP4Demuxer.findBox(initSegment, ['moov'])[0];\n    const moovEndOffset = moov ? moov.end : null; // we need this in case we need to chop of garbage of the end of current data\n\n    let index = 0;\n    let sidx = MP4Demuxer.findBox(initSegment, ['sidx']);\n    let references;\n\n    if (!sidx || !sidx[0]) {\n      return null;\n    }\n\n    references = [];\n    sidx = sidx[0];\n\n    const version = sidx.data[0];\n\n    // set initial offset, we skip the reference ID (not needed)\n    index = version === 0 ? 8 : 16;\n\n    const timescale = MP4Demuxer.readUint32(sidx, index);\n    index += 4;\n\n    // TODO: parse earliestPresentationTime and firstOffset\n    // usually zero in our case\n    let earliestPresentationTime = 0;\n    let firstOffset = 0;\n\n    if (version === 0) {\n      index += 8;\n    } else {\n      index += 16;\n    }\n\n    // skip reserved\n    index += 2;\n\n    let startByte = sidx.end + firstOffset;\n\n    const referencesCount = MP4Demuxer.readUint16(sidx, index);\n    index += 2;\n\n    for (let i = 0; i < referencesCount; i++) {\n      let referenceIndex = index;\n\n      const referenceInfo = MP4Demuxer.readUint32(sidx, referenceIndex);\n      referenceIndex += 4;\n\n      const referenceSize = referenceInfo & 0x7FFFFFFF;\n      const referenceType = (referenceInfo & 0x80000000) >>> 31;\n\n      if (referenceType === 1) {\n        console.warn('SIDX has hierarchical references (not supported)');\n        return;\n      }\n\n      const subsegmentDuration = MP4Demuxer.readUint32(sidx, referenceIndex);\n      referenceIndex += 4;\n\n      references.push({\n        referenceSize,\n        subsegmentDuration, // unscaled\n        info: {\n          duration: subsegmentDuration / timescale,\n          start: startByte,\n          end: startByte + referenceSize - 1\n        }\n      });\n\n      startByte += referenceSize;\n\n      // Skipping 1 bit for |startsWithSap|, 3 bits for |sapType|, and 28 bits\n      // for |sapDelta|.\n      referenceIndex += 4;\n\n      // skip to next ref\n      index = referenceIndex;\n    }\n\n    return {\n      earliestPresentationTime,\n      timescale,\n      version,\n      referencesCount,\n      references,\n      moovEndOffset\n    };\n  }\n\n  /**\n   * Parses an MP4 initialization segment and extracts stream type and\n   * timescale values for any declared tracks. Timescale values indicate the\n   * number of clock ticks per second to assume for time-based values\n   * elsewhere in the MP4.\n   *\n   * To determine the start time of an MP4, you need two pieces of\n   * information: the timescale unit and the earliest base media decode\n   * time. Multiple timescales can be specified within an MP4 but the\n   * base media decode time is always expressed in the timescale from\n   * the media header box for the track:\n   * ```\n   * moov > trak > mdia > mdhd.timescale\n   * moov > trak > mdia > hdlr\n   * ```\n   * @param init {Uint8Array} the bytes of the init segment\n   * @return {object} a hash of track type to timescale values or null if\n   * the init segment is malformed.\n   */\n  static parseInitSegment (initSegment) {\n    let result = [];\n    let traks = MP4Demuxer.findBox(initSegment, ['moov', 'trak']);\n\n    traks.forEach(trak => {\n      const tkhd = MP4Demuxer.findBox(trak, ['tkhd'])[0];\n      if (tkhd) {\n        let version = tkhd.data[tkhd.start];\n        let index = version === 0 ? 12 : 20;\n        let trackId = MP4Demuxer.readUint32(tkhd, index);\n\n        const mdhd = MP4Demuxer.findBox(trak, ['mdia', 'mdhd'])[0];\n        if (mdhd) {\n          version = mdhd.data[mdhd.start];\n          index = version === 0 ? 12 : 20;\n          const timescale = MP4Demuxer.readUint32(mdhd, index);\n\n          const hdlr = MP4Demuxer.findBox(trak, ['mdia', 'hdlr'])[0];\n          if (hdlr) {\n            const hdlrType = MP4Demuxer.bin2str(hdlr.data.subarray(hdlr.start + 8, hdlr.start + 12));\n            let type = { 'soun': 'audio', 'vide': 'video' }[hdlrType];\n            if (type) {\n              // extract codec info. TODO : parse codec details to be able to build MIME type\n              let codecBox = MP4Demuxer.findBox(trak, ['mdia', 'minf', 'stbl', 'stsd']);\n              if (codecBox.length) {\n                codecBox = codecBox[0];\n                let codecType = MP4Demuxer.bin2str(codecBox.data.subarray(codecBox.start + 12, codecBox.start + 16));\n                logger.log(`MP4Demuxer:${type}:${codecType} found`);\n              }\n              result[trackId] = { timescale: timescale, type: type };\n              result[type] = { timescale: timescale, id: trackId };\n            }\n          }\n        }\n      }\n    });\n    return result;\n  }\n\n  /**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param timescale {object} a hash of track ids to timescale values.\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\n  static getStartDTS (initData, fragment) {\n    let trafs, baseTimes, result;\n\n    // we need info from two childrend of each track fragment box\n    trafs = MP4Demuxer.findBox(fragment, ['moof', 'traf']);\n\n    // determine the start times for each track\n    baseTimes = [].concat.apply([], trafs.map(function (traf) {\n      return MP4Demuxer.findBox(traf, ['tfhd']).map(function (tfhd) {\n        let id, scale, baseTime;\n\n        // get the track id from the tfhd\n        id = MP4Demuxer.readUint32(tfhd, 4);\n        // assume a 90kHz clock if no timescale was specified\n        scale = initData[id].timescale || 90e3;\n\n        // get the base media decode time from the tfdt\n        baseTime = MP4Demuxer.findBox(traf, ['tfdt']).map(function (tfdt) {\n          let version, result;\n\n          version = tfdt.data[tfdt.start];\n          result = MP4Demuxer.readUint32(tfdt, 4);\n          if (version === 1) {\n            result *= Math.pow(2, 32);\n\n            result += MP4Demuxer.readUint32(tfdt, 8);\n          }\n          return result;\n        })[0];\n        // convert base time to seconds\n        return baseTime / scale;\n      });\n    }));\n\n    // return the minimum\n    result = Math.min.apply(null, baseTimes);\n    return isFinite(result) ? result : 0;\n  }\n\n  static offsetStartDTS (initData, fragment, timeOffset) {\n    MP4Demuxer.findBox(fragment, ['moof', 'traf']).map(function (traf) {\n      return MP4Demuxer.findBox(traf, ['tfhd']).map(function (tfhd) {\n      // get the track id from the tfhd\n        let id = MP4Demuxer.readUint32(tfhd, 4);\n        // assume a 90kHz clock if no timescale was specified\n        let timescale = initData[id].timescale || 90e3;\n\n        // get the base media decode time from the tfdt\n        MP4Demuxer.findBox(traf, ['tfdt']).map(function (tfdt) {\n          let version = tfdt.data[tfdt.start];\n          let baseMediaDecodeTime = MP4Demuxer.readUint32(tfdt, 4);\n          if (version === 0) {\n            MP4Demuxer.writeUint32(tfdt, 4, baseMediaDecodeTime - timeOffset * timescale);\n          } else {\n            baseMediaDecodeTime *= Math.pow(2, 32);\n            baseMediaDecodeTime += MP4Demuxer.readUint32(tfdt, 8);\n            baseMediaDecodeTime -= timeOffset * timescale;\n            baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);\n            const upper = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));\n            const lower = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));\n            MP4Demuxer.writeUint32(tfdt, 4, upper);\n            MP4Demuxer.writeUint32(tfdt, 8, lower);\n          }\n        });\n      });\n    });\n  }\n\n  // feed incoming data to the front of the parsing pipeline\n  append (data, timeOffset, contiguous, accurateTimeOffset) {\n    let initData = this.initData;\n    if (!initData) {\n      this.resetInitSegment(data, this.audioCodec, this.videoCodec, false);\n      initData = this.initData;\n    }\n    let startDTS, initPTS = this.initPTS;\n    if (initPTS === undefined) {\n      let startDTS = MP4Demuxer.getStartDTS(initData, data);\n      this.initPTS = initPTS = startDTS - timeOffset;\n      this.observer.trigger(Event.INIT_PTS_FOUND, { initPTS: initPTS });\n    }\n    MP4Demuxer.offsetStartDTS(initData, data, initPTS);\n    startDTS = MP4Demuxer.getStartDTS(initData, data);\n    this.remuxer.remux(initData.audio, initData.video, null, null, startDTS, contiguous, accurateTimeOffset, data);\n  }\n\n  destroy () {}\n}\n\nexport default MP4Demuxer;\n","function webpackBootstrapFunc (modules) {\n/******/  // The module cache\n/******/  var installedModules = {};\n\n/******/  // The require function\n/******/  function __webpack_require__(moduleId) {\n\n/******/    // Check if module is in cache\n/******/    if(installedModules[moduleId])\n/******/      return installedModules[moduleId].exports;\n\n/******/    // Create a new module (and put it into the cache)\n/******/    var module = installedModules[moduleId] = {\n/******/      i: moduleId,\n/******/      l: false,\n/******/      exports: {}\n/******/    };\n\n/******/    // Execute the module function\n/******/    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/    // Flag the module as loaded\n/******/    module.l = true;\n\n/******/    // Return the exports of the module\n/******/    return module.exports;\n/******/  }\n\n/******/  // expose the modules object (__webpack_modules__)\n/******/  __webpack_require__.m = modules;\n\n/******/  // expose the module cache\n/******/  __webpack_require__.c = installedModules;\n\n/******/  // identity function for calling harmony imports with the correct context\n/******/  __webpack_require__.i = function(value) { return value; };\n\n/******/  // define getter function for harmony exports\n/******/  __webpack_require__.d = function(exports, name, getter) {\n/******/    if(!__webpack_require__.o(exports, name)) {\n/******/      Object.defineProperty(exports, name, {\n/******/        configurable: false,\n/******/        enumerable: true,\n/******/        get: getter\n/******/      });\n/******/    }\n/******/  };\n\n/******/  // define __esModule on exports\n/******/  __webpack_require__.r = function(exports) {\n/******/    Object.defineProperty(exports, '__esModule', { value: true });\n/******/  };\n\n/******/  // getDefaultExport function for compatibility with non-harmony modules\n/******/  __webpack_require__.n = function(module) {\n/******/    var getter = module && module.__esModule ?\n/******/      function getDefault() { return module['default']; } :\n/******/      function getModuleExports() { return module; };\n/******/    __webpack_require__.d(getter, 'a', getter);\n/******/    return getter;\n/******/  };\n\n/******/  // Object.prototype.hasOwnProperty.call\n/******/  __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/  // __webpack_public_path__\n/******/  __webpack_require__.p = \"/\";\n\n/******/  // on error function for async loading\n/******/  __webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n  var f = __webpack_require__(__webpack_require__.s = ENTRY_MODULE)\n  return f.default || f // try to call default if defined to also support babel esmodule exports\n}\n\nvar moduleNameReqExp = '[\\\\.|\\\\-|\\\\+|\\\\w|\\/|@]+'\nvar dependencyRegExp = '\\\\(\\\\s*(\\/\\\\*.*?\\\\*\\/)?\\\\s*.*?(' + moduleNameReqExp + ').*?\\\\)' // additional chars when output.pathinfo is true\n\n// http://stackoverflow.com/a/2593661/130442\nfunction quoteRegExp (str) {\n  return (str + '').replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&')\n}\n\nfunction isNumeric(n) {\n  return !isNaN(1 * n); // 1 * n converts integers, integers as string (\"123\"), 1e3 and \"1e3\" to integers and strings to NaN\n}\n\nfunction getModuleDependencies (sources, module, queueName) {\n  var retval = {}\n  retval[queueName] = []\n\n  var fnString = module.toString()\n  var wrapperSignature = fnString.match(/^function\\s?\\w*\\(\\w+,\\s*\\w+,\\s*(\\w+)\\)/)\n  if (!wrapperSignature) return retval\n  var webpackRequireName = wrapperSignature[1]\n\n  // main bundle deps\n  var re = new RegExp('(\\\\\\\\n|\\\\W)' + quoteRegExp(webpackRequireName) + dependencyRegExp, 'g')\n  var match\n  while ((match = re.exec(fnString))) {\n    if (match[3] === 'dll-reference') continue\n    retval[queueName].push(match[3])\n  }\n\n  // dll deps\n  re = new RegExp('\\\\(' + quoteRegExp(webpackRequireName) + '\\\\(\"(dll-reference\\\\s(' + moduleNameReqExp + '))\"\\\\)\\\\)' + dependencyRegExp, 'g')\n  while ((match = re.exec(fnString))) {\n    if (!sources[match[2]]) {\n      retval[queueName].push(match[1])\n      sources[match[2]] = __webpack_require__(match[1]).m\n    }\n    retval[match[2]] = retval[match[2]] || []\n    retval[match[2]].push(match[4])\n  }\n\n  // convert 1e3 back to 1000 - this can be important after uglify-js converted 1000 to 1e3\n  var keys = Object.keys(retval);\n  for (var i = 0; i < keys.length; i++) {\n    for (var j = 0; j < retval[keys[i]].length; j++) {\n      if (isNumeric(retval[keys[i]][j])) {\n        retval[keys[i]][j] = 1 * retval[keys[i]][j];\n      }\n    }\n  }\n\n  return retval\n}\n\nfunction hasValuesInQueues (queues) {\n  var keys = Object.keys(queues)\n  return keys.reduce(function (hasValues, key) {\n    return hasValues || queues[key].length > 0\n  }, false)\n}\n\nfunction getRequiredModules (sources, moduleId) {\n  var modulesQueue = {\n    main: [moduleId]\n  }\n  var requiredModules = {\n    main: []\n  }\n  var seenModules = {\n    main: {}\n  }\n\n  while (hasValuesInQueues(modulesQueue)) {\n    var queues = Object.keys(modulesQueue)\n    for (var i = 0; i < queues.length; i++) {\n      var queueName = queues[i]\n      var queue = modulesQueue[queueName]\n      var moduleToCheck = queue.pop()\n      seenModules[queueName] = seenModules[queueName] || {}\n      if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck]) continue\n      seenModules[queueName][moduleToCheck] = true\n      requiredModules[queueName] = requiredModules[queueName] || []\n      requiredModules[queueName].push(moduleToCheck)\n      var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName)\n      var newModulesKeys = Object.keys(newModules)\n      for (var j = 0; j < newModulesKeys.length; j++) {\n        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || []\n        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]])\n      }\n    }\n  }\n\n  return requiredModules\n}\n\nmodule.exports = function (moduleId, options) {\n  options = options || {}\n  var sources = {\n    main: __webpack_modules__\n  }\n\n  var requiredModules = options.all ? { main: Object.keys(sources.main) } : getRequiredModules(sources, moduleId)\n\n  var src = ''\n\n  Object.keys(requiredModules).filter(function (m) { return m !== 'main' }).forEach(function (module) {\n    var entryModule = 0\n    while (requiredModules[module][entryModule]) {\n      entryModule++\n    }\n    requiredModules[module].push(entryModule)\n    sources[module][entryModule] = '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })'\n    src = src + 'var ' + module + ' = (' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(entryModule)) + ')({' + requiredModules[module].map(function (id) { return '' + JSON.stringify(id) + ': ' + sources[module][id].toString() }).join(',') + '});\\n'\n  })\n\n  src = src + 'new ((' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.main.map(function (id) { return '' + JSON.stringify(id) + ': ' + sources.main[id].toString() }).join(',') + '}))(self);'\n\n  var blob = new window.Blob([src], { type: 'text/javascript' })\n  if (options.bare) { return blob }\n\n  var URL = window.URL || window.webkitURL || window.mozURL || window.msURL\n\n  var workerUrl = URL.createObjectURL(blob)\n  var worker = new window.Worker(workerUrl)\n  worker.objectURL = workerUrl\n\n  return worker\n}\n","/* demuxer web worker.\n *  - listen to worker message, and trigger DemuxerInline upon reception of Fragments.\n *  - provides MP4 Boxes back to main thread using [transferable objects](https://developers.google.com/web/updates/2011/12/Transferable-Objects-Lightning-Fast) in order to minimize message passing overhead.\n */\n\nimport DemuxerInline from '../demux/demuxer-inline';\nimport Event from '../events';\nimport { enableLogs } from '../utils/logger';\n\nimport { EventEmitter } from 'eventemitter3';\n\nlet DemuxerWorker = function (self) {\n  // observer setup\n  let observer = new EventEmitter();\n  observer.trigger = function trigger (event, ...data) {\n    observer.emit(event, event, ...data);\n  };\n\n  observer.off = function off (event, ...data) {\n    observer.removeListener(event, ...data);\n  };\n\n  let forwardMessage = function (ev, data) {\n    self.postMessage({ event: ev, data: data });\n  };\n\n  self.addEventListener('message', function (ev) {\n    let data = ev.data;\n    // console.log('demuxer cmd:' + data.cmd);\n    switch (data.cmd) {\n    case 'init':\n      const config = JSON.parse(data.config);\n      self.demuxer = new DemuxerInline(observer, data.typeSupported, config, data.vendor);\n\n      enableLogs(config.debug);\n\n      // signal end of worker init\n      forwardMessage('init', null);\n      break;\n    case 'demux':\n      self.demuxer.push(data.data, data.decryptdata, data.initSegment, data.audioCodec, data.videoCodec, data.timeOffset, data.discontinuity, data.trackSwitch, data.contiguous, data.duration, data.accurateTimeOffset, data.defaultInitPTS);\n      break;\n    default:\n      break;\n    }\n  });\n\n  // forward events to main thread\n  observer.on(Event.FRAG_DECRYPTED, forwardMessage);\n  observer.on(Event.FRAG_PARSING_INIT_SEGMENT, forwardMessage);\n  observer.on(Event.FRAG_PARSED, forwardMessage);\n  observer.on(Event.ERROR, forwardMessage);\n  observer.on(Event.FRAG_PARSING_METADATA, forwardMessage);\n  observer.on(Event.FRAG_PARSING_USERDATA, forwardMessage);\n  observer.on(Event.INIT_PTS_FOUND, forwardMessage);\n\n  // special case for FRAG_PARSING_DATA: pass data1/data2 as transferable object (no copy)\n  observer.on(Event.FRAG_PARSING_DATA, function (ev, data) {\n    let transferable = [];\n    let message = { event: ev, data: data };\n    if (data.data1) {\n      message.data1 = data.data1.buffer;\n      transferable.push(data.data1.buffer);\n      delete data.data1;\n    }\n    if (data.data2) {\n      message.data2 = data.data2.buffer;\n      transferable.push(data.data2.buffer);\n      delete data.data2;\n    }\n    self.postMessage(message, transferable);\n  });\n};\n\nexport default DemuxerWorker;\n","import Level from '../loader/level';\n\nexport interface LoaderContext {\n  // target URL\n  url: string\n  // loader response type (arraybuffer or default response type for playlist)\n  responseType: string\n  // start byte range offset\n  rangeStart?: number\n  // end byte range offset\n  rangeEnd?: number\n  // true if onProgress should report partial chunk of loaded content\n  progressData?: boolean\n}\n\nexport interface LoaderConfiguration {\n  // Max number of load retries\n  maxRetry: number\n  // Timeout after which `onTimeOut` callback will be triggered\n  // (if loading is still not finished after that delay)\n  timeout: number\n  // Delay between an I/O error and following connection retry (ms).\n  // This to avoid spamming the server\n  retryDelay: number\n  // max connection retry delay (ms)\n  maxRetryDelay: number\n}\n\nexport interface LoaderResponse {\n  url: string,\n  // TODO(jstackhouse): SharedArrayBuffer, es2017 extension to TS\n  data: string | ArrayBuffer\n}\n\nexport interface LoaderStats {\n  // performance.now() just after load() has been called\n  trequest: number\n  // performance.now() of first received byte\n  tfirst: number\n  // performance.now() on load complete\n  tload: number\n  // performance.now() on parse completion\n  tparsed: number\n  // number of loaded bytes\n  loaded: number\n  // total number of bytes\n  total: number\n}\n\ntype LoaderOnSuccess < T extends LoaderContext > = (\n  response: LoaderResponse,\n  stats: LoaderStats,\n  context: T,\n  networkDetails: any\n) => void;\n\ntype LoaderOnProgress < T extends LoaderContext > = (\n  stats: LoaderStats,\n  context: T,\n  data: string | ArrayBuffer,\n  networkDetails: any,\n) => void;\n\ntype LoaderOnError < T extends LoaderContext > = (\n  error: {\n    // error status code\n    code: number,\n    // error description\n    text: string,\n  },\n  context: T,\n  networkDetails: any,\n) => void;\n\ntype LoaderOnTimeout < T extends LoaderContext > = (\n  stats: LoaderStats,\n  context: T,\n) => void;\n\nexport interface LoaderCallbacks<T extends LoaderContext>{\n  onSuccess: LoaderOnSuccess<T>,\n  onError: LoaderOnError<T>,\n  onTimeout: LoaderOnTimeout<T>,\n  onProgress?: LoaderOnProgress<T>,\n}\n\nexport interface Loader<T extends LoaderContext> {\n  destroy(): void\n  abort(): void\n  load(\n    context: LoaderContext,\n    config: LoaderConfiguration,\n    callbacks: LoaderCallbacks<T>,\n  ): void\n\n  context: T\n}\n\n/**\n * `type` property values for this loaders' context object\n * @enum\n *\n */\nexport enum PlaylistContextType {\n  MANIFEST = 'manifest',\n  LEVEL = 'level',\n  AUDIO_TRACK = 'audioTrack',\n  SUBTITLE_TRACK= 'subtitleTrack'\n}\n\n/**\n * @enum {string}\n */\nexport enum PlaylistLevelType {\n  MAIN = 'main',\n  AUDIO = 'audio',\n  SUBTITLE = 'subtitle'\n}\n\nexport interface PlaylistLoaderContext extends LoaderContext {\n  loader?: Loader<PlaylistLoaderContext>\n\n  type: PlaylistContextType\n  // the level index to load\n  level: number | null\n  // TODO: what is id?\n  id: number | null\n  // defines if the loader is handling a sidx request for the playlist\n  isSidxRequest?: boolean\n  // internal reprsentation of a parsed m3u8 level playlist\n  levelDetails?: Level\n}\n","/*\n*\n* All objects in the event handling chain should inherit from this class\n*\n*/\n\nimport { logger } from './utils/logger';\nimport { ErrorTypes, ErrorDetails } from './errors';\nimport Event from './events';\n\nconst FORBIDDEN_EVENT_NAMES = {\n  'hlsEventGeneric': true,\n  'hlsHandlerDestroying': true,\n  'hlsHandlerDestroyed': true\n};\n\nclass EventHandler {\n  hls: any;\n  handledEvents: any[];\n  useGenericHandler: boolean;\n\n  constructor (hls: any, ...events: any[]) {\n    this.hls = hls;\n    this.onEvent = this.onEvent.bind(this);\n    this.handledEvents = events;\n    this.useGenericHandler = true;\n\n    this.registerListeners();\n  }\n\n  destroy () {\n    this.onHandlerDestroying();\n    this.unregisterListeners();\n    this.onHandlerDestroyed();\n  }\n\n  onHandlerDestroying () {}\n  onHandlerDestroyed () {}\n\n  isEventHandler () {\n    return typeof this.handledEvents === 'object' && this.handledEvents.length && typeof this.onEvent === 'function';\n  }\n\n  registerListeners () {\n    if (this.isEventHandler()) {\n      this.handledEvents.forEach(function (event) {\n        if (FORBIDDEN_EVENT_NAMES[event]) {\n          throw new Error('Forbidden event-name: ' + event);\n        }\n\n        this.hls.on(event, this.onEvent);\n      }, this);\n    }\n  }\n\n  unregisterListeners () {\n    if (this.isEventHandler()) {\n      this.handledEvents.forEach(function (event) {\n        this.hls.off(event, this.onEvent);\n      }, this);\n    }\n  }\n\n  /**\n   * arguments: event (string), data (any)\n   */\n  onEvent (event: string, data: any) {\n    this.onEventGeneric(event, data);\n  }\n\n  onEventGeneric (event: string, data: any) {\n    let eventToFunction = function (event: string, data: any) {\n      let funcName = 'on' + event.replace('hls', '');\n      if (typeof this[funcName] !== 'function') {\n        throw new Error(`Event ${event} has no generic handler in this ${this.constructor.name} class (tried ${funcName})`);\n      }\n\n      return this[funcName].bind(this, data);\n    };\n    try {\n      eventToFunction.call(this, event, data).call();\n    } catch (err) {\n      logger.error(`An internal error happened while handling event ${event}. Error message: \"${err.message}\". Here is a stacktrace:`, err);\n      this.hls.trigger(Event.ERROR, { type: ErrorTypes.OTHER_ERROR, details: ErrorDetails.INTERNAL_EXCEPTION, fatal: false, event: event, err: err });\n    }\n  }\n}\n\nexport default EventHandler;\n","\nimport { buildAbsoluteURL } from 'url-toolkit';\nimport { logger } from '../utils/logger';\nimport LevelKey from './level-key';\n\nexport enum ElementaryStreamTypes {\n  AUDIO = 'audio',\n  VIDEO = 'video',\n}\n\nexport default class Fragment {\n  private _url: string | null = null;\n  private _byteRange: number[] | null = null;\n  private _decryptdata: LevelKey | null = null;\n\n  // Holds the types of data this fragment supports\n  private _elementaryStreams: Record<ElementaryStreamTypes, boolean> = {\n    [ElementaryStreamTypes.AUDIO]: false,\n    [ElementaryStreamTypes.VIDEO]: false\n  };\n\n  public rawProgramDateTime: string | null = null;\n  public programDateTime: number | null = null;\n  public tagList: Array<string[]> = [];\n\n  // TODO: Move at least baseurl to constructor.\n  // Currently we do a two-pass construction as use the Fragment class almost like a object for holding parsing state.\n  // It may make more sense to just use a POJO to keep state during the parsing phase.\n  // Have Fragment be the representation once we have a known state?\n  // Something to think on.\n\n  // relurl is the portion of the URL that comes from inside the playlist.\n  public relurl!: string;\n  // baseurl is the URL to the playlist\n  public baseurl!: string;\n  // EXTINF has to be present for a m3u8 to be considered valid\n  public duration!: number;\n  // sn notates the sequence number for a segment, and if set to a string can be 'initSegment'\n  public sn: number | 'initSegment' = 0;\n  // levelkey is the EXT-X-KEY that applies to this segment for decryption\n  // core difference from the private field _decryptdata is the lack of the initialized IV\n  // _decryptdata will set the IV for this segment based on the segment number in the fragment\n  public levelkey?: LevelKey;\n\n  // setByteRange converts a EXT-X-BYTERANGE attribute into a two element array\n  setByteRange (value: string, previousFrag?: Fragment) {\n    const params = value.split('@', 2);\n    const byteRange: number[] = [];\n    if (params.length === 1) {\n      byteRange[0] = previousFrag ? previousFrag.byteRangeEndOffset : 0;\n    } else {\n      byteRange[0] = parseInt(params[1]);\n    }\n    byteRange[1] = parseInt(params[0]) + byteRange[0];\n    this._byteRange = byteRange;\n  }\n\n  get url () {\n    if (!this._url && this.relurl) {\n      this._url = buildAbsoluteURL(this.baseurl, this.relurl, { alwaysNormalize: true });\n    }\n\n    return this._url;\n  }\n\n  set url (value) {\n    this._url = value;\n  }\n\n  get byteRange (): number[] {\n    if (!this._byteRange) {\n      return [];\n    }\n\n    return this._byteRange;\n  }\n\n  /**\n   * @type {number}\n   */\n  get byteRangeStartOffset () {\n    return this.byteRange[0];\n  }\n\n  get byteRangeEndOffset () {\n    return this.byteRange[1];\n  }\n\n  get decryptdata (): LevelKey | null {\n    if (!this.levelkey && !this._decryptdata) {\n      return null;\n    }\n\n    if (!this._decryptdata && this.levelkey) {\n      let sn = this.sn;\n      if (typeof sn !== 'number') {\n        // We are fetching decryption data for a initialization segment\n        // If the segment was encrypted with AES-128\n        // It must have an IV defined. We cannot substitute the Segment Number in.\n        if (this.levelkey && this.levelkey.method === 'AES-128' && !this.levelkey.iv) {\n          logger.warn(`missing IV for initialization segment with method=\"${this.levelkey.method}\" - compliance issue`);\n        }\n\n        /*\n        Be converted to a Number.\n        'initSegment' will become NaN.\n        NaN, which when converted through ToInt32() -> +0.\n        ---\n        Explicitly set sn to resulting value from implicit conversions 'initSegment' values for IV generation.\n        */\n        sn = 0;\n      }\n      this._decryptdata = this.setDecryptDataFromLevelKey(this.levelkey, sn);\n    }\n\n    return this._decryptdata;\n  }\n\n  get endProgramDateTime () {\n    if (this.programDateTime === null) {\n      return null;\n    }\n\n    if (!Number.isFinite(this.programDateTime)) {\n      return null;\n    }\n\n    let duration = !Number.isFinite(this.duration) ? 0 : this.duration;\n\n    return this.programDateTime + (duration * 1000);\n  }\n\n  get encrypted () {\n    return !!((this.decryptdata && this.decryptdata.uri !== null) && (this.decryptdata.key === null));\n  }\n\n  /**\n   * @param {ElementaryStreamTypes} type\n   */\n  addElementaryStream (type: ElementaryStreamTypes) {\n    this._elementaryStreams[type] = true;\n  }\n\n  /**\n   * @param {ElementaryStreamTypes} type\n   */\n  hasElementaryStream (type: ElementaryStreamTypes) {\n    return this._elementaryStreams[type] === true;\n  }\n\n  /**\n   * Utility method for parseLevelPlaylist to create an initialization vector for a given segment\n   * @param {number} segmentNumber - segment number to generate IV with\n   * @returns {Uint8Array}\n   */\n  createInitializationVector (segmentNumber: number): Uint8Array {\n    let uint8View = new Uint8Array(16);\n\n    for (let i = 12; i < 16; i++) {\n      uint8View[i] = (segmentNumber >> 8 * (15 - i)) & 0xff;\n    }\n\n    return uint8View;\n  }\n\n  /**\n   * Utility method for parseLevelPlaylist to get a fragment's decryption data from the currently parsed encryption key data\n   * @param levelkey - a playlist's encryption info\n   * @param segmentNumber - the fragment's segment number\n   * @returns {LevelKey} - an object to be applied as a fragment's decryptdata\n   */\n  setDecryptDataFromLevelKey (levelkey: LevelKey, segmentNumber: number): LevelKey {\n    let decryptdata = levelkey;\n\n    if (levelkey && levelkey.method && levelkey.uri && !levelkey.iv) {\n      decryptdata = new LevelKey(levelkey.baseuri, levelkey.reluri);\n      decryptdata.method = levelkey.method;\n      decryptdata.iv = this.createInitializationVector(segmentNumber);\n    }\n\n    return decryptdata;\n  }\n}\n","import { buildAbsoluteURL } from 'url-toolkit';\n\nexport default class LevelKey {\n  private _uri: string | null = null;\n\n  public baseuri: string;\n  public reluri: string;\n  public method: string | null = null;\n  public key: Uint8Array | null = null;\n  public iv: Uint8Array | null = null;\n\n  constructor (baseURI: string, relativeURI: string) {\n    this.baseuri = baseURI;\n    this.reluri = relativeURI;\n  }\n\n  get uri () {\n    if (!this._uri && this.reluri) {\n      this._uri = buildAbsoluteURL(this.baseuri, this.reluri, { alwaysNormalize: true });\n    }\n\n    return this._uri;\n  }\n}\n","export default class Level {\n  constructor (baseUrl) {\n    // Please keep properties in alphabetical order\n    this.endCC = 0;\n    this.endSN = 0;\n    this.fragments = [];\n    this.initSegment = null;\n    this.live = true;\n    this.needSidxRanges = false;\n    this.startCC = 0;\n    this.startSN = 0;\n    this.startTimeOffset = null;\n    this.targetduration = 0;\n    this.totalduration = 0;\n    this.type = null;\n    this.url = baseUrl;\n    this.version = null;\n  }\n\n  get hasProgramDateTime () {\n    return !!(this.fragments[0] && Number.isFinite(this.fragments[0].programDateTime));\n  }\n}\n","const DECIMAL_RESOLUTION_REGEX = /^(\\d+)x(\\d+)$/; // eslint-disable-line no-useless-escape\nconst ATTR_LIST_REGEX = /\\s*(.+?)\\s*=((?:\\\".*?\\\")|.*?)(?:,|$)/g; // eslint-disable-line no-useless-escape\n\n// adapted from https://github.com/kanongil/node-m3u8parse/blob/master/attrlist.js\nclass AttrList {\n  constructor (attrs) {\n    if (typeof attrs === 'string') {\n      attrs = AttrList.parseAttrList(attrs);\n    }\n\n    for (let attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        this[attr] = attrs[attr];\n      }\n    }\n  }\n\n  decimalInteger (attrName) {\n    const intValue = parseInt(this[attrName], 10);\n    if (intValue > Number.MAX_SAFE_INTEGER) {\n      return Infinity;\n    }\n\n    return intValue;\n  }\n\n  hexadecimalInteger (attrName) {\n    if (this[attrName]) {\n      let stringValue = (this[attrName] || '0x').slice(2);\n      stringValue = ((stringValue.length & 1) ? '0' : '') + stringValue;\n\n      const value = new Uint8Array(stringValue.length / 2);\n      for (let i = 0; i < stringValue.length / 2; i++) {\n        value[i] = parseInt(stringValue.slice(i * 2, i * 2 + 2), 16);\n      }\n\n      return value;\n    } else {\n      return null;\n    }\n  }\n\n  hexadecimalIntegerAsNumber (attrName) {\n    const intValue = parseInt(this[attrName], 16);\n    if (intValue > Number.MAX_SAFE_INTEGER) {\n      return Infinity;\n    }\n\n    return intValue;\n  }\n\n  decimalFloatingPoint (attrName) {\n    return parseFloat(this[attrName]);\n  }\n\n  enumeratedString (attrName) {\n    return this[attrName];\n  }\n\n  decimalResolution (attrName) {\n    const res = DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);\n    if (res === null) {\n      return undefined;\n    }\n\n    return {\n      width: parseInt(res[1], 10),\n      height: parseInt(res[2], 10)\n    };\n  }\n\n  static parseAttrList (input) {\n    let match, attrs = {};\n    ATTR_LIST_REGEX.lastIndex = 0;\n    while ((match = ATTR_LIST_REGEX.exec(input)) !== null) {\n      let value = match[2], quote = '\"';\n\n      if (value.indexOf(quote) === 0 &&\n          value.lastIndexOf(quote) === (value.length - 1)) {\n        value = value.slice(1, -1);\n      }\n\n      attrs[match[1]] = value;\n    }\n    return attrs;\n  }\n}\n\nexport default AttrList;\n","// from http://mp4ra.org/codecs.html\nconst sampleEntryCodesISO = {\n  audio: {\n    'a3ds': true,\n    'ac-3': true,\n    'ac-4': true,\n    'alac': true,\n    'alaw': true,\n    'dra1': true,\n    'dts+': true,\n    'dts-': true,\n    'dtsc': true,\n    'dtse': true,\n    'dtsh': true,\n    'ec-3': true,\n    'enca': true,\n    'g719': true,\n    'g726': true,\n    'm4ae': true,\n    'mha1': true,\n    'mha2': true,\n    'mhm1': true,\n    'mhm2': true,\n    'mlpa': true,\n    'mp4a': true,\n    'raw ': true,\n    'Opus': true,\n    'samr': true,\n    'sawb': true,\n    'sawp': true,\n    'sevc': true,\n    'sqcp': true,\n    'ssmv': true,\n    'twos': true,\n    'ulaw': true\n  },\n  video: {\n    'avc1': true,\n    'avc2': true,\n    'avc3': true,\n    'avc4': true,\n    'avcp': true,\n    'drac': true,\n    'dvav': true,\n    'dvhe': true,\n    'encv': true,\n    'hev1': true,\n    'hvc1': true,\n    'mjp2': true,\n    'mp4v': true,\n    'mvc1': true,\n    'mvc2': true,\n    'mvc3': true,\n    'mvc4': true,\n    'resv': true,\n    'rv60': true,\n    's263': true,\n    'svc1': true,\n    'svc2': true,\n    'vc-1': true,\n    'vp08': true,\n    'vp09': true\n  }\n};\n\nfunction isCodecType (codec, type) {\n  const typeCodes = sampleEntryCodesISO[type];\n  return !!typeCodes && typeCodes[codec.slice(0, 4)] === true;\n}\n\nfunction isCodecSupportedInMp4 (codec, type) {\n  return window.MediaSource.isTypeSupported(`${type || 'video'}/mp4;codecs=\"${codec}\"`);\n}\n\nexport { isCodecType, isCodecSupportedInMp4 };\n","import * as URLToolkit from 'url-toolkit';\n\nimport Fragment from './fragment';\nimport Level from './level';\nimport LevelKey from './level-key';\n\nimport AttrList from '../utils/attr-list';\nimport { logger } from '../utils/logger';\nimport { isCodecType } from '../utils/codecs';\n\n/**\n * M3U8 parser\n * @module\n */\n\n// https://regex101.com is your friend\nconst MASTER_PLAYLIST_REGEX = /#EXT-X-STREAM-INF:([^\\n\\r]*)[\\r\\n]+([^\\r\\n]+)/g;\nconst MASTER_PLAYLIST_MEDIA_REGEX = /#EXT-X-MEDIA:(.*)/g;\n\nconst LEVEL_PLAYLIST_REGEX_FAST = new RegExp([\n  /#EXTINF:\\s*(\\d*(?:\\.\\d+)?)(?:,(.*)\\s+)?/.source, // duration (#EXTINF:<duration>,<title>), group 1 => duration, group 2 => title\n  /|(?!#)([\\S+ ?]+)/.source, // segment URI, group 3 => the URI (note newline is not eaten)\n  /|#EXT-X-BYTERANGE:*(.+)/.source, // next segment's byterange, group 4 => range spec (x@y)\n  /|#EXT-X-PROGRAM-DATE-TIME:(.+)/.source, // next segment's program date/time group 5 => the datetime spec\n  /|#.*/.source // All other non-segment oriented tags will match with all groups empty\n].join(''), 'g');\n\nconst LEVEL_PLAYLIST_REGEX_SLOW = /(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\\d+))|(?:#EXT-X-(TARGETDURATION): *(\\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)([^:]*):(.*))|(?:(#)(.*))(?:.*)\\r?\\n?/;\n\nconst MP4_REGEX_SUFFIX = /\\.(mp4|m4s|m4v|m4a)$/i;\n\nexport default class M3U8Parser {\n  static findGroup (groups, mediaGroupId) {\n    if (!groups) {\n      return null;\n    }\n\n    let matchingGroup = null;\n\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      if (group.id === mediaGroupId) {\n        matchingGroup = group;\n      }\n    }\n\n    return matchingGroup;\n  }\n\n  static convertAVC1ToAVCOTI (codec) {\n    let avcdata = codec.split('.');\n    let result;\n    if (avcdata.length > 2) {\n      result = avcdata.shift() + '.';\n      result += parseInt(avcdata.shift()).toString(16);\n      result += ('000' + parseInt(avcdata.shift()).toString(16)).substr(-4);\n    } else {\n      result = codec;\n    }\n    return result;\n  }\n\n  static resolve (url, baseUrl) {\n    return URLToolkit.buildAbsoluteURL(baseUrl, url, { alwaysNormalize: true });\n  }\n\n  static parseMasterPlaylist (string, baseurl) {\n    let levels = [];\n\n    MASTER_PLAYLIST_REGEX.lastIndex = 0;\n\n    function setCodecs (codecs, level) {\n      ['video', 'audio'].forEach(type => {\n        const filtered = codecs.filter(codec => isCodecType(codec, type));\n        if (filtered.length) {\n          const preferred = filtered.filter(codec => {\n            return (\n              codec.lastIndexOf('avc1', 0) === 0 ||\n              codec.lastIndexOf('mp4a', 0) === 0\n            );\n          });\n          level[`${type}Codec`] =\n            preferred.length > 0 ? preferred[0] : filtered[0];\n\n          // remove from list\n          codecs = codecs.filter(codec => filtered.indexOf(codec) === -1);\n        }\n      });\n\n      level.unknownCodecs = codecs;\n    }\n\n    let result;\n    while ((result = MASTER_PLAYLIST_REGEX.exec(string)) != null) {\n      const level = {};\n\n      const attrs = (level.attrs = new AttrList(result[1]));\n      level.url = M3U8Parser.resolve(result[2], baseurl);\n\n      const resolution = attrs.decimalResolution('RESOLUTION');\n      if (resolution) {\n        level.width = resolution.width;\n        level.height = resolution.height;\n      }\n      level.bitrate =\n        attrs.decimalInteger('AVERAGE-BANDWIDTH') ||\n        attrs.decimalInteger('BANDWIDTH');\n      level.name = attrs.NAME;\n\n      setCodecs([].concat((attrs.CODECS || '').split(/[ ,]+/)), level);\n\n      if (level.videoCodec && level.videoCodec.indexOf('avc1') !== -1) {\n        level.videoCodec = M3U8Parser.convertAVC1ToAVCOTI(level.videoCodec);\n      }\n\n      levels.push(level);\n    }\n    return levels;\n  }\n\n  static parseMasterPlaylistMedia (string, baseurl, type, audioGroups = []) {\n    let result;\n    let medias = [];\n    let id = 0;\n    MASTER_PLAYLIST_MEDIA_REGEX.lastIndex = 0;\n    while ((result = MASTER_PLAYLIST_MEDIA_REGEX.exec(string)) !== null) {\n      const media = {};\n      const attrs = new AttrList(result[1]);\n      if (attrs.TYPE === type) {\n        media.groupId = attrs['GROUP-ID'];\n        media.name = attrs.NAME;\n        media.type = type;\n        media.default = attrs.DEFAULT === 'YES';\n        media.autoselect = attrs.AUTOSELECT === 'YES';\n        media.forced = attrs.FORCED === 'YES';\n        if (attrs.URI) {\n          media.url = M3U8Parser.resolve(attrs.URI, baseurl);\n        }\n\n        media.lang = attrs.LANGUAGE;\n        if (!media.name) {\n          media.name = media.lang;\n        }\n\n        if (attrs['INSTREAM-ID']) {\n          media.instreamId = attrs['INSTREAM-ID'];\n        }\n\n        if (audioGroups.length) {\n          const groupCodec = M3U8Parser.findGroup(audioGroups, media.groupId);\n          media.audioCodec = groupCodec\n            ? groupCodec.codec\n            : audioGroups[0].codec;\n        }\n        media.id = id++;\n        medias.push(media);\n      }\n    }\n    return medias;\n  }\n\n  static parseLevelPlaylist (string, baseurl, id, type, levelUrlId) {\n    let currentSN = 0;\n    let totalduration = 0;\n    let level = new Level(baseurl);\n    let levelkey = new LevelKey();\n    let cc = 0;\n    let prevFrag = null;\n    let frag = new Fragment();\n    let result;\n    let i;\n\n    let firstPdtIndex = null;\n\n    LEVEL_PLAYLIST_REGEX_FAST.lastIndex = 0;\n\n    while ((result = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) !== null) {\n      const duration = result[1];\n      if (duration) {\n        // INF\n        frag.duration = parseFloat(duration);\n        // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n        const title = (' ' + result[2]).slice(1);\n        frag.title = title || null;\n        frag.tagList.push(title ? [ 'INF', duration, title ] : [ 'INF', duration ]);\n      } else if (result[3]) { // url\n        if (Number.isFinite(frag.duration)) {\n          const sn = currentSN++;\n          frag.type = type;\n          frag.start = totalduration;\n          frag.levelkey = levelkey;\n          frag.sn = sn;\n          frag.level = id;\n          frag.cc = cc;\n          frag.urlId = levelUrlId;\n          frag.baseurl = baseurl;\n          // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n          frag.relurl = (' ' + result[3]).slice(1);\n          assignProgramDateTime(frag, prevFrag);\n\n          level.fragments.push(frag);\n          prevFrag = frag;\n          totalduration += frag.duration;\n\n          frag = new Fragment();\n        }\n      } else if (result[4]) { // X-BYTERANGE\n        const data = (' ' + result[4]).slice(1);\n        if (prevFrag) {\n          frag.setByteRange(data, prevFrag);\n        } else {\n          frag.setByteRange(data);\n        }\n      } else if (result[5]) {\n        // PROGRAM-DATE-TIME\n        // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n        frag.rawProgramDateTime = (' ' + result[5]).slice(1);\n        frag.tagList.push(['PROGRAM-DATE-TIME', frag.rawProgramDateTime]);\n        if (firstPdtIndex === null) {\n          firstPdtIndex = level.fragments.length;\n        }\n      } else {\n        result = result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);\n        for (i = 1; i < result.length; i++) {\n          if (typeof result[i] !== 'undefined') {\n            break;\n          }\n        }\n\n        // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n        const value1 = (' ' + result[i + 1]).slice(1);\n        const value2 = (' ' + result[i + 2]).slice(1);\n\n        switch (result[i]) {\n        case '#':\n          frag.tagList.push(value2 ? [ value1, value2 ] : [ value1 ]);\n          break;\n        case 'PLAYLIST-TYPE':\n          level.type = value1.toUpperCase();\n          break;\n        case 'MEDIA-SEQUENCE':\n          currentSN = level.startSN = parseInt(value1);\n          break;\n        case 'TARGETDURATION':\n          level.targetduration = parseFloat(value1);\n          break;\n        case 'VERSION':\n          level.version = parseInt(value1);\n          break;\n        case 'EXTM3U':\n          break;\n        case 'ENDLIST':\n          level.live = false;\n          break;\n        case 'DIS':\n          cc++;\n          frag.tagList.push(['DIS']);\n          break;\n        case 'DISCONTINUITY-SEQ':\n          cc = parseInt(value1);\n          break;\n        case 'KEY': {\n          // https://tools.ietf.org/html/draft-pantos-http-live-streaming-08#section-3.4.4\n          const decryptparams = value1;\n          const keyAttrs = new AttrList(decryptparams);\n          const decryptmethod = keyAttrs.enumeratedString('METHOD');\n          const decrypturi = keyAttrs.URI;\n          const decryptiv = keyAttrs.hexadecimalInteger('IV');\n\n          if (decryptmethod) {\n            levelkey = new LevelKey();\n            if ((decrypturi) && (['AES-128', 'SAMPLE-AES', 'SAMPLE-AES-CENC'].indexOf(decryptmethod) >= 0)) {\n              levelkey.method = decryptmethod;\n              // URI to get the key\n              levelkey.baseuri = baseurl;\n              levelkey.reluri = decrypturi;\n              levelkey.key = null;\n              // Initialization Vector (IV)\n              levelkey.iv = decryptiv;\n            }\n          }\n          break;\n        }\n        case 'START': {\n          const startAttrs = new AttrList(value1);\n          const startTimeOffset = startAttrs.decimalFloatingPoint('TIME-OFFSET');\n          // TIME-OFFSET can be 0\n          if (Number.isFinite(startTimeOffset)) {\n            level.startTimeOffset = startTimeOffset;\n          }\n          break;\n        }\n        case 'MAP': {\n          const mapAttrs = new AttrList(value1);\n          frag.relurl = mapAttrs.URI;\n          if (mapAttrs.BYTERANGE) {\n            frag.setByteRange(mapAttrs.BYTERANGE);\n          }\n          frag.baseurl = baseurl;\n          frag.level = id;\n          frag.type = type;\n          frag.sn = 'initSegment';\n          level.initSegment = frag;\n          frag = new Fragment();\n          frag.rawProgramDateTime = level.initSegment.rawProgramDateTime;\n          break;\n        }\n        default:\n          logger.warn(`line parsed but not handled: ${result}`);\n          break;\n        }\n      }\n    }\n    frag = prevFrag;\n    // logger.log('found ' + level.fragments.length + ' fragments');\n    if (frag && !frag.relurl) {\n      level.fragments.pop();\n      totalduration -= frag.duration;\n    }\n    level.totalduration = totalduration;\n    level.averagetargetduration = totalduration / level.fragments.length;\n    level.endSN = currentSN - 1;\n    level.startCC = level.fragments[0] ? level.fragments[0].cc : 0;\n    level.endCC = cc;\n\n    if (!level.initSegment && level.fragments.length) {\n      // this is a bit lurky but HLS really has no other way to tell us\n      // if the fragments are TS or MP4, except if we download them :/\n      // but this is to be able to handle SIDX.\n      if (level.fragments.every(frag => MP4_REGEX_SUFFIX.test(frag.relurl))) {\n        logger.warn(\n          'MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX'\n        );\n\n        frag = new Fragment();\n        frag.relurl = level.fragments[0].relurl;\n        frag.baseurl = baseurl;\n        frag.level = id;\n        frag.type = type;\n        frag.sn = 'initSegment';\n\n        level.initSegment = frag;\n        level.needSidxRanges = true;\n      }\n    }\n\n    /**\n     * Backfill any missing PDT values\n       \"If the first EXT-X-PROGRAM-DATE-TIME tag in a Playlist appears after\n       one or more Media Segment URIs, the client SHOULD extrapolate\n       backward from that tag (using EXTINF durations and/or media\n       timestamps) to associate dates with those segments.\"\n     * We have already extrapolated forward, but all fragments up to the first instance of PDT do not have their PDTs\n     * computed.\n     */\n    if (firstPdtIndex) {\n      backfillProgramDateTimes(level.fragments, firstPdtIndex);\n    }\n\n    return level;\n  }\n}\n\nfunction backfillProgramDateTimes (fragments, startIndex) {\n  let fragPrev = fragments[startIndex];\n  for (let i = startIndex - 1; i >= 0; i--) {\n    const frag = fragments[i];\n    frag.programDateTime = fragPrev.programDateTime - (frag.duration * 1000);\n    fragPrev = frag;\n  }\n}\n\nfunction assignProgramDateTime (frag, prevFrag) {\n  if (frag.rawProgramDateTime) {\n    frag.programDateTime = Date.parse(frag.rawProgramDateTime);\n  } else if (prevFrag && prevFrag.programDateTime) {\n    frag.programDateTime = prevFrag.endProgramDateTime;\n  }\n\n  if (!Number.isFinite(frag.programDateTime)) {\n    frag.programDateTime = null;\n    frag.rawProgramDateTime = null;\n  }\n}\n","/**\n * PlaylistLoader - delegate for media manifest/playlist loading tasks. Takes care of parsing media to internal data-models.\n *\n * Once loaded, dispatches events with parsed data-models of manifest/levels/audio/subtitle tracks.\n *\n * Uses loader(s) set in config to do actual internal loading of resource tasks.\n *\n * @module\n *\n */\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport { logger } from '../utils/logger';\nimport { Loader, PlaylistContextType, PlaylistLoaderContext, PlaylistLevelType, LoaderCallbacks, LoaderResponse, LoaderStats, LoaderConfiguration } from '../types/loader';\nimport MP4Demuxer from '../demux/mp4demuxer';\nimport M3U8Parser from './m3u8-parser';\n\nconst { performance } = window;\n\n/**\n * @constructor\n */\nclass PlaylistLoader extends EventHandler {\n  private loaders: Partial<Record<PlaylistContextType, Loader<PlaylistLoaderContext>>> = {};\n\n  /**\n   * @constructs\n   * @param {Hls} hls\n   */\n  constructor (hls) {\n    super(hls,\n      Event.MANIFEST_LOADING,\n      Event.LEVEL_LOADING,\n      Event.AUDIO_TRACK_LOADING,\n      Event.SUBTITLE_TRACK_LOADING);\n  }\n\n  /**\n   * @param {PlaylistContextType} type\n   * @returns {boolean}\n   */\n  static canHaveQualityLevels (type: PlaylistContextType): boolean {\n    return (type !== PlaylistContextType.AUDIO_TRACK &&\n      type !== PlaylistContextType.SUBTITLE_TRACK);\n  }\n\n  /**\n   * Map context.type to LevelType\n   * @param {PlaylistLoaderContext} context\n   * @returns {LevelType}\n   */\n  static mapContextToLevelType (context: PlaylistLoaderContext): PlaylistLevelType {\n    const { type } = context;\n\n    switch (type) {\n    case PlaylistContextType.AUDIO_TRACK:\n      return PlaylistLevelType.AUDIO;\n    case PlaylistContextType.SUBTITLE_TRACK:\n      return PlaylistLevelType.SUBTITLE;\n    default:\n      return PlaylistLevelType.MAIN;\n    }\n  }\n\n  static getResponseUrl (response: LoaderResponse, context: PlaylistLoaderContext): string {\n    let url = response.url;\n    // responseURL not supported on some browsers (it is used to detect URL redirection)\n    // data-uri mode also not supported (but no need to detect redirection)\n    if (url === undefined || url.indexOf('data:') === 0) {\n      // fallback to initial URL\n      url = context.url;\n    }\n    return url;\n  }\n\n  /**\n   * Returns defaults or configured loader-type overloads (pLoader and loader config params)\n   * Default loader is XHRLoader (see utils)\n   * @param {PlaylistLoaderContext} context\n   * @returns {Loader} or other compatible configured overload\n   */\n  createInternalLoader (context: PlaylistLoaderContext): Loader<PlaylistLoaderContext> {\n    const config = this.hls.config;\n    const PLoader = config.pLoader;\n    const Loader = config.loader;\n    // TODO(typescript-config): Verify once config is typed that InternalLoader always returns a Loader\n    const InternalLoader = PLoader || Loader;\n\n    const loader = new InternalLoader(config);\n\n    // TODO - Do we really need to assign the instance or if the dep has been lost\n    context.loader = loader;\n    this.loaders[context.type] = loader;\n\n    return loader;\n  }\n\n  getInternalLoader (context: PlaylistLoaderContext): Loader<PlaylistLoaderContext> | undefined {\n    return this.loaders[context.type];\n  }\n\n  resetInternalLoader (contextType: PlaylistContextType) {\n    if (this.loaders[contextType]) {\n      delete this.loaders[contextType];\n    }\n  }\n\n  /**\n   * Call `destroy` on all internal loader instances mapped (one per context type)\n   */\n  destroyInternalLoaders () {\n    for (let contextType in this.loaders) {\n      let loader = this.loaders[contextType];\n      if (loader) {\n        loader.destroy();\n      }\n\n      this.resetInternalLoader(contextType as PlaylistContextType);\n    }\n  }\n\n  destroy () {\n    this.destroyInternalLoaders();\n\n    super.destroy();\n  }\n\n  onManifestLoading (data: { url: string; }) {\n    this.load({\n      url: data.url,\n      type: PlaylistContextType.MANIFEST,\n      level: 0,\n      id: null,\n      responseType: 'text'\n    });\n  }\n\n  onLevelLoading (data: { url: string; level: number | null; id: number | null; }) {\n    this.load({\n      url: data.url,\n      type: PlaylistContextType.LEVEL,\n      level: data.level,\n      id: data.id,\n      responseType: 'text'\n    });\n  }\n\n  onAudioTrackLoading (data: { url: string; id: number | null; }) {\n    this.load({\n      url: data.url,\n      type: PlaylistContextType.AUDIO_TRACK,\n      level: null,\n      id: data.id,\n      responseType: 'text'\n    });\n  }\n\n  onSubtitleTrackLoading (data: { url: string; id: number | null; }) {\n    this.load({\n      url: data.url,\n      type: PlaylistContextType.SUBTITLE_TRACK,\n      level: null,\n      id: data.id,\n      responseType: 'text'\n    });\n  }\n\n  load (context: PlaylistLoaderContext): boolean {\n    const config = this.hls.config;\n\n    logger.debug(`Loading playlist of type ${context.type}, level: ${context.level}, id: ${context.id}`);\n\n    // Check if a loader for this context already exists\n    let loader = this.getInternalLoader(context);\n    if (loader) {\n      const loaderContext = loader.context;\n      if (loaderContext && loaderContext.url === context.url) { // same URL can't overlap\n        logger.trace('playlist request ongoing');\n        return false;\n      } else {\n        logger.warn(`aborting previous loader for type: ${context.type}`);\n        loader.abort();\n      }\n    }\n\n    let maxRetry: number;\n    let timeout: number;\n    let retryDelay: number;\n    let maxRetryDelay: number;\n\n    // apply different configs for retries depending on\n    // context (manifest, level, audio/subs playlist)\n    switch (context.type) {\n    case PlaylistContextType.MANIFEST:\n      maxRetry = config.manifestLoadingMaxRetry;\n      timeout = config.manifestLoadingTimeOut;\n      retryDelay = config.manifestLoadingRetryDelay;\n      maxRetryDelay = config.manifestLoadingMaxRetryTimeout;\n      break;\n    case PlaylistContextType.LEVEL:\n      // Disable internal loader retry logic, since we are managing retries in Level Controller\n      maxRetry = 0;\n      maxRetryDelay = 0;\n      retryDelay = 0;\n      timeout = config.levelLoadingTimeOut;\n      // TODO Introduce retry settings for audio-track and subtitle-track, it should not use level retry config\n      break;\n    default:\n      maxRetry = config.levelLoadingMaxRetry;\n      timeout = config.levelLoadingTimeOut;\n      retryDelay = config.levelLoadingRetryDelay;\n      maxRetryDelay = config.levelLoadingMaxRetryTimeout;\n      break;\n    }\n\n    loader = this.createInternalLoader(context);\n\n    const loaderConfig: LoaderConfiguration = {\n      timeout,\n      maxRetry,\n      retryDelay,\n      maxRetryDelay\n    };\n\n    const loaderCallbacks: LoaderCallbacks<PlaylistLoaderContext> = {\n      onSuccess: this.loadsuccess.bind(this),\n      onError: this.loaderror.bind(this),\n      onTimeout: this.loadtimeout.bind(this)\n    };\n\n    logger.debug(`Calling internal loader delegate for URL: ${context.url}`);\n    loader.load(context, loaderConfig, loaderCallbacks);\n\n    return true;\n  }\n\n  loadsuccess (response: LoaderResponse, stats: LoaderStats, context: PlaylistLoaderContext, networkDetails: unknown = null) {\n    if (context.isSidxRequest) {\n      this._handleSidxRequest(response, context);\n      this._handlePlaylistLoaded(response, stats, context, networkDetails);\n      return;\n    }\n\n    this.resetInternalLoader(context.type);\n    if (typeof response.data !== 'string') {\n      throw new Error('expected responseType of \"text\" for PlaylistLoader');\n    }\n\n    const string = response.data;\n\n    stats.tload = performance.now();\n    // stats.mtime = new Date(target.getResponseHeader('Last-Modified'));\n\n    // Validate if it is an M3U8 at all\n    if (string.indexOf('#EXTM3U') !== 0) {\n      this._handleManifestParsingError(response, context, 'no EXTM3U delimiter', networkDetails);\n      return;\n    }\n\n    // Check if chunk-list or master. handle empty chunk list case (first EXTINF not signaled, but TARGETDURATION present)\n    if (string.indexOf('#EXTINF:') > 0 || string.indexOf('#EXT-X-TARGETDURATION:') > 0) {\n      this._handleTrackOrLevelPlaylist(response, stats, context, networkDetails);\n    } else {\n      this._handleMasterPlaylist(response, stats, context, networkDetails);\n    }\n  }\n\n  loaderror (response: LoaderResponse, context: PlaylistLoaderContext, networkDetails = null) {\n    this._handleNetworkError(context, networkDetails, false, response);\n  }\n\n  loadtimeout (stats: LoaderStats, context: PlaylistLoaderContext, networkDetails = null) {\n    this._handleNetworkError(context, networkDetails, true);\n  }\n\n  // TODO(typescript-config): networkDetails can currently be a XHR or Fetch impl,\n  // but with custom loaders it could be generic investigate this further when config is typed\n  _handleMasterPlaylist (response: LoaderResponse, stats: LoaderStats, context: PlaylistLoaderContext, networkDetails: unknown) {\n    const hls = this.hls;\n    const string = response.data;\n\n    const url = PlaylistLoader.getResponseUrl(response, context);\n\n    const levels = M3U8Parser.parseMasterPlaylist(string, url);\n    if (!levels.length) {\n      this._handleManifestParsingError(response, context, 'no level found in manifest', networkDetails);\n      return;\n    }\n\n    // multi level playlist, parse level info\n\n    const audioGroups = levels.map(level => ({\n      id: level.attrs.AUDIO,\n      codec: level.audioCodec\n    }));\n\n    let audioTracks = M3U8Parser.parseMasterPlaylistMedia(string, url, 'AUDIO', audioGroups);\n    let subtitles = M3U8Parser.parseMasterPlaylistMedia(string, url, 'SUBTITLES');\n    let captions = M3U8Parser.parseMasterPlaylistMedia(string, url, 'CLOSED-CAPTIONS');\n\n    if (audioTracks.length) {\n      // check if we have found an audio track embedded in main playlist (audio track without URI attribute)\n      let embeddedAudioFound = false;\n      audioTracks.forEach(audioTrack => {\n        if (!audioTrack.url) {\n          embeddedAudioFound = true;\n        }\n      });\n\n      // if no embedded audio track defined, but audio codec signaled in quality level,\n      // we need to signal this main audio track this could happen with playlists with\n      // alt audio rendition in which quality levels (main)\n      // contains both audio+video. but with mixed audio track not signaled\n      if (embeddedAudioFound === false && levels[0].audioCodec && !levels[0].attrs.AUDIO) {\n        logger.log('audio codec signaled in quality level, but no embedded audio track signaled, create one');\n        audioTracks.unshift({\n          type: 'main',\n          name: 'main'\n        });\n      }\n    }\n\n    hls.trigger(Event.MANIFEST_LOADED, {\n      levels,\n      audioTracks,\n      subtitles,\n      captions,\n      url,\n      stats,\n      networkDetails\n    });\n  }\n\n  _handleTrackOrLevelPlaylist (response: LoaderResponse, stats: LoaderStats, context: PlaylistLoaderContext, networkDetails: unknown) {\n    const hls = this.hls;\n\n    const { id, level, type } = context;\n\n    const url = PlaylistLoader.getResponseUrl(response, context);\n\n    // if the values are null, they will result in the else conditional\n    const levelUrlId = Number.isFinite(id as number) ? id : 0;\n    const levelId = Number.isFinite(level as number) ? level : levelUrlId;\n\n    const levelType = PlaylistLoader.mapContextToLevelType(context);\n    const levelDetails = M3U8Parser.parseLevelPlaylist(response.data, url, levelId, levelType, levelUrlId);\n\n    // set stats on level structure\n    // TODO(jstackhouse): why? mixing concerns, is it just treated as value bag?\n    (levelDetails as any).tload = stats.tload;\n\n    // We have done our first request (Manifest-type) and receive\n    // not a master playlist but a chunk-list (track/level)\n    // We fire the manifest-loaded event anyway with the parsed level-details\n    // by creating a single-level structure for it.\n    if (type === PlaylistContextType.MANIFEST) {\n      const singleLevel = {\n        url,\n        details: levelDetails\n      };\n\n      hls.trigger(Event.MANIFEST_LOADED, {\n        levels: [singleLevel],\n        audioTracks: [],\n        url,\n        stats,\n        networkDetails\n      });\n    }\n\n    // save parsing time\n    stats.tparsed = performance.now();\n\n    // in case we need SIDX ranges\n    // return early after calling load for\n    // the SIDX box.\n    if (levelDetails.needSidxRanges) {\n      const sidxUrl = levelDetails.initSegment.url;\n      this.load({\n        url: sidxUrl,\n        isSidxRequest: true,\n        type,\n        level,\n        levelDetails,\n        id,\n        rangeStart: 0,\n        rangeEnd: 2048,\n        responseType: 'arraybuffer'\n      });\n      return;\n    }\n\n    // extend the context with the new levelDetails property\n    context.levelDetails = levelDetails;\n\n    this._handlePlaylistLoaded(response, stats, context, networkDetails);\n  }\n\n  _handleSidxRequest (response: LoaderResponse, context: PlaylistLoaderContext) {\n    if (typeof response.data === 'string') {\n      throw new Error('sidx request must be made with responseType of array buffer');\n    }\n\n    const sidxInfo = MP4Demuxer.parseSegmentIndex(new Uint8Array(response.data));\n    // if provided fragment does not contain sidx, early return\n    if (!sidxInfo) {\n      return;\n    }\n    const sidxReferences = sidxInfo.references;\n    const levelDetails = context.levelDetails;\n    sidxReferences.forEach((segmentRef, index) => {\n      const segRefInfo = segmentRef.info;\n      if (!levelDetails) {\n        return;\n      }\n      const frag = levelDetails.fragments[index];\n      if (frag.byteRange.length === 0) {\n        frag.setByteRange(String(1 + segRefInfo.end - segRefInfo.start) + '@' + String(segRefInfo.start));\n      }\n    });\n\n    if (levelDetails) {\n      levelDetails.initSegment.setByteRange(String(sidxInfo.moovEndOffset) + '@0');\n    }\n  }\n\n  _handleManifestParsingError (response: LoaderResponse, context: PlaylistLoaderContext, reason: string, networkDetails: unknown) {\n    this.hls.trigger(Event.ERROR, {\n      type: ErrorTypes.NETWORK_ERROR,\n      details: ErrorDetails.MANIFEST_PARSING_ERROR,\n      fatal: true,\n      url: response.url,\n      reason,\n      networkDetails\n    });\n  }\n\n  _handleNetworkError (context: PlaylistLoaderContext, networkDetails: unknown, timeout: boolean = false, response: LoaderResponse | null = null) {\n    logger.info(`A network error occured while loading a ${context.type}-type playlist`);\n\n    let details;\n    let fatal;\n\n    const loader = this.getInternalLoader(context);\n\n    switch (context.type) {\n    case PlaylistContextType.MANIFEST:\n      details = (timeout ? ErrorDetails.MANIFEST_LOAD_TIMEOUT : ErrorDetails.MANIFEST_LOAD_ERROR);\n      fatal = true;\n      break;\n    case PlaylistContextType.LEVEL:\n      details = (timeout ? ErrorDetails.LEVEL_LOAD_TIMEOUT : ErrorDetails.LEVEL_LOAD_ERROR);\n      fatal = false;\n      break;\n    case PlaylistContextType.AUDIO_TRACK:\n      details = (timeout ? ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT : ErrorDetails.AUDIO_TRACK_LOAD_ERROR);\n      fatal = false;\n      break;\n    default:\n      // details = ...?\n      fatal = false;\n    }\n\n    if (loader) {\n      loader.abort();\n      this.resetInternalLoader(context.type);\n    }\n\n    // TODO(typescript-events): when error events are handled, type this\n    let errorData: any = {\n      type: ErrorTypes.NETWORK_ERROR,\n      details,\n      fatal,\n      url: context.url,\n      loader,\n      context,\n      networkDetails\n    };\n\n    if (response) {\n      errorData.response = response;\n    }\n\n    this.hls.trigger(Event.ERROR, errorData);\n  }\n\n  _handlePlaylistLoaded (response: LoaderResponse, stats: LoaderStats, context: PlaylistLoaderContext, networkDetails: unknown) {\n    const { type, level, id, levelDetails } = context;\n\n    if (!levelDetails || !levelDetails.targetduration) {\n      this._handleManifestParsingError(response, context, 'invalid target duration', networkDetails);\n      return;\n    }\n\n    const canHaveLevels = PlaylistLoader.canHaveQualityLevels(context.type);\n    if (canHaveLevels) {\n      this.hls.trigger(Event.LEVEL_LOADED, {\n        details: levelDetails,\n        level: level || 0,\n        id: id || 0,\n        stats,\n        networkDetails\n      });\n    } else {\n      switch (type) {\n      case PlaylistContextType.AUDIO_TRACK:\n        this.hls.trigger(Event.AUDIO_TRACK_LOADED, {\n          details: levelDetails,\n          id,\n          stats,\n          networkDetails\n        });\n        break;\n      case PlaylistContextType.SUBTITLE_TRACK:\n        this.hls.trigger(Event.SUBTITLE_TRACK_LOADED, {\n          details: levelDetails,\n          id,\n          stats,\n          networkDetails\n        });\n        break;\n      }\n    }\n  }\n}\n\nexport default PlaylistLoader;\n","/*\n * Fragment Loader\n*/\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport { logger } from '../utils/logger';\n\nclass FragmentLoader extends EventHandler {\n  constructor (hls) {\n    super(hls, Event.FRAG_LOADING);\n    this.loaders = {};\n  }\n\n  destroy () {\n    let loaders = this.loaders;\n    for (let loaderName in loaders) {\n      let loader = loaders[loaderName];\n      if (loader) {\n        loader.destroy();\n      }\n    }\n    this.loaders = {};\n\n    super.destroy();\n  }\n\n  onFragLoading (data) {\n    const frag = data.frag,\n      type = frag.type,\n      loaders = this.loaders,\n      config = this.hls.config,\n      FragmentILoader = config.fLoader,\n      DefaultILoader = config.loader;\n\n    // reset fragment state\n    frag.loaded = 0;\n\n    let loader = loaders[type];\n    if (loader) {\n      logger.warn(`abort previous fragment loader for type: ${type}`);\n      loader.abort();\n    }\n\n    loader = loaders[type] = frag.loader =\n      config.fLoader ? new FragmentILoader(config) : new DefaultILoader(config);\n\n    let loaderContext, loaderConfig, loaderCallbacks;\n\n    loaderContext = { url: frag.url, frag: frag, responseType: 'arraybuffer', progressData: false };\n\n    let start = frag.byteRangeStartOffset,\n      end = frag.byteRangeEndOffset;\n\n    if (Number.isFinite(start) && Number.isFinite(end)) {\n      loaderContext.rangeStart = start;\n      loaderContext.rangeEnd = end;\n    }\n\n    loaderConfig = {\n      timeout: config.fragLoadingTimeOut,\n      maxRetry: 0,\n      retryDelay: 0,\n      maxRetryDelay: config.fragLoadingMaxRetryTimeout\n    };\n\n    loaderCallbacks = {\n      onSuccess: this.loadsuccess.bind(this),\n      onError: this.loaderror.bind(this),\n      onTimeout: this.loadtimeout.bind(this),\n      onProgress: this.loadprogress.bind(this)\n    };\n\n    loader.load(loaderContext, loaderConfig, loaderCallbacks);\n  }\n\n  loadsuccess (response, stats, context, networkDetails = null) {\n    let payload = response.data, frag = context.frag;\n    // detach fragment loader on load success\n    frag.loader = undefined;\n    this.loaders[frag.type] = undefined;\n    this.hls.trigger(Event.FRAG_LOADED, { payload: payload, frag: frag, stats: stats, networkDetails: networkDetails });\n  }\n\n  loaderror (response, context, networkDetails = null) {\n    const frag = context.frag;\n    let loader = frag.loader;\n    if (loader) {\n      loader.abort();\n    }\n\n    this.loaders[frag.type] = undefined;\n    this.hls.trigger(Event.ERROR, { type: ErrorTypes.NETWORK_ERROR, details: ErrorDetails.FRAG_LOAD_ERROR, fatal: false, frag: context.frag, response: response, networkDetails: networkDetails });\n  }\n\n  loadtimeout (stats, context, networkDetails = null) {\n    const frag = context.frag;\n    let loader = frag.loader;\n    if (loader) {\n      loader.abort();\n    }\n\n    this.loaders[frag.type] = undefined;\n    this.hls.trigger(Event.ERROR, { type: ErrorTypes.NETWORK_ERROR, details: ErrorDetails.FRAG_LOAD_TIMEOUT, fatal: false, frag: context.frag, networkDetails: networkDetails });\n  }\n\n  // data will be used for progressive parsing\n  loadprogress (stats, context, data, networkDetails = null) { // jshint ignore:line\n    let frag = context.frag;\n    frag.loaded = stats.loaded;\n    this.hls.trigger(Event.FRAG_LOAD_PROGRESS, { frag: frag, stats: stats, networkDetails: networkDetails });\n  }\n}\n\nexport default FragmentLoader;\n","/*\n * Decrypt key Loader\n*/\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport { logger } from '../utils/logger';\n\nclass KeyLoader extends EventHandler {\n  constructor (hls) {\n    super(hls, Event.KEY_LOADING);\n    this.loaders = {};\n    this.decryptkey = null;\n    this.decrypturl = null;\n  }\n\n  destroy () {\n    for (let loaderName in this.loaders) {\n      let loader = this.loaders[loaderName];\n      if (loader) {\n        loader.destroy();\n      }\n    }\n    this.loaders = {};\n    EventHandler.prototype.destroy.call(this);\n  }\n\n  onKeyLoading (data) {\n    let frag = data.frag,\n      type = frag.type,\n      loader = this.loaders[type],\n      decryptdata = frag.decryptdata,\n      uri = decryptdata.uri;\n    // if uri is different from previous one or if decrypt key not retrieved yet\n    if (uri !== this.decrypturl || this.decryptkey === null) {\n      let config = this.hls.config;\n\n      if (loader) {\n        logger.warn(`abort previous key loader for type:${type}`);\n        loader.abort();\n      }\n      frag.loader = this.loaders[type] = new config.loader(config);\n      this.decrypturl = uri;\n      this.decryptkey = null;\n\n      let loaderContext, loaderConfig, loaderCallbacks;\n      loaderContext = { url: uri, frag: frag, responseType: 'arraybuffer' };\n      // maxRetry is 0 so that instead of retrying the same key on the same variant multiple times,\n      // key-loader will trigger an error and rely on stream-controller to handle retry logic.\n      // this will also align retry logic with fragment-loader\n      loaderConfig = { timeout: config.fragLoadingTimeOut, maxRetry: 0, retryDelay: config.fragLoadingRetryDelay, maxRetryDelay: config.fragLoadingMaxRetryTimeout };\n      loaderCallbacks = { onSuccess: this.loadsuccess.bind(this), onError: this.loaderror.bind(this), onTimeout: this.loadtimeout.bind(this) };\n      frag.loader.load(loaderContext, loaderConfig, loaderCallbacks);\n    } else if (this.decryptkey) {\n      // we already loaded this key, return it\n      decryptdata.key = this.decryptkey;\n      this.hls.trigger(Event.KEY_LOADED, { frag: frag });\n    }\n  }\n\n  loadsuccess (response, stats, context) {\n    let frag = context.frag;\n    this.decryptkey = frag.decryptdata.key = new Uint8Array(response.data);\n    // detach fragment loader on load success\n    frag.loader = undefined;\n    this.loaders[frag.type] = undefined;\n    this.hls.trigger(Event.KEY_LOADED, { frag: frag });\n  }\n\n  loaderror (response, context) {\n    let frag = context.frag,\n      loader = frag.loader;\n    if (loader) {\n      loader.abort();\n    }\n\n    this.loaders[context.type] = undefined;\n    this.hls.trigger(Event.ERROR, { type: ErrorTypes.NETWORK_ERROR, details: ErrorDetails.KEY_LOAD_ERROR, fatal: false, frag: frag, response: response });\n  }\n\n  loadtimeout (stats, context) {\n    let frag = context.frag,\n      loader = frag.loader;\n    if (loader) {\n      loader.abort();\n    }\n\n    this.loaders[context.type] = undefined;\n    this.hls.trigger(Event.ERROR, { type: ErrorTypes.NETWORK_ERROR, details: ErrorDetails.KEY_LOAD_TIMEOUT, fatal: false, frag: frag });\n  }\n}\n\nexport default KeyLoader;\n","import EventHandler from '../event-handler';\nimport Event from '../events';\n\nexport const FragmentState = {\n  NOT_LOADED: 'NOT_LOADED',\n  APPENDING: 'APPENDING',\n  PARTIAL: 'PARTIAL',\n  OK: 'OK'\n};\n\nexport class FragmentTracker extends EventHandler {\n  constructor (hls) {\n    super(hls,\n      Event.BUFFER_APPENDED,\n      Event.FRAG_BUFFERED,\n      Event.FRAG_LOADED\n    );\n\n    this.bufferPadding = 0.2;\n\n    this.fragments = Object.create(null);\n    this.timeRanges = Object.create(null);\n\n    this.config = hls.config;\n  }\n\n  destroy () {\n    this.fragments = Object.create(null);\n    this.timeRanges = Object.create(null);\n    this.config = null;\n    EventHandler.prototype.destroy.call(this);\n    super.destroy();\n  }\n\n  /**\n   * Return a Fragment that match the position and levelType.\n   * If not found any Fragment, return null\n   * @param {number} position\n   * @param {LevelType} levelType\n   * @returns {Fragment|null}\n   */\n  getBufferedFrag (position, levelType) {\n    const fragments = this.fragments;\n    const bufferedFrags = Object.keys(fragments).filter(key => {\n      const fragmentEntity = fragments[key];\n      if (fragmentEntity.body.type !== levelType) {\n        return false;\n      }\n\n      if (!fragmentEntity.buffered) {\n        return false;\n      }\n\n      const frag = fragmentEntity.body;\n      return frag.startPTS <= position && position <= frag.endPTS;\n    });\n    if (bufferedFrags.length === 0) {\n      return null;\n    } else {\n      // https://github.com/video-dev/hls.js/pull/1545#discussion_r166229566\n      const bufferedFragKey = bufferedFrags.pop();\n      return fragments[bufferedFragKey].body;\n    }\n  }\n\n  /**\n   * Partial fragments effected by coded frame eviction will be removed\n   * The browser will unload parts of the buffer to free up memory for new buffer data\n   * Fragments will need to be reloaded when the buffer is freed up, removing partial fragments will allow them to reload(since there might be parts that are still playable)\n   * @param {String} elementaryStream The elementaryStream of media this is (eg. video/audio)\n   * @param {TimeRanges} timeRange TimeRange object from a sourceBuffer\n   */\n  detectEvictedFragments (elementaryStream, timeRange) {\n    let fragmentTimes, time;\n    // Check if any flagged fragments have been unloaded\n    Object.keys(this.fragments).forEach(key => {\n      const fragmentEntity = this.fragments[key];\n      if (fragmentEntity.buffered === true) {\n        const esData = fragmentEntity.range[elementaryStream];\n        if (esData) {\n          fragmentTimes = esData.time;\n          for (let i = 0; i < fragmentTimes.length; i++) {\n            time = fragmentTimes[i];\n\n            if (this.isTimeBuffered(time.startPTS, time.endPTS, timeRange) === false) {\n              // Unregister partial fragment as it needs to load again to be reused\n              this.removeFragment(fragmentEntity.body);\n              break;\n            }\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Checks if the fragment passed in is loaded in the buffer properly\n   * Partially loaded fragments will be registered as a partial fragment\n   * @param {Object} fragment Check the fragment against all sourceBuffers loaded\n   */\n  detectPartialFragments (fragment) {\n    let fragKey = this.getFragmentKey(fragment);\n    let fragmentEntity = this.fragments[fragKey];\n    if (fragmentEntity) {\n      fragmentEntity.buffered = true;\n\n      Object.keys(this.timeRanges).forEach(elementaryStream => {\n        if (fragment.hasElementaryStream(elementaryStream)) {\n          let timeRange = this.timeRanges[elementaryStream];\n          // Check for malformed fragments\n          // Gaps need to be calculated for each elementaryStream\n          fragmentEntity.range[elementaryStream] = this.getBufferedTimes(fragment.startPTS, fragment.endPTS, timeRange);\n        }\n      });\n    }\n  }\n\n  getBufferedTimes (startPTS, endPTS, timeRange) {\n    let fragmentTimes = [];\n    let startTime, endTime;\n    let fragmentPartial = false;\n    for (let i = 0; i < timeRange.length; i++) {\n      startTime = timeRange.start(i) - this.bufferPadding;\n      endTime = timeRange.end(i) + this.bufferPadding;\n      if (startPTS >= startTime && endPTS <= endTime) {\n        // Fragment is entirely contained in buffer\n        // No need to check the other timeRange times since it's completely playable\n        fragmentTimes.push({\n          startPTS: Math.max(startPTS, timeRange.start(i)),\n          endPTS: Math.min(endPTS, timeRange.end(i))\n        });\n        break;\n      } else if (startPTS < endTime && endPTS > startTime) {\n        // Check for intersection with buffer\n        // Get playable sections of the fragment\n        fragmentTimes.push({\n          startPTS: Math.max(startPTS, timeRange.start(i)),\n          endPTS: Math.min(endPTS, timeRange.end(i))\n        });\n        fragmentPartial = true;\n      } else if (endPTS <= startTime) {\n        // No need to check the rest of the timeRange as it is in order\n        break;\n      }\n    }\n\n    return {\n      time: fragmentTimes,\n      partial: fragmentPartial\n    };\n  }\n\n  getFragmentKey (fragment) {\n    return `${fragment.type}_${fragment.level}_${fragment.urlId}_${fragment.sn}`;\n  }\n\n  /**\n   * Gets the partial fragment for a certain time\n   * @param {Number} time\n   * @returns {Object} fragment Returns a partial fragment at a time or null if there is no partial fragment\n   */\n  getPartialFragment (time) {\n    let timePadding, startTime, endTime;\n    let bestFragment = null;\n    let bestOverlap = 0;\n    Object.keys(this.fragments).forEach(key => {\n      const fragmentEntity = this.fragments[key];\n      if (this.isPartial(fragmentEntity)) {\n        startTime = fragmentEntity.body.startPTS - this.bufferPadding;\n        endTime = fragmentEntity.body.endPTS + this.bufferPadding;\n        if (time >= startTime && time <= endTime) {\n          // Use the fragment that has the most padding from start and end time\n          timePadding = Math.min(time - startTime, endTime - time);\n          if (bestOverlap <= timePadding) {\n            bestFragment = fragmentEntity.body;\n            bestOverlap = timePadding;\n          }\n        }\n      }\n    });\n    return bestFragment;\n  }\n\n  /**\n   * @param {Object} fragment The fragment to check\n   * @returns {String} Returns the fragment state when a fragment never loaded or if it partially loaded\n   */\n  getState (fragment) {\n    let fragKey = this.getFragmentKey(fragment);\n    let fragmentEntity = this.fragments[fragKey];\n    let state = FragmentState.NOT_LOADED;\n\n    if (fragmentEntity !== undefined) {\n      if (!fragmentEntity.buffered) {\n        state = FragmentState.APPENDING;\n      } else if (this.isPartial(fragmentEntity) === true) {\n        state = FragmentState.PARTIAL;\n      } else {\n        state = FragmentState.OK;\n      }\n    }\n\n    return state;\n  }\n\n  isPartial (fragmentEntity) {\n    return fragmentEntity.buffered === true &&\n      ((fragmentEntity.range.video !== undefined && fragmentEntity.range.video.partial === true) ||\n        (fragmentEntity.range.audio !== undefined && fragmentEntity.range.audio.partial === true));\n  }\n\n  isTimeBuffered (startPTS, endPTS, timeRange) {\n    let startTime, endTime;\n    for (let i = 0; i < timeRange.length; i++) {\n      startTime = timeRange.start(i) - this.bufferPadding;\n      endTime = timeRange.end(i) + this.bufferPadding;\n      if (startPTS >= startTime && endPTS <= endTime) {\n        return true;\n      }\n\n      if (endPTS <= startTime) {\n        // No need to check the rest of the timeRange as it is in order\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Fires when a fragment loading is completed\n   */\n  onFragLoaded (e) {\n    const fragment = e.frag;\n    // don't track initsegment (for which sn is not a number)\n    // don't track frags used for bitrateTest, they're irrelevant.\n    if (!Number.isFinite(fragment.sn) || fragment.bitrateTest) {\n      return;\n    }\n\n    this.fragments[this.getFragmentKey(fragment)] = {\n      body: fragment,\n      range: Object.create(null),\n      buffered: false\n    };\n  }\n\n  /**\n   * Fires when the buffer is updated\n   */\n  onBufferAppended (e) {\n    // Store the latest timeRanges loaded in the buffer\n    this.timeRanges = e.timeRanges;\n    Object.keys(this.timeRanges).forEach(elementaryStream => {\n      let timeRange = this.timeRanges[elementaryStream];\n      this.detectEvictedFragments(elementaryStream, timeRange);\n    });\n  }\n\n  /**\n   * Fires after a fragment has been loaded into the source buffer\n   */\n  onFragBuffered (e) {\n    this.detectPartialFragments(e.frag);\n  }\n\n  /**\n   * Return true if fragment tracker has the fragment.\n   * @param {Object} fragment\n   * @returns {boolean}\n   */\n  hasFragment (fragment) {\n    const fragKey = this.getFragmentKey(fragment);\n    return this.fragments[fragKey] !== undefined;\n  }\n\n  /**\n   * Remove a fragment from fragment tracker until it is loaded again\n   * @param {Object} fragment The fragment to remove\n   */\n  removeFragment (fragment) {\n    let fragKey = this.getFragmentKey(fragment);\n    delete this.fragments[fragKey];\n  }\n\n  /**\n   * Remove all fragments from fragment tracker.\n   */\n  removeAllFragments () {\n    this.fragments = Object.create(null);\n  }\n}\n","type BinarySearchComparison < T > = (candidate: T) => -1 | 0 | 1;\n\nconst BinarySearch = {\n\n  /**\n   * Searches for an item in an array which matches a certain condition.\n   * This requires the condition to only match one item in the array,\n   * and for the array to be ordered.\n   *\n   * @param {Array<T>} list The array to search.\n   * @param {BinarySearchComparison<T>} comparisonFn\n   *      Called and provided a candidate item as the first argument.\n   *      Should return:\n   *          > -1 if the item should be located at a lower index than the provided item.\n   *          > 1 if the item should be located at a higher index than the provided item.\n   *          > 0 if the item is the item you're looking for.\n   *\n   * @return {T | null} The object if it is found or null otherwise.\n   */\n  search: function<T> (list: T[], comparisonFn: BinarySearchComparison<T>): T | null {\n    let minIndex: number = 0;\n    let maxIndex: number = list.length - 1;\n    let currentIndex: number | null = null;\n    let currentElement: T | null = null;\n\n    while (minIndex <= maxIndex) {\n      currentIndex = (minIndex + maxIndex) / 2 | 0;\n      currentElement = list[currentIndex];\n\n      let comparisonResult = comparisonFn(currentElement);\n      if (comparisonResult > 0) {\n        minIndex = currentIndex + 1;\n      } else if (comparisonResult < 0) {\n        maxIndex = currentIndex - 1;\n      } else {\n        return currentElement;\n      }\n    }\n\n    return null;\n  }\n};\n\nexport default BinarySearch;\n","/**\n * @module BufferHelper\n *\n * Providing methods dealing with buffer length retrieval for example.\n *\n * In general, a helper around HTML5 MediaElement TimeRanges gathered from `buffered` property.\n *\n * Also @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered\n*/\n\ntype BufferTimeRange = {\n  start: number\n  end: number\n};\n\ntype Bufferable = {\n  buffered: TimeRanges\n};\n\nexport class BufferHelper {\n  /**\n   * Return true if `media`'s buffered include `position`\n   * @param {Bufferable} media\n   * @param {number} position\n   * @returns {boolean}\n   */\n  static isBuffered (media: Bufferable, position: number): boolean {\n    try {\n      if (media) {\n        let buffered = media.buffered;\n        for (let i = 0; i < buffered.length; i++) {\n          if (position >= buffered.start(i) && position <= buffered.end(i)) {\n            return true;\n          }\n        }\n      }\n    } catch (error) {\n      // this is to catch\n      // InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':\n      // This SourceBuffer has been removed from the parent media source\n    }\n    return false;\n  }\n\n  static bufferInfo (\n    media: Bufferable,\n    pos: number,\n    maxHoleDuration: number\n  ): {\n    len: number,\n    start: number,\n    end: number,\n    nextStart?: number,\n  } {\n    try {\n      if (media) {\n        let vbuffered = media.buffered;\n        let buffered: BufferTimeRange[] = [];\n        let i: number;\n        for (i = 0; i < vbuffered.length; i++) {\n          buffered.push({ start: vbuffered.start(i), end: vbuffered.end(i) });\n        }\n\n        return this.bufferedInfo(buffered, pos, maxHoleDuration);\n      }\n    } catch (error) {\n      // this is to catch\n      // InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':\n      // This SourceBuffer has been removed from the parent media source\n    }\n    return { len: 0, start: pos, end: pos, nextStart: undefined };\n  }\n\n  static bufferedInfo (\n    buffered: BufferTimeRange[],\n    pos: number,\n    maxHoleDuration: number\n  ): {\n    len: number,\n    start: number,\n    end: number,\n    nextStart?: number,\n  } {\n    // sort on buffer.start/smaller end (IE does not always return sorted buffered range)\n    buffered.sort(function (a, b) {\n      let diff = a.start - b.start;\n      if (diff) {\n        return diff;\n      } else {\n        return b.end - a.end;\n      }\n    });\n\n    let buffered2: BufferTimeRange[] = [];\n    // there might be some small holes between buffer time range\n    // consider that holes smaller than maxHoleDuration are irrelevant and build another\n    // buffer time range representations that discards those holes\n    for (let i = 0; i < buffered.length; i++) {\n      let buf2len = buffered2.length;\n      if (buf2len) {\n        let buf2end = buffered2[buf2len - 1].end;\n        // if small hole (value between 0 or maxHoleDuration ) or overlapping (negative)\n        if ((buffered[i].start - buf2end) < maxHoleDuration) {\n          // merge overlapping time ranges\n          // update lastRange.end only if smaller than item.end\n          // e.g.  [ 1, 15] with  [ 2,8] => [ 1,15] (no need to modify lastRange.end)\n          // whereas [ 1, 8] with  [ 2,15] => [ 1,15] ( lastRange should switch from [1,8] to [1,15])\n          if (buffered[i].end > buf2end) {\n            buffered2[buf2len - 1].end = buffered[i].end;\n          }\n        } else {\n          // big hole\n          buffered2.push(buffered[i]);\n        }\n      } else {\n        // first value\n        buffered2.push(buffered[i]);\n      }\n    }\n\n    let bufferLen = 0;\n\n    // bufferStartNext can possibly be undefined based on the conditional logic below\n    let bufferStartNext: number | undefined;\n\n    // bufferStart and bufferEnd are buffer boundaries around current video position\n    let bufferStart: number = pos;\n    let bufferEnd: number = pos;\n    for (let i = 0; i < buffered2.length; i++) {\n      let start = buffered2[i].start,\n        end = buffered2[i].end;\n      // logger.log('buf start/end:' + buffered.start(i) + '/' + buffered.end(i));\n      if ((pos + maxHoleDuration) >= start && pos < end) {\n        // play position is inside this buffer TimeRange, retrieve end of buffer position and buffer length\n        bufferStart = start;\n        bufferEnd = end;\n        bufferLen = bufferEnd - pos;\n      } else if ((pos + maxHoleDuration) < start) {\n        bufferStartNext = start;\n        break;\n      }\n    }\n    return { len: bufferLen, start: bufferStart, end: bufferEnd, nextStart: bufferStartNext };\n  }\n}\n","/**\n * MediaSource helper\n */\n\nexport function getMediaSource (): typeof MediaSource {\n  return MediaSource || (window as any).WebKitMediaSource;\n}\n","import { EventEmitter } from 'eventemitter3';\n\n/**\n * Simple adapter sub-class of Nodejs-like EventEmitter.\n */\nexport class Observer extends EventEmitter {\n  /**\n   * We simply want to pass along the event-name itself\n   * in every call to a handler, which is the purpose of our `trigger` method\n   * extending the standard API.\n   */\n  trigger (event: string, ...data: Array<any>): void {\n    this.emit(event, event, ...data);\n  }\n}\n","import { EventEmitter } from 'eventemitter3';\nimport * as work from 'webworkify-webpack';\n\nimport Event from '../events';\nimport DemuxerInline from '../demux/demuxer-inline';\nimport { logger } from '../utils/logger';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport { getMediaSource } from '../utils/mediasource-helper';\nimport { getSelfScope } from '../utils/get-self-scope';\n\nimport { Observer } from '../observer';\n\n// see https://stackoverflow.com/a/11237259/589493\nconst global = getSelfScope(); // safeguard for code that might run both on worker and main thread\nconst MediaSource = getMediaSource();\n\nclass Demuxer {\n  constructor (hls, id) {\n    this.hls = hls;\n    this.id = id;\n\n    const observer = this.observer = new Observer();\n    const config = hls.config;\n\n    const forwardMessage = (ev, data) => {\n      data = data || {};\n      data.frag = this.frag;\n      data.id = this.id;\n      hls.trigger(ev, data);\n    };\n\n    // forward events to main thread\n    observer.on(Event.FRAG_DECRYPTED, forwardMessage);\n    observer.on(Event.FRAG_PARSING_INIT_SEGMENT, forwardMessage);\n    observer.on(Event.FRAG_PARSING_DATA, forwardMessage);\n    observer.on(Event.FRAG_PARSED, forwardMessage);\n    observer.on(Event.ERROR, forwardMessage);\n    observer.on(Event.FRAG_PARSING_METADATA, forwardMessage);\n    observer.on(Event.FRAG_PARSING_USERDATA, forwardMessage);\n    observer.on(Event.INIT_PTS_FOUND, forwardMessage);\n\n    const typeSupported = {\n      mp4: MediaSource.isTypeSupported('video/mp4'),\n      mpeg: MediaSource.isTypeSupported('audio/mpeg'),\n      mp3: MediaSource.isTypeSupported('audio/mp4; codecs=\"mp3\"')\n    };\n    // navigator.vendor is not always available in Web Worker\n    // refer to https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator\n    const vendor = navigator.vendor;\n    if (config.enableWorker && (typeof (Worker) !== 'undefined')) {\n      logger.log('demuxing in webworker');\n      let w;\n      try {\n        w = this.w = work(require.resolve('../demux/demuxer-worker.js'));\n        this.onwmsg = this.onWorkerMessage.bind(this);\n        w.addEventListener('message', this.onwmsg);\n        w.onerror = function (event) {\n          hls.trigger(Event.ERROR, { type: ErrorTypes.OTHER_ERROR, details: ErrorDetails.INTERNAL_EXCEPTION, fatal: true, event: 'demuxerWorker', err: { message: event.message + ' (' + event.filename + ':' + event.lineno + ')' } });\n        };\n        w.postMessage({ cmd: 'init', typeSupported: typeSupported, vendor: vendor, id: id, config: JSON.stringify(config) });\n      } catch (err) {\n        logger.warn('Error in worker:', err);\n        logger.error('Error while initializing DemuxerWorker, fallback on DemuxerInline');\n        if (w) {\n          // revoke the Object URL that was used to create demuxer worker, so as not to leak it\n          global.URL.revokeObjectURL(w.objectURL);\n        }\n        this.demuxer = new DemuxerInline(observer, typeSupported, config, vendor);\n        this.w = undefined;\n      }\n    } else {\n      this.demuxer = new DemuxerInline(observer, typeSupported, config, vendor);\n    }\n  }\n\n  destroy () {\n    let w = this.w;\n    if (w) {\n      w.removeEventListener('message', this.onwmsg);\n      w.terminate();\n      this.w = null;\n    } else {\n      let demuxer = this.demuxer;\n      if (demuxer) {\n        demuxer.destroy();\n        this.demuxer = null;\n      }\n    }\n    const observer = this.observer;\n    if (observer) {\n      observer.removeAllListeners();\n      this.observer = null;\n    }\n  }\n\n  push (data, initSegment, audioCodec, videoCodec, frag, duration, accurateTimeOffset, defaultInitPTS) {\n    const w = this.w;\n    const timeOffset = Number.isFinite(frag.startPTS) ? frag.startPTS : frag.start;\n    const decryptdata = frag.decryptdata;\n    const lastFrag = this.frag;\n    const discontinuity = !(lastFrag && (frag.cc === lastFrag.cc));\n    const trackSwitch = !(lastFrag && (frag.level === lastFrag.level));\n    const nextSN = lastFrag && (frag.sn === (lastFrag.sn + 1));\n    const contiguous = !trackSwitch && nextSN;\n    if (discontinuity) {\n      logger.log(`${this.id}:discontinuity detected`);\n    }\n\n    if (trackSwitch) {\n      logger.log(`${this.id}:switch detected`);\n    }\n\n    this.frag = frag;\n    if (w) {\n      // post fragment payload as transferable objects for ArrayBuffer (no copy)\n      w.postMessage({ cmd: 'demux', data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS }, data instanceof ArrayBuffer ? [data] : []);\n    } else {\n      let demuxer = this.demuxer;\n      if (demuxer) {\n        demuxer.push(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);\n      }\n    }\n  }\n\n  onWorkerMessage (ev) {\n    let data = ev.data,\n      hls = this.hls;\n    switch (data.event) {\n    case 'init':\n      // revoke the Object URL that was used to create demuxer worker, so as not to leak it\n      global.URL.revokeObjectURL(this.w.objectURL);\n      break;\n      // special case for FRAG_PARSING_DATA: data1 and data2 are transferable objects\n    case Event.FRAG_PARSING_DATA:\n      data.data.data1 = new Uint8Array(data.data1);\n      if (data.data2) {\n        data.data.data2 = new Uint8Array(data.data2);\n      }\n\n      /* falls through */\n    default:\n      data.data = data.data || {};\n      data.data.frag = this.frag;\n      data.data.id = this.id;\n      hls.trigger(data.event, data.data);\n      break;\n    }\n  }\n}\n\nexport default Demuxer;\n","/**\n * @module LevelHelper\n *\n * Providing methods dealing with playlist sliding and drift\n *\n * TODO: Create an actual `Level` class/model that deals with all this logic in an object-oriented-manner.\n *\n * */\n\nimport { logger } from '../utils/logger';\n\nexport function addGroupId (level, type, id) {\n  switch (type) {\n  case 'audio':\n    if (!level.audioGroupIds) {\n      level.audioGroupIds = [];\n    }\n    level.audioGroupIds.push(id);\n    break;\n  case 'text':\n    if (!level.textGroupIds) {\n      level.textGroupIds = [];\n    }\n    level.textGroupIds.push(id);\n    break;\n  }\n}\n\nexport function updatePTS (fragments, fromIdx, toIdx) {\n  let fragFrom = fragments[fromIdx], fragTo = fragments[toIdx], fragToPTS = fragTo.startPTS;\n  // if we know startPTS[toIdx]\n  if (Number.isFinite(fragToPTS)) {\n    // update fragment duration.\n    // it helps to fix drifts between playlist reported duration and fragment real duration\n    if (toIdx > fromIdx) {\n      fragFrom.duration = fragToPTS - fragFrom.start;\n      if (fragFrom.duration < 0) {\n        logger.warn(`negative duration computed for frag ${fragFrom.sn},level ${fragFrom.level}, there should be some duration drift between playlist and fragment!`);\n      }\n    } else {\n      fragTo.duration = fragFrom.start - fragToPTS;\n      if (fragTo.duration < 0) {\n        logger.warn(`negative duration computed for frag ${fragTo.sn},level ${fragTo.level}, there should be some duration drift between playlist and fragment!`);\n      }\n    }\n  } else {\n    // we dont know startPTS[toIdx]\n    if (toIdx > fromIdx) {\n      fragTo.start = fragFrom.start + fragFrom.duration;\n    } else {\n      fragTo.start = Math.max(fragFrom.start - fragTo.duration, 0);\n    }\n  }\n}\n\nexport function updateFragPTSDTS (details, frag, startPTS, endPTS, startDTS, endDTS) {\n  // update frag PTS/DTS\n  let maxStartPTS = startPTS;\n  if (Number.isFinite(frag.startPTS)) {\n    // delta PTS between audio and video\n    let deltaPTS = Math.abs(frag.startPTS - startPTS);\n    if (!Number.isFinite(frag.deltaPTS)) {\n      frag.deltaPTS = deltaPTS;\n    } else {\n      frag.deltaPTS = Math.max(deltaPTS, frag.deltaPTS);\n    }\n\n    maxStartPTS = Math.max(startPTS, frag.startPTS);\n    startPTS = Math.min(startPTS, frag.startPTS);\n    endPTS = Math.max(endPTS, frag.endPTS);\n    startDTS = Math.min(startDTS, frag.startDTS);\n    endDTS = Math.max(endDTS, frag.endDTS);\n  }\n\n  const drift = startPTS - frag.start;\n  frag.start = frag.startPTS = startPTS;\n  frag.maxStartPTS = maxStartPTS;\n  frag.endPTS = endPTS;\n  frag.startDTS = startDTS;\n  frag.endDTS = endDTS;\n  frag.duration = endPTS - startPTS;\n\n  const sn = frag.sn;\n  // exit if sn out of range\n  if (!details || sn < details.startSN || sn > details.endSN) {\n    return 0;\n  }\n\n  let fragIdx, fragments, i;\n  fragIdx = sn - details.startSN;\n  fragments = details.fragments;\n  // update frag reference in fragments array\n  // rationale is that fragments array might not contain this frag object.\n  // this will happen if playlist has been refreshed between frag loading and call to updateFragPTSDTS()\n  // if we don't update frag, we won't be able to propagate PTS info on the playlist\n  // resulting in invalid sliding computation\n  fragments[fragIdx] = frag;\n  // adjust fragment PTS/duration from seqnum-1 to frag 0\n  for (i = fragIdx; i > 0; i--) {\n    updatePTS(fragments, i, i - 1);\n  }\n\n  // adjust fragment PTS/duration from seqnum to last frag\n  for (i = fragIdx; i < fragments.length - 1; i++) {\n    updatePTS(fragments, i, i + 1);\n  }\n\n  details.PTSKnown = true;\n  return drift;\n}\n\nexport function mergeDetails (oldDetails, newDetails) {\n  // potentially retrieve cached initsegment\n  if (newDetails.initSegment && oldDetails.initSegment) {\n    newDetails.initSegment = oldDetails.initSegment;\n  }\n\n  // check if old/new playlists have fragments in common\n  // loop through overlapping SN and update startPTS , cc, and duration if any found\n  let ccOffset = 0;\n  let PTSFrag;\n  mapFragmentIntersection(oldDetails, newDetails, (oldFrag, newFrag) => {\n    ccOffset = oldFrag.cc - newFrag.cc;\n    if (Number.isFinite(oldFrag.startPTS)) {\n      newFrag.start = newFrag.startPTS = oldFrag.startPTS;\n      newFrag.endPTS = oldFrag.endPTS;\n      newFrag.duration = oldFrag.duration;\n      newFrag.backtracked = oldFrag.backtracked;\n      newFrag.dropped = oldFrag.dropped;\n      PTSFrag = newFrag;\n    }\n    // PTS is known when there are overlapping segments\n    newDetails.PTSKnown = true;\n  });\n\n  if (!newDetails.PTSKnown) {\n    return;\n  }\n\n  if (ccOffset) {\n    logger.log('discontinuity sliding from playlist, take drift into account');\n    const newFragments = newDetails.fragments;\n    for (let i = 0; i < newFragments.length; i++) {\n      newFragments[i].cc += ccOffset;\n    }\n  }\n\n  // if at least one fragment contains PTS info, recompute PTS information for all fragments\n  if (PTSFrag) {\n    updateFragPTSDTS(newDetails, PTSFrag, PTSFrag.startPTS, PTSFrag.endPTS, PTSFrag.startDTS, PTSFrag.endDTS);\n  } else {\n    // ensure that delta is within oldFragments range\n    // also adjust sliding in case delta is 0 (we could have old=[50-60] and new=old=[50-61])\n    // in that case we also need to adjust start offset of all fragments\n    adjustSliding(oldDetails, newDetails);\n  }\n  // if we are here, it means we have fragments overlapping between\n  // old and new level. reliable PTS info is thus relying on old level\n  newDetails.PTSKnown = oldDetails.PTSKnown;\n}\n\nexport function mergeSubtitlePlaylists (oldPlaylist, newPlaylist, referenceStart = 0) {\n  let lastIndex = -1;\n  mapFragmentIntersection(oldPlaylist, newPlaylist, (oldFrag, newFrag, index) => {\n    newFrag.start = oldFrag.start;\n    lastIndex = index;\n  });\n\n  const frags = newPlaylist.fragments;\n  if (lastIndex < 0) {\n    frags.forEach(frag => {\n      frag.start += referenceStart;\n    });\n    return;\n  }\n\n  for (let i = lastIndex + 1; i < frags.length; i++) {\n    frags[i].start = (frags[i - 1].start + frags[i - 1].duration);\n  }\n}\n\nexport function mapFragmentIntersection (oldPlaylist, newPlaylist, intersectionFn) {\n  if (!oldPlaylist || !newPlaylist) {\n    return;\n  }\n\n  const start = Math.max(oldPlaylist.startSN, newPlaylist.startSN) - newPlaylist.startSN;\n  const end = Math.min(oldPlaylist.endSN, newPlaylist.endSN) - newPlaylist.startSN;\n  const delta = newPlaylist.startSN - oldPlaylist.startSN;\n\n  for (let i = start; i <= end; i++) {\n    const oldFrag = oldPlaylist.fragments[delta + i];\n    const newFrag = newPlaylist.fragments[i];\n    if (!oldFrag || !newFrag) {\n      break;\n    }\n    intersectionFn(oldFrag, newFrag, i);\n  }\n}\n\nexport function adjustSliding (oldPlaylist, newPlaylist) {\n  const delta = newPlaylist.startSN - oldPlaylist.startSN;\n  const oldFragments = oldPlaylist.fragments;\n  const newFragments = newPlaylist.fragments;\n\n  if (delta < 0 || delta > oldFragments.length) {\n    return;\n  }\n  for (let i = 0; i < newFragments.length; i++) {\n    newFragments[i].start += oldFragments[delta].start;\n  }\n}\n\nexport function computeReloadInterval (currentPlaylist, newPlaylist, lastRequestTime) {\n  let reloadInterval = 1000 * (newPlaylist.averagetargetduration ? newPlaylist.averagetargetduration : newPlaylist.targetduration);\n  const minReloadInterval = reloadInterval / 2;\n  if (currentPlaylist && newPlaylist.endSN === currentPlaylist.endSN) {\n    // follow HLS Spec, If the client reloads a Playlist file and finds that it has not\n    // changed then it MUST wait for a period of one-half the target\n    // duration before retrying.\n    reloadInterval = minReloadInterval;\n  }\n\n  if (lastRequestTime) {\n    reloadInterval = Math.max(minReloadInterval, reloadInterval - (window.performance.now() - lastRequestTime));\n  }\n  // in any case, don't reload more than half of target duration\n  return Math.round(reloadInterval);\n}\n","/**\n *  TimeRanges to string helper\n */\n\nconst TimeRanges = {\n  toString: function (r) {\n    let log = '', len = r.length;\n    for (let i = 0; i < len; i++) {\n      log += '[' + r.start(i).toFixed(3) + ',' + r.end(i).toFixed(3) + ']';\n    }\n\n    return log;\n  }\n};\n\nexport default TimeRanges;\n","import BinarySearch from './binary-search';\nimport { logger } from '../utils/logger';\n\nexport function findFirstFragWithCC (fragments, cc) {\n  let firstFrag = null;\n\n  for (let i = 0; i < fragments.length; i += 1) {\n    const currentFrag = fragments[i];\n    if (currentFrag && currentFrag.cc === cc) {\n      firstFrag = currentFrag;\n      break;\n    }\n  }\n\n  return firstFrag;\n}\n\nexport function findFragWithCC (fragments, CC) {\n  return BinarySearch.search(fragments, (candidate) => {\n    if (candidate.cc < CC) {\n      return 1;\n    } else if (candidate.cc > CC) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n}\n\nexport function shouldAlignOnDiscontinuities (lastFrag, lastLevel, details) {\n  let shouldAlign = false;\n  if (lastLevel && lastLevel.details && details) {\n    if (details.endCC > details.startCC || (lastFrag && lastFrag.cc < details.startCC)) {\n      shouldAlign = true;\n    }\n  }\n  return shouldAlign;\n}\n\n// Find the first frag in the previous level which matches the CC of the first frag of the new level\nexport function findDiscontinuousReferenceFrag (prevDetails, curDetails) {\n  const prevFrags = prevDetails.fragments;\n  const curFrags = curDetails.fragments;\n\n  if (!curFrags.length || !prevFrags.length) {\n    logger.log('No fragments to align');\n    return;\n  }\n\n  const prevStartFrag = findFirstFragWithCC(prevFrags, curFrags[0].cc);\n\n  if (!prevStartFrag || (prevStartFrag && !prevStartFrag.startPTS)) {\n    logger.log('No frag in previous level to align on');\n    return;\n  }\n\n  return prevStartFrag;\n}\n\nexport function adjustPts (sliding, details) {\n  details.fragments.forEach((frag) => {\n    if (frag) {\n      let start = frag.start + sliding;\n      frag.start = frag.startPTS = start;\n      frag.endPTS = start + frag.duration;\n    }\n  });\n  details.PTSKnown = true;\n}\n\n/**\n * Using the parameters of the last level, this function computes PTS' of the new fragments so that they form a\n * contiguous stream with the last fragments.\n * The PTS of a fragment lets Hls.js know where it fits into a stream - by knowing every PTS, we know which fragment to\n * download at any given time. PTS is normally computed when the fragment is demuxed, so taking this step saves us time\n * and an extra download.\n * @param lastFrag\n * @param lastLevel\n * @param details\n */\nexport function alignStream (lastFrag, lastLevel, details) {\n  alignDiscontinuities(lastFrag, details, lastLevel);\n  if (!details.PTSKnown && lastLevel) {\n    // If the PTS wasn't figured out via discontinuity sequence that means there was no CC increase within the level.\n    // Aligning via Program Date Time should therefore be reliable, since PDT should be the same within the same\n    // discontinuity sequence.\n    alignPDT(details, lastLevel.details);\n  }\n}\n\n/**\n * Computes the PTS if a new level's fragments using the PTS of a fragment in the last level which shares the same\n * discontinuity sequence.\n * @param lastLevel - The details of the last loaded level\n * @param details - The details of the new level\n */\nexport function alignDiscontinuities (lastFrag, details, lastLevel) {\n  if (shouldAlignOnDiscontinuities(lastFrag, lastLevel, details)) {\n    const referenceFrag = findDiscontinuousReferenceFrag(lastLevel.details, details);\n    if (referenceFrag) {\n      logger.log('Adjusting PTS using last level due to CC increase within current level');\n      adjustPts(referenceFrag.start, details);\n    }\n  }\n}\n\n/**\n * Computes the PTS of a new level's fragments using the difference in Program Date Time from the last level.\n * @param details - The details of the new level\n * @param lastDetails - The details of the last loaded level\n */\nexport function alignPDT (details, lastDetails) {\n  if (lastDetails && lastDetails.fragments.length) {\n    if (!details.hasProgramDateTime || !lastDetails.hasProgramDateTime) {\n      return;\n    }\n    // if last level sliding is 1000 and its first frag PROGRAM-DATE-TIME is 2017-08-20 1:10:00 AM\n    // and if new details first frag PROGRAM DATE-TIME is 2017-08-20 1:10:08 AM\n    // then we can deduce that playlist B sliding is 1000+8 = 1008s\n    let lastPDT = lastDetails.fragments[0].programDateTime;\n    let newPDT = details.fragments[0].programDateTime;\n    // date diff is in ms. frag.start is in seconds\n    let sliding = (newPDT - lastPDT) / 1000 + lastDetails.fragments[0].start;\n    if (Number.isFinite(sliding)) {\n      logger.log(`adjusting PTS using programDateTime delta, sliding:${sliding.toFixed(3)}`);\n      adjustPts(sliding, details);\n    }\n  }\n}\n","import BinarySearch from '../utils/binary-search';\n\n/**\n * Returns first fragment whose endPdt value exceeds the given PDT.\n * @param {Array<Fragment>} fragments - The array of candidate fragments\n * @param {number|null} [PDTValue = null] - The PDT value which must be exceeded\n * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start/end can be within in order to be considered contiguous\n * @returns {*|null} fragment - The best matching fragment\n */\nexport function findFragmentByPDT (fragments, PDTValue, maxFragLookUpTolerance) {\n  if (!Array.isArray(fragments) || !fragments.length || !Number.isFinite(PDTValue)) {\n    return null;\n  }\n\n  // if less than start\n  if (PDTValue < fragments[0].programDateTime) {\n    return null;\n  }\n\n  if (PDTValue >= fragments[fragments.length - 1].endProgramDateTime) {\n    return null;\n  }\n\n  maxFragLookUpTolerance = maxFragLookUpTolerance || 0;\n  for (let seg = 0; seg < fragments.length; ++seg) {\n    let frag = fragments[seg];\n    if (pdtWithinToleranceTest(PDTValue, maxFragLookUpTolerance, frag)) {\n      return frag;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Finds a fragment based on the SN of the previous fragment; or based on the needs of the current buffer.\n * This method compensates for small buffer gaps by applying a tolerance to the start of any candidate fragment, thus\n * breaking any traps which would cause the same fragment to be continuously selected within a small range.\n * @param {*} fragPrevious - The last frag successfully appended\n * @param {Array<Fragment>} fragments - The array of candidate fragments\n * @param {number} [bufferEnd = 0] - The end of the contiguous buffered range the playhead is currently within\n * @param {number} maxFragLookUpTolerance - The amount of time that a fragment's start/end can be within in order to be considered contiguous\n * @returns {*} foundFrag - The best matching fragment\n */\nexport function findFragmentByPTS (fragPrevious, fragments, bufferEnd = 0, maxFragLookUpTolerance = 0) {\n  const fragNext = fragPrevious ? fragments[fragPrevious.sn - fragments[0].sn + 1] : null;\n  // Prefer the next fragment if it's within tolerance\n  if (fragNext && !fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, fragNext)) {\n    return fragNext;\n  }\n  return BinarySearch.search(fragments, fragmentWithinToleranceTest.bind(null, bufferEnd, maxFragLookUpTolerance));\n}\n\n/**\n * The test function used by the findFragmentBySn's BinarySearch to look for the best match to the current buffer conditions.\n * @param {*} candidate - The fragment to test\n * @param {number} [bufferEnd = 0] - The end of the current buffered range the playhead is currently within\n * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start can be within in order to be considered contiguous\n * @returns {number} - 0 if it matches, 1 if too low, -1 if too high\n */\nexport function fragmentWithinToleranceTest (bufferEnd = 0, maxFragLookUpTolerance = 0, candidate) {\n  // offset should be within fragment boundary - config.maxFragLookUpTolerance\n  // this is to cope with situations like\n  // bufferEnd = 9.991\n  // frag[Ø] : [0,10]\n  // frag[1] : [10,20]\n  // bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here\n  //              frag start               frag start+duration\n  //                  |-----------------------------|\n  //              <--->                         <--->\n  //  ...--------><-----------------------------><---------....\n  // previous frag         matching fragment         next frag\n  //  return -1             return 0                 return 1\n  // logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);\n  // Set the lookup tolerance to be small enough to detect the current segment - ensures we don't skip over very small segments\n  let candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0));\n  if (candidate.start + candidate.duration - candidateLookupTolerance <= bufferEnd) {\n    return 1;\n  } else if (candidate.start - candidateLookupTolerance > bufferEnd && candidate.start) {\n    // if maxFragLookUpTolerance will have negative value then don't return -1 for first element\n    return -1;\n  }\n\n  return 0;\n}\n\n/**\n * The test function used by the findFragmentByPdt's BinarySearch to look for the best match to the current buffer conditions.\n * This function tests the candidate's program date time values, as represented in Unix time\n * @param {*} candidate - The fragment to test\n * @param {number} [pdtBufferEnd = 0] - The Unix time representing the end of the current buffered range\n * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start can be within in order to be considered contiguous\n * @returns {boolean} True if contiguous, false otherwise\n */\nexport function pdtWithinToleranceTest (pdtBufferEnd, maxFragLookUpTolerance, candidate) {\n  let candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0)) * 1000;\n  return candidate.endProgramDateTime - candidateLookupTolerance > pdtBufferEnd;\n}\n","import { BufferHelper } from '../utils/buffer-helper';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport Event from '../events';\nimport { logger } from '../utils/logger';\n\nconst stallDebounceInterval = 1000;\nconst jumpThreshold = 0.5; // tolerance needed as some browsers stalls playback before reaching buffered range end\n\nexport default class GapController {\n  constructor (config, media, fragmentTracker, hls) {\n    this.config = config;\n    this.media = media;\n    this.fragmentTracker = fragmentTracker;\n    this.hls = hls;\n    this.stallReported = false;\n  }\n\n  /**\n   * Checks if the playhead is stuck within a gap, and if so, attempts to free it.\n   * A gap is an unbuffered range between two buffered ranges (or the start and the first buffered range).\n   * @param lastCurrentTime\n   * @param buffered\n   */\n  poll (lastCurrentTime, buffered) {\n    const { config, media } = this;\n    const currentTime = media.currentTime;\n    const tnow = window.performance.now();\n\n    if (currentTime !== lastCurrentTime) {\n      // The playhead is now moving, but was previously stalled\n      if (this.stallReported) {\n        logger.warn(`playback not stuck anymore @${currentTime}, after ${Math.round(tnow - this.stalled)}ms`);\n        this.stallReported = false;\n      }\n      this.stalled = null;\n      this.nudgeRetry = 0;\n      return;\n    }\n\n    if (media.ended || !media.buffered.length || media.readyState > 2) {\n      return;\n    }\n\n    if (media.seeking && BufferHelper.isBuffered(media, currentTime)) {\n      return;\n    }\n\n    // The playhead isn't moving but it should be\n    // Allow some slack time to for small stalls to resolve themselves\n    const stalledDuration = tnow - this.stalled;\n    const bufferInfo = BufferHelper.bufferInfo(media, currentTime, config.maxBufferHole);\n    if (!this.stalled) {\n      this.stalled = tnow;\n      return;\n    } else if (stalledDuration >= stallDebounceInterval) {\n      // Report stalling after trying to fix\n      this._reportStall(bufferInfo.len);\n    }\n\n    this._tryFixBufferStall(bufferInfo, stalledDuration);\n  }\n\n  /**\n   * Detects and attempts to fix known buffer stalling issues.\n   * @param bufferInfo - The properties of the current buffer.\n   * @param stalledDuration - The amount of time Hls.js has been stalling for.\n   * @private\n   */\n  _tryFixBufferStall (bufferInfo, stalledDuration) {\n    const { config, fragmentTracker, media } = this;\n    const currentTime = media.currentTime;\n\n    const partial = fragmentTracker.getPartialFragment(currentTime);\n    if (partial) {\n      // Try to skip over the buffer hole caused by a partial fragment\n      // This method isn't limited by the size of the gap between buffered ranges\n      this._trySkipBufferHole(partial);\n    }\n\n    if (bufferInfo.len > jumpThreshold && stalledDuration > config.highBufferWatchdogPeriod * 1000) {\n      // Try to nudge currentTime over a buffer hole if we've been stalling for the configured amount of seconds\n      // We only try to jump the hole if it's under the configured size\n      // Reset stalled so to rearm watchdog timer\n      this.stalled = null;\n      this._tryNudgeBuffer();\n    }\n  }\n\n  /**\n   * Triggers a BUFFER_STALLED_ERROR event, but only once per stall period.\n   * @param bufferLen - The playhead distance from the end of the current buffer segment.\n   * @private\n   */\n  _reportStall (bufferLen) {\n    const { hls, media, stallReported } = this;\n    if (!stallReported) {\n      // Report stalled error once\n      this.stallReported = true;\n      logger.warn(`Playback stalling at @${media.currentTime} due to low buffer`);\n      hls.trigger(Event.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.BUFFER_STALLED_ERROR,\n        fatal: false,\n        buffer: bufferLen\n      });\n    }\n  }\n\n  /**\n   * Attempts to fix buffer stalls by jumping over known gaps caused by partial fragments\n   * @param partial - The partial fragment found at the current time (where playback is stalling).\n   * @private\n   */\n  _trySkipBufferHole (partial) {\n    const { hls, media } = this;\n    const currentTime = media.currentTime;\n    let lastEndTime = 0;\n    // Check if currentTime is between unbuffered regions of partial fragments\n    for (let i = 0; i < media.buffered.length; i++) {\n      let startTime = media.buffered.start(i);\n      if (currentTime >= lastEndTime && currentTime < startTime) {\n        media.currentTime = Math.max(startTime, media.currentTime + 0.1);\n        logger.warn(`skipping hole, adjusting currentTime from ${currentTime} to ${media.currentTime}`);\n        this.stalled = null;\n        hls.trigger(Event.ERROR, {\n          type: ErrorTypes.MEDIA_ERROR,\n          details: ErrorDetails.BUFFER_SEEK_OVER_HOLE,\n          fatal: false,\n          reason: `fragment loaded with buffer holes, seeking from ${currentTime} to ${media.currentTime}`,\n          frag: partial\n        });\n        return;\n      }\n      lastEndTime = media.buffered.end(i);\n    }\n  }\n\n  /**\n   * Attempts to fix buffer stalls by advancing the mediaElement's current time by a small amount.\n   * @private\n   */\n  _tryNudgeBuffer () {\n    const { config, hls, media } = this;\n    const currentTime = media.currentTime;\n    const nudgeRetry = (this.nudgeRetry || 0) + 1;\n    this.nudgeRetry = nudgeRetry;\n\n    if (nudgeRetry < config.nudgeMaxRetry) {\n      const targetTime = currentTime + nudgeRetry * config.nudgeOffset;\n      logger.log(`adjust currentTime from ${currentTime} to ${targetTime}`);\n      // playback stalled in buffered area ... let's nudge currentTime to try to overcome this\n      media.currentTime = targetTime;\n      hls.trigger(Event.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.BUFFER_NUDGE_ON_STALL,\n        fatal: false\n      });\n    } else {\n      logger.error(`still stuck in high buffer @${currentTime} after ${config.nudgeMaxRetry}, raise fatal error`);\n      hls.trigger(Event.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.BUFFER_STALLED_ERROR,\n        fatal: true\n      });\n    }\n  }\n}\n","import TaskLoop from '../task-loop';\nimport { FragmentState } from './fragment-tracker';\nimport { BufferHelper } from '../utils/buffer-helper';\nimport { logger } from '../utils/logger';\n\nexport const State = {\n  STOPPED: 'STOPPED',\n  STARTING: 'STARTING',\n  IDLE: 'IDLE',\n  PAUSED: 'PAUSED',\n  KEY_LOADING: 'KEY_LOADING',\n  FRAG_LOADING: 'FRAG_LOADING',\n  FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',\n  WAITING_TRACK: 'WAITING_TRACK',\n  PARSING: 'PARSING',\n  PARSED: 'PARSED',\n  BUFFER_FLUSHING: 'BUFFER_FLUSHING',\n  ENDED: 'ENDED',\n  ERROR: 'ERROR',\n  WAITING_INIT_PTS: 'WAITING_INIT_PTS',\n  WAITING_LEVEL: 'WAITING_LEVEL'\n};\n\nexport default class BaseStreamController extends TaskLoop {\n  doTick () {}\n\n  startLoad () {}\n\n  stopLoad () {\n    let frag = this.fragCurrent;\n    if (frag) {\n      if (frag.loader) {\n        frag.loader.abort();\n      }\n      this.fragmentTracker.removeFragment(frag);\n    }\n    if (this.demuxer) {\n      this.demuxer.destroy();\n      this.demuxer = null;\n    }\n    this.fragCurrent = null;\n    this.fragPrevious = null;\n    this.clearInterval();\n    this.clearNextTick();\n    this.state = State.STOPPED;\n  }\n\n  _streamEnded (bufferInfo, levelDetails) {\n    const { fragCurrent, fragmentTracker } = this;\n    // we just got done loading the final fragment and there is no other buffered range after ...\n    // rationale is that in case there are any buffered ranges after, it means that there are unbuffered portion in between\n    // so we should not switch to ENDED in that case, to be able to buffer them\n    // dont switch to ENDED if we need to backtrack last fragment\n    if (!levelDetails.live && fragCurrent && !fragCurrent.backtracked && fragCurrent.sn === levelDetails.endSN && !bufferInfo.nextStart) {\n      const fragState = fragmentTracker.getState(fragCurrent);\n      return fragState === FragmentState.PARTIAL || fragState === FragmentState.OK;\n    }\n    return false;\n  }\n\n  onMediaSeeking () {\n    const { config, media, mediaBuffer, state } = this;\n    const currentTime = media ? media.currentTime : null;\n    const bufferInfo = BufferHelper.bufferInfo(mediaBuffer || media, currentTime, this.config.maxBufferHole);\n\n    if (Number.isFinite(currentTime)) {\n      logger.log(`media seeking to ${currentTime.toFixed(3)}`);\n    }\n\n    if (state === State.FRAG_LOADING) {\n      let fragCurrent = this.fragCurrent;\n      // check if we are seeking to a unbuffered area AND if frag loading is in progress\n      if (bufferInfo.len === 0 && fragCurrent) {\n        const tolerance = config.maxFragLookUpTolerance;\n        const fragStartOffset = fragCurrent.start - tolerance;\n        const fragEndOffset = fragCurrent.start + fragCurrent.duration + tolerance;\n        // check if we seek position will be out of currently loaded frag range : if out cancel frag load, if in, don't do anything\n        if (currentTime < fragStartOffset || currentTime > fragEndOffset) {\n          if (fragCurrent.loader) {\n            logger.log('seeking outside of buffer while fragment load in progress, cancel fragment load');\n            fragCurrent.loader.abort();\n          }\n          this.fragCurrent = null;\n          this.fragPrevious = null;\n          // switch to IDLE state to load new fragment\n          this.state = State.IDLE;\n        } else {\n          logger.log('seeking outside of buffer but within currently loaded fragment range');\n        }\n      }\n    } else if (state === State.ENDED) {\n      // if seeking to unbuffered area, clean up fragPrevious\n      if (bufferInfo.len === 0) {\n        this.fragPrevious = null;\n        this.fragCurrent = null;\n      }\n\n      // switch to IDLE state to check for potential new fragment\n      this.state = State.IDLE;\n    }\n    if (media) {\n      this.lastCurrentTime = currentTime;\n    }\n\n    // in case seeking occurs although no media buffered, adjust startPosition and nextLoadPosition to seek target\n    if (!this.loadedmetadata) {\n      this.nextLoadPosition = this.startPosition = currentTime;\n    }\n\n    // tick to speed up processing\n    this.tick();\n  }\n\n  onMediaEnded () {\n    // reset startPosition and lastCurrentTime to restart playback @ stream beginning\n    this.startPosition = this.lastCurrentTime = 0;\n  }\n\n  onHandlerDestroying () {\n    this.stopLoad();\n    super.onHandlerDestroying();\n  }\n\n  onHandlerDestroyed () {\n    this.state = State.STOPPED;\n    this.fragmentTracker = null;\n  }\n}\n","/*\n * Stream Controller\n*/\n\nimport BinarySearch from '../utils/binary-search';\nimport { BufferHelper } from '../utils/buffer-helper';\nimport Demuxer from '../demux/demuxer';\nimport Event from '../events';\nimport { FragmentState } from './fragment-tracker';\nimport { ElementaryStreamTypes } from '../loader/fragment';\nimport { PlaylistLevelType } from '../types/loader';\nimport * as LevelHelper from './level-helper';\nimport TimeRanges from '../utils/time-ranges';\nimport { ErrorDetails } from '../errors';\nimport { logger } from '../utils/logger';\nimport { alignStream } from '../utils/discontinuities';\nimport { findFragmentByPDT, findFragmentByPTS } from './fragment-finders';\nimport GapController from './gap-controller';\nimport BaseStreamController, { State } from './base-stream-controller';\n\nconst TICK_INTERVAL = 100; // how often to tick in ms\n\nclass StreamController extends BaseStreamController {\n  constructor (hls, fragmentTracker) {\n    super(hls,\n      Event.MEDIA_ATTACHED,\n      Event.MEDIA_DETACHING,\n      Event.MANIFEST_LOADING,\n      Event.MANIFEST_PARSED,\n      Event.LEVEL_LOADED,\n      Event.KEY_LOADED,\n      Event.FRAG_LOADED,\n      Event.FRAG_LOAD_EMERGENCY_ABORTED,\n      Event.FRAG_PARSING_INIT_SEGMENT,\n      Event.FRAG_PARSING_DATA,\n      Event.FRAG_PARSED,\n      Event.ERROR,\n      Event.AUDIO_TRACK_SWITCHING,\n      Event.AUDIO_TRACK_SWITCHED,\n      Event.BUFFER_CREATED,\n      Event.BUFFER_APPENDED,\n      Event.BUFFER_FLUSHED);\n\n    this.fragmentTracker = fragmentTracker;\n    this.config = hls.config;\n    this.audioCodecSwap = false;\n    this._state = State.STOPPED;\n    this.stallReported = false;\n    this.gapController = null;\n  }\n\n  startLoad (startPosition) {\n    if (this.levels) {\n      let lastCurrentTime = this.lastCurrentTime, hls = this.hls;\n      this.stopLoad();\n      this.setInterval(TICK_INTERVAL);\n      this.level = -1;\n      this.fragLoadError = 0;\n      if (!this.startFragRequested) {\n        // determine load level\n        let startLevel = hls.startLevel;\n        if (startLevel === -1) {\n          // -1 : guess start Level by doing a bitrate test by loading first fragment of lowest quality level\n          startLevel = 0;\n          this.bitrateTest = true;\n        }\n        // set new level to playlist loader : this will trigger start level load\n        // hls.nextLoadLevel remains until it is set to a new value or until a new frag is successfully loaded\n        this.level = hls.nextLoadLevel = startLevel;\n        this.loadedmetadata = false;\n      }\n      // if startPosition undefined but lastCurrentTime set, set startPosition to last currentTime\n      if (lastCurrentTime > 0 && startPosition === -1) {\n        logger.log(`override startPosition with lastCurrentTime @${lastCurrentTime.toFixed(3)}`);\n        startPosition = lastCurrentTime;\n      }\n      this.state = State.IDLE;\n      this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;\n      this.tick();\n    } else {\n      this.forceStartLoad = true;\n      this.state = State.STOPPED;\n    }\n  }\n\n  stopLoad () {\n    this.forceStartLoad = false;\n    super.stopLoad();\n  }\n\n  doTick () {\n    switch (this.state) {\n    case State.BUFFER_FLUSHING:\n      // in buffer flushing state, reset fragLoadError counter\n      this.fragLoadError = 0;\n      break;\n    case State.IDLE:\n      this._doTickIdle();\n      break;\n    case State.WAITING_LEVEL:\n      var level = this.levels[this.level];\n      // check if playlist is already loaded\n      if (level && level.details) {\n        this.state = State.IDLE;\n      }\n\n      break;\n    case State.FRAG_LOADING_WAITING_RETRY:\n      var now = window.performance.now();\n      var retryDate = this.retryDate;\n      // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading\n      if (!retryDate || (now >= retryDate) || (this.media && this.media.seeking)) {\n        logger.log('mediaController: retryDate reached, switch back to IDLE state');\n        this.state = State.IDLE;\n      }\n      break;\n    case State.ERROR:\n    case State.STOPPED:\n    case State.FRAG_LOADING:\n    case State.PARSING:\n    case State.PARSED:\n    case State.ENDED:\n      break;\n    default:\n      break;\n    }\n    // check buffer\n    this._checkBuffer();\n    // check/update current fragment\n    this._checkFragmentChanged();\n  }\n\n  // Ironically the \"idle\" state is the on we do the most logic in it seems ....\n  // NOTE: Maybe we could rather schedule a check for buffer length after half of the currently\n  //       played segment, or on pause/play/seek instead of naively checking every 100ms?\n  _doTickIdle () {\n    const hls = this.hls,\n      config = hls.config,\n      media = this.media;\n\n    // if start level not parsed yet OR\n    // if video not attached AND start fragment already requested OR start frag prefetch disable\n    // exit loop, as we either need more info (level not parsed) or we need media to be attached to load new fragment\n    if (this.levelLastLoaded === undefined || (\n      !media && (this.startFragRequested || !config.startFragPrefetch))) {\n      return;\n    }\n\n    // if we have not yet loaded any fragment, start loading from start position\n    let pos;\n    if (this.loadedmetadata) {\n      pos = media.currentTime;\n    } else {\n      pos = this.nextLoadPosition;\n    }\n\n    // determine next load level\n    let level = hls.nextLoadLevel,\n      levelInfo = this.levels[level];\n\n    if (!levelInfo) {\n      return;\n    }\n\n    let levelBitrate = levelInfo.bitrate,\n      maxBufLen;\n\n    // compute max Buffer Length that we could get from this load level, based on level bitrate.\n    if (levelBitrate) {\n      maxBufLen = Math.max(8 * config.maxBufferSize / levelBitrate, config.maxBufferLength);\n    } else {\n      maxBufLen = config.maxBufferLength;\n    }\n\n    maxBufLen = Math.min(maxBufLen, config.maxMaxBufferLength);\n\n    // determine next candidate fragment to be loaded, based on current position and end of buffer position\n    // ensure up to `config.maxMaxBufferLength` of buffer upfront\n\n    const bufferInfo = BufferHelper.bufferInfo(this.mediaBuffer ? this.mediaBuffer : media, pos, config.maxBufferHole),\n      bufferLen = bufferInfo.len;\n    // Stay idle if we are still with buffer margins\n    if (bufferLen >= maxBufLen) {\n      return;\n    }\n\n    // if buffer length is less than maxBufLen try to load a new fragment ...\n    logger.trace(`buffer length of ${bufferLen.toFixed(3)} is below max of ${maxBufLen.toFixed(3)}. checking for more payload ...`);\n\n    // set next load level : this will trigger a playlist load if needed\n    this.level = hls.nextLoadLevel = level;\n\n    const levelDetails = levelInfo.details;\n    // if level info not retrieved yet, switch state and wait for level retrieval\n    // if live playlist, ensure that new playlist has been refreshed to avoid loading/try to load\n    // a useless and outdated fragment (that might even introduce load error if it is already out of the live playlist)\n    if (!levelDetails || (levelDetails.live && this.levelLastLoaded !== level)) {\n      this.state = State.WAITING_LEVEL;\n      return;\n    }\n\n    if (this._streamEnded(bufferInfo, levelDetails)) {\n      const data = {};\n      if (this.altAudio) {\n        data.type = 'video';\n      }\n\n      this.hls.trigger(Event.BUFFER_EOS, data);\n      this.state = State.ENDED;\n      return;\n    }\n    // if we have the levelDetails for the selected variant, lets continue enrichen our stream (load keys/fragments or trigger EOS, etc..)\n    this._fetchPayloadOrEos(pos, bufferInfo, levelDetails);\n  }\n\n  _fetchPayloadOrEos (pos, bufferInfo, levelDetails) {\n    const fragPrevious = this.fragPrevious,\n      level = this.level,\n      fragments = levelDetails.fragments,\n      fragLen = fragments.length;\n\n    // empty playlist\n    if (fragLen === 0) {\n      return;\n    }\n\n    // find fragment index, contiguous with end of buffer position\n    let start = fragments[0].start,\n      end = fragments[fragLen - 1].start + fragments[fragLen - 1].duration,\n      bufferEnd = bufferInfo.end,\n      frag;\n\n    if (levelDetails.initSegment && !levelDetails.initSegment.data) {\n      frag = levelDetails.initSegment;\n    } else {\n      // in case of live playlist we need to ensure that requested position is not located before playlist start\n      if (levelDetails.live) {\n        let initialLiveManifestSize = this.config.initialLiveManifestSize;\n        if (fragLen < initialLiveManifestSize) {\n          logger.warn(`Can not start playback of a level, reason: not enough fragments ${fragLen} < ${initialLiveManifestSize}`);\n          return;\n        }\n\n        frag = this._ensureFragmentAtLivePoint(levelDetails, bufferEnd, start, end, fragPrevious, fragments, fragLen);\n        // if it explicitely returns null don't load any fragment and exit function now\n        if (frag === null) {\n          return;\n        }\n      } else {\n        // VoD playlist: if bufferEnd before start of playlist, load first fragment\n        if (bufferEnd < start) {\n          frag = fragments[0];\n        }\n      }\n    }\n    if (!frag) {\n      frag = this._findFragment(start, fragPrevious, fragLen, fragments, bufferEnd, end, levelDetails);\n    }\n\n    if (frag) {\n      if (frag.encrypted && !this.hls.config.emeEnabled) {\n        logger.log(`Loading key for ${frag.sn} of [${levelDetails.startSN} ,${levelDetails.endSN}],level ${level}`);\n        this._loadKey(frag);\n      } else {\n        logger.log(`Loading ${frag.sn} of [${levelDetails.startSN} ,${levelDetails.endSN}],level ${level}, currentTime:${pos.toFixed(3)},bufferEnd:${bufferEnd.toFixed(3)}`);\n        this._loadFragment(frag);\n      }\n    }\n  }\n\n  _ensureFragmentAtLivePoint (levelDetails, bufferEnd, start, end, fragPrevious, fragments, fragLen) {\n    const config = this.hls.config, media = this.media;\n\n    let frag;\n\n    // check if requested position is within seekable boundaries :\n    // logger.log(`start/pos/bufEnd/seeking:${start.toFixed(3)}/${pos.toFixed(3)}/${bufferEnd.toFixed(3)}/${this.media.seeking}`);\n    let maxLatency = config.liveMaxLatencyDuration !== undefined ? config.liveMaxLatencyDuration : config.liveMaxLatencyDurationCount * levelDetails.targetduration;\n\n    if (bufferEnd < Math.max(start - config.maxFragLookUpTolerance, end - maxLatency)) {\n      let liveSyncPosition = this.liveSyncPosition = this.computeLivePosition(start, levelDetails);\n      logger.log(`buffer end: ${bufferEnd.toFixed(3)} is located too far from the end of live sliding playlist, reset currentTime to : ${liveSyncPosition.toFixed(3)}`);\n      bufferEnd = liveSyncPosition;\n      if (media && media.readyState && media.duration > liveSyncPosition) {\n        media.currentTime = liveSyncPosition;\n      }\n\n      this.nextLoadPosition = liveSyncPosition;\n    }\n\n    // if end of buffer greater than live edge, don't load any fragment\n    // this could happen if live playlist intermittently slides in the past.\n    // level 1 loaded [182580161,182580167]\n    // level 1 loaded [182580162,182580169]\n    // Loading 182580168 of [182580162 ,182580169],level 1 ..\n    // Loading 182580169 of [182580162 ,182580169],level 1 ..\n    // level 1 loaded [182580162,182580168] <============= here we should have bufferEnd > end. in that case break to avoid reloading 182580168\n    // level 1 loaded [182580164,182580171]\n    //\n    // don't return null in case media not loaded yet (readystate === 0)\n    if (levelDetails.PTSKnown && bufferEnd > end && media && media.readyState) {\n      return null;\n    }\n\n    if (this.startFragRequested && !levelDetails.PTSKnown) {\n      /* we are switching level on live playlist, but we don't have any PTS info for that quality level ...\n         try to load frag matching with next SN.\n         even if SN are not synchronized between playlists, loading this frag will help us\n         compute playlist sliding and find the right one after in case it was not the right consecutive one */\n      if (fragPrevious) {\n        if (levelDetails.hasProgramDateTime) {\n          // Relies on PDT in order to switch bitrates (Support EXT-X-DISCONTINUITY without EXT-X-DISCONTINUITY-SEQUENCE)\n          logger.log(`live playlist, switching playlist, load frag with same PDT: ${fragPrevious.programDateTime}`);\n          frag = findFragmentByPDT(fragments, fragPrevious.endProgramDateTime, config.maxFragLookUpTolerance);\n        } else {\n          // Uses buffer and sequence number to calculate switch segment (required if using EXT-X-DISCONTINUITY-SEQUENCE)\n          const targetSN = fragPrevious.sn + 1;\n          if (targetSN >= levelDetails.startSN && targetSN <= levelDetails.endSN) {\n            const fragNext = fragments[targetSN - levelDetails.startSN];\n            if (fragPrevious.cc === fragNext.cc) {\n              frag = fragNext;\n              logger.log(`live playlist, switching playlist, load frag with next SN: ${frag.sn}`);\n            }\n          }\n          // next frag SN not available (or not with same continuity counter)\n          // look for a frag sharing the same CC\n          if (!frag) {\n            frag = BinarySearch.search(fragments, function (frag) {\n              return fragPrevious.cc - frag.cc;\n            });\n            if (frag) {\n              logger.log(`live playlist, switching playlist, load frag with same CC: ${frag.sn}`);\n            }\n          }\n        }\n      }\n      if (!frag) {\n        /* we have no idea about which fragment should be loaded.\n           so let's load mid fragment. it will help computing playlist sliding and find the right one\n        */\n        frag = fragments[Math.min(fragLen - 1, Math.round(fragLen / 2))];\n        logger.log(`live playlist, switching playlist, unknown, load middle frag : ${frag.sn}`);\n      }\n    }\n\n    return frag;\n  }\n\n  _findFragment (start, fragPrevious, fragLen, fragments, bufferEnd, end, levelDetails) {\n    const config = this.hls.config;\n    let frag;\n\n    if (bufferEnd < end) {\n      const lookupTolerance = (bufferEnd > end - config.maxFragLookUpTolerance) ? 0 : config.maxFragLookUpTolerance;\n      // Remove the tolerance if it would put the bufferEnd past the actual end of stream\n      // Uses buffer and sequence number to calculate switch segment (required if using EXT-X-DISCONTINUITY-SEQUENCE)\n      frag = findFragmentByPTS(fragPrevious, fragments, bufferEnd, lookupTolerance);\n    } else {\n      // reach end of playlist\n      frag = fragments[fragLen - 1];\n    }\n    if (frag) {\n      const curSNIdx = frag.sn - levelDetails.startSN;\n      const sameLevel = fragPrevious && frag.level === fragPrevious.level;\n      const prevFrag = fragments[curSNIdx - 1];\n      const nextFrag = fragments[curSNIdx + 1];\n      // logger.log('find SN matching with pos:' +  bufferEnd + ':' + frag.sn);\n      if (fragPrevious && frag.sn === fragPrevious.sn) {\n        if (sameLevel && !frag.backtracked) {\n          if (frag.sn < levelDetails.endSN) {\n            let deltaPTS = fragPrevious.deltaPTS;\n            // if there is a significant delta between audio and video, larger than max allowed hole,\n            // and if previous remuxed fragment did not start with a keyframe. (fragPrevious.dropped)\n            // let's try to load previous fragment again to get last keyframe\n            // then we will reload again current fragment (that way we should be able to fill the buffer hole ...)\n            if (deltaPTS && deltaPTS > config.maxBufferHole && fragPrevious.dropped && curSNIdx) {\n              frag = prevFrag;\n              logger.warn('SN just loaded, with large PTS gap between audio and video, maybe frag is not starting with a keyframe ? load previous one to try to overcome this');\n            } else {\n              frag = nextFrag;\n              logger.log(`SN just loaded, load next one: ${frag.sn}`, frag);\n            }\n          } else {\n            frag = null;\n          }\n        } else if (frag.backtracked) {\n          // Only backtrack a max of 1 consecutive fragment to prevent sliding back too far when little or no frags start with keyframes\n          if (nextFrag && nextFrag.backtracked) {\n            logger.warn(`Already backtracked from fragment ${nextFrag.sn}, will not backtrack to fragment ${frag.sn}. Loading fragment ${nextFrag.sn}`);\n            frag = nextFrag;\n          } else {\n            // If a fragment has dropped frames and it's in a same level/sequence, load the previous fragment to try and find the keyframe\n            // Reset the dropped count now since it won't be reset until we parse the fragment again, which prevents infinite backtracking on the same segment\n            logger.warn('Loaded fragment with dropped frames, backtracking 1 segment to find a keyframe');\n            frag.dropped = 0;\n            if (prevFrag) {\n              frag = prevFrag;\n              frag.backtracked = true;\n            } else if (curSNIdx) {\n              // can't backtrack on very first fragment\n              frag = null;\n            }\n          }\n        }\n      }\n    }\n    return frag;\n  }\n\n  _loadKey (frag) {\n    this.state = State.KEY_LOADING;\n    this.hls.trigger(Event.KEY_LOADING, { frag });\n  }\n\n  _loadFragment (frag) {\n    // Check if fragment is not loaded\n    let fragState = this.fragmentTracker.getState(frag);\n\n    this.fragCurrent = frag;\n    if (frag.sn !== 'initSegment') {\n      this.startFragRequested = true;\n    }\n    // Don't update nextLoadPosition for fragments which are not buffered\n    if (Number.isFinite(frag.sn) && !frag.bitrateTest) {\n      this.nextLoadPosition = frag.start + frag.duration;\n    }\n\n    // Allow backtracked fragments to load\n    if (frag.backtracked || fragState === FragmentState.NOT_LOADED || fragState === FragmentState.PARTIAL) {\n      frag.autoLevel = this.hls.autoLevelEnabled;\n      frag.bitrateTest = this.bitrateTest;\n\n      this.hls.trigger(Event.FRAG_LOADING, { frag });\n      // lazy demuxer init, as this could take some time ... do it during frag loading\n      if (!this.demuxer) {\n        this.demuxer = new Demuxer(this.hls, 'main');\n      }\n\n      this.state = State.FRAG_LOADING;\n    } else if (fragState === FragmentState.APPENDING) {\n      // Lower the buffer size and try again\n      if (this._reduceMaxBufferLength(frag.duration)) {\n        this.fragmentTracker.removeFragment(frag);\n      }\n    }\n  }\n\n  set state (nextState) {\n    if (this.state !== nextState) {\n      const previousState = this.state;\n      this._state = nextState;\n      logger.log(`main stream:${previousState}->${nextState}`);\n      this.hls.trigger(Event.STREAM_STATE_TRANSITION, { previousState, nextState });\n    }\n  }\n\n  get state () {\n    return this._state;\n  }\n\n  getBufferedFrag (position) {\n    return this.fragmentTracker.getBufferedFrag(position, PlaylistLevelType.MAIN);\n  }\n\n  get currentLevel () {\n    let media = this.media;\n    if (media) {\n      const frag = this.getBufferedFrag(media.currentTime);\n      if (frag) {\n        return frag.level;\n      }\n    }\n    return -1;\n  }\n\n  get nextBufferedFrag () {\n    let media = this.media;\n    if (media) {\n      // first get end range of current fragment\n      return this.followingBufferedFrag(this.getBufferedFrag(media.currentTime));\n    } else {\n      return null;\n    }\n  }\n\n  followingBufferedFrag (frag) {\n    if (frag) {\n      // try to get range of next fragment (500ms after this range)\n      return this.getBufferedFrag(frag.endPTS + 0.5);\n    }\n    return null;\n  }\n\n  get nextLevel () {\n    const frag = this.nextBufferedFrag;\n    if (frag) {\n      return frag.level;\n    } else {\n      return -1;\n    }\n  }\n\n  _checkFragmentChanged () {\n    let fragPlayingCurrent, currentTime, video = this.media;\n    if (video && video.readyState && video.seeking === false) {\n      currentTime = video.currentTime;\n      /* if video element is in seeked state, currentTime can only increase.\n        (assuming that playback rate is positive ...)\n        As sometimes currentTime jumps back to zero after a\n        media decode error, check this, to avoid seeking back to\n        wrong position after a media decode error\n      */\n      if (currentTime > this.lastCurrentTime) {\n        this.lastCurrentTime = currentTime;\n      }\n\n      if (BufferHelper.isBuffered(video, currentTime)) {\n        fragPlayingCurrent = this.getBufferedFrag(currentTime);\n      } else if (BufferHelper.isBuffered(video, currentTime + 0.1)) {\n        /* ensure that FRAG_CHANGED event is triggered at startup,\n          when first video frame is displayed and playback is paused.\n          add a tolerance of 100ms, in case current position is not buffered,\n          check if current pos+100ms is buffered and use that buffer range\n          for FRAG_CHANGED event reporting */\n        fragPlayingCurrent = this.getBufferedFrag(currentTime + 0.1);\n      }\n      if (fragPlayingCurrent) {\n        let fragPlaying = fragPlayingCurrent;\n        if (fragPlaying !== this.fragPlaying) {\n          this.hls.trigger(Event.FRAG_CHANGED, { frag: fragPlaying });\n          const fragPlayingLevel = fragPlaying.level;\n          if (!this.fragPlaying || this.fragPlaying.level !== fragPlayingLevel) {\n            this.hls.trigger(Event.LEVEL_SWITCHED, { level: fragPlayingLevel });\n          }\n\n          this.fragPlaying = fragPlaying;\n        }\n      }\n    }\n  }\n\n  /*\n    on immediate level switch :\n     - pause playback if playing\n     - cancel any pending load request\n     - and trigger a buffer flush\n  */\n  immediateLevelSwitch () {\n    logger.log('immediateLevelSwitch');\n    if (!this.immediateSwitch) {\n      this.immediateSwitch = true;\n      let media = this.media, previouslyPaused;\n      if (media) {\n        previouslyPaused = media.paused;\n        media.pause();\n      } else {\n        // don't restart playback after instant level switch in case media not attached\n        previouslyPaused = true;\n      }\n      this.previouslyPaused = previouslyPaused;\n    }\n    let fragCurrent = this.fragCurrent;\n    if (fragCurrent && fragCurrent.loader) {\n      fragCurrent.loader.abort();\n    }\n\n    this.fragCurrent = null;\n    // flush everything\n    this.flushMainBuffer(0, Number.POSITIVE_INFINITY);\n  }\n\n  /**\n   * on immediate level switch end, after new fragment has been buffered:\n   * - nudge video decoder by slightly adjusting video currentTime (if currentTime buffered)\n   * - resume the playback if needed\n   */\n  immediateLevelSwitchEnd () {\n    const media = this.media;\n    if (media && media.buffered.length) {\n      this.immediateSwitch = false;\n      if (BufferHelper.isBuffered(media, media.currentTime)) {\n        // only nudge if currentTime is buffered\n        media.currentTime -= 0.0001;\n      }\n      if (!this.previouslyPaused) {\n        media.play();\n      }\n    }\n  }\n\n  /**\n   * try to switch ASAP without breaking video playback:\n   * in order to ensure smooth but quick level switching,\n   * we need to find the next flushable buffer range\n   * we should take into account new segment fetch time\n   */\n  nextLevelSwitch () {\n    const media = this.media;\n    // ensure that media is defined and that metadata are available (to retrieve currentTime)\n    if (media && media.readyState) {\n      let fetchdelay, fragPlayingCurrent, nextBufferedFrag;\n      fragPlayingCurrent = this.getBufferedFrag(media.currentTime);\n      if (fragPlayingCurrent && fragPlayingCurrent.startPTS > 1) {\n        // flush buffer preceding current fragment (flush until current fragment start offset)\n        // minus 1s to avoid video freezing, that could happen if we flush keyframe of current video ...\n        this.flushMainBuffer(0, fragPlayingCurrent.startPTS - 1);\n      }\n      if (!media.paused) {\n        // add a safety delay of 1s\n        let nextLevelId = this.hls.nextLoadLevel, nextLevel = this.levels[nextLevelId], fragLastKbps = this.fragLastKbps;\n        if (fragLastKbps && this.fragCurrent) {\n          fetchdelay = this.fragCurrent.duration * nextLevel.bitrate / (1000 * fragLastKbps) + 1;\n        } else {\n          fetchdelay = 0;\n        }\n      } else {\n        fetchdelay = 0;\n      }\n      // logger.log('fetchdelay:'+fetchdelay);\n      // find buffer range that will be reached once new fragment will be fetched\n      nextBufferedFrag = this.getBufferedFrag(media.currentTime + fetchdelay);\n      if (nextBufferedFrag) {\n        // we can flush buffer range following this one without stalling playback\n        nextBufferedFrag = this.followingBufferedFrag(nextBufferedFrag);\n        if (nextBufferedFrag) {\n          // if we are here, we can also cancel any loading/demuxing in progress, as they are useless\n          let fragCurrent = this.fragCurrent;\n          if (fragCurrent && fragCurrent.loader) {\n            fragCurrent.loader.abort();\n          }\n\n          this.fragCurrent = null;\n          // start flush position is the start PTS of next buffered frag.\n          // we use frag.naxStartPTS which is max(audio startPTS, video startPTS).\n          // in case there is a small PTS Delta between audio and video, using maxStartPTS avoids flushing last samples from current fragment\n          this.flushMainBuffer(nextBufferedFrag.maxStartPTS, Number.POSITIVE_INFINITY);\n        }\n      }\n    }\n  }\n\n  flushMainBuffer (startOffset, endOffset) {\n    this.state = State.BUFFER_FLUSHING;\n    let flushScope = { startOffset: startOffset, endOffset: endOffset };\n    // if alternate audio tracks are used, only flush video, otherwise flush everything\n    if (this.altAudio) {\n      flushScope.type = 'video';\n    }\n\n    this.hls.trigger(Event.BUFFER_FLUSHING, flushScope);\n  }\n\n  onMediaAttached (data) {\n    let media = this.media = this.mediaBuffer = data.media;\n    this.onvseeking = this.onMediaSeeking.bind(this);\n    this.onvseeked = this.onMediaSeeked.bind(this);\n    this.onvended = this.onMediaEnded.bind(this);\n    media.addEventListener('seeking', this.onvseeking);\n    media.addEventListener('seeked', this.onvseeked);\n    media.addEventListener('ended', this.onvended);\n    let config = this.config;\n    if (this.levels && config.autoStartLoad) {\n      this.hls.startLoad(config.startPosition);\n    }\n\n    this.gapController = new GapController(config, media, this.fragmentTracker, this.hls);\n  }\n\n  onMediaDetaching () {\n    let media = this.media;\n    if (media && media.ended) {\n      logger.log('MSE detaching and video ended, reset startPosition');\n      this.startPosition = this.lastCurrentTime = 0;\n    }\n\n    // reset fragment backtracked flag\n    let levels = this.levels;\n    if (levels) {\n      levels.forEach(level => {\n        if (level.details) {\n          level.details.fragments.forEach(fragment => {\n            fragment.backtracked = undefined;\n          });\n        }\n      });\n    }\n    // remove video listeners\n    if (media) {\n      media.removeEventListener('seeking', this.onvseeking);\n      media.removeEventListener('seeked', this.onvseeked);\n      media.removeEventListener('ended', this.onvended);\n      this.onvseeking = this.onvseeked = this.onvended = null;\n    }\n    this.media = this.mediaBuffer = null;\n    this.loadedmetadata = false;\n    this.stopLoad();\n  }\n\n  onMediaSeeked () {\n    const media = this.media, currentTime = media ? media.currentTime : undefined;\n    if (Number.isFinite(currentTime)) {\n      logger.log(`media seeked to ${currentTime.toFixed(3)}`);\n    }\n\n    // tick to speed up FRAGMENT_PLAYING triggering\n    this.tick();\n  }\n\n  onManifestLoading () {\n    // reset buffer on manifest loading\n    logger.log('trigger BUFFER_RESET');\n    this.hls.trigger(Event.BUFFER_RESET);\n    this.fragmentTracker.removeAllFragments();\n    this.stalled = false;\n    this.startPosition = this.lastCurrentTime = 0;\n  }\n\n  onManifestParsed (data) {\n    let aac = false, heaac = false, codec;\n    data.levels.forEach(level => {\n      // detect if we have different kind of audio codecs used amongst playlists\n      codec = level.audioCodec;\n      if (codec) {\n        if (codec.indexOf('mp4a.40.2') !== -1) {\n          aac = true;\n        }\n\n        if (codec.indexOf('mp4a.40.5') !== -1) {\n          heaac = true;\n        }\n      }\n    });\n    this.audioCodecSwitch = (aac && heaac);\n    if (this.audioCodecSwitch) {\n      logger.log('both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC');\n    }\n\n    this.levels = data.levels;\n    this.startFragRequested = false;\n    let config = this.config;\n    if (config.autoStartLoad || this.forceStartLoad) {\n      this.hls.startLoad(config.startPosition);\n    }\n  }\n\n  onLevelLoaded (data) {\n    const newDetails = data.details;\n    const newLevelId = data.level;\n    const lastLevel = this.levels[this.levelLastLoaded];\n    const curLevel = this.levels[newLevelId];\n    const duration = newDetails.totalduration;\n    let sliding = 0;\n\n    logger.log(`level ${newLevelId} loaded [${newDetails.startSN},${newDetails.endSN}],duration:${duration}`);\n\n    if (newDetails.live) {\n      let curDetails = curLevel.details;\n      if (curDetails && newDetails.fragments.length > 0) {\n        // we already have details for that level, merge them\n        LevelHelper.mergeDetails(curDetails, newDetails);\n        sliding = newDetails.fragments[0].start;\n        this.liveSyncPosition = this.computeLivePosition(sliding, curDetails);\n        if (newDetails.PTSKnown && Number.isFinite(sliding)) {\n          logger.log(`live playlist sliding:${sliding.toFixed(3)}`);\n        } else {\n          logger.log('live playlist - outdated PTS, unknown sliding');\n          alignStream(this.fragPrevious, lastLevel, newDetails);\n        }\n      } else {\n        logger.log('live playlist - first load, unknown sliding');\n        newDetails.PTSKnown = false;\n        alignStream(this.fragPrevious, lastLevel, newDetails);\n      }\n    } else {\n      newDetails.PTSKnown = false;\n    }\n    // override level info\n    curLevel.details = newDetails;\n    this.levelLastLoaded = newLevelId;\n    this.hls.trigger(Event.LEVEL_UPDATED, { details: newDetails, level: newLevelId });\n\n    if (this.startFragRequested === false) {\n    // compute start position if set to -1. use it straight away if value is defined\n      if (this.startPosition === -1 || this.lastCurrentTime === -1) {\n        // first, check if start time offset has been set in playlist, if yes, use this value\n        let startTimeOffset = newDetails.startTimeOffset;\n        if (Number.isFinite(startTimeOffset)) {\n          if (startTimeOffset < 0) {\n            logger.log(`negative start time offset ${startTimeOffset}, count from end of last fragment`);\n            startTimeOffset = sliding + duration + startTimeOffset;\n          }\n          logger.log(`start time offset found in playlist, adjust startPosition to ${startTimeOffset}`);\n          this.startPosition = startTimeOffset;\n        } else {\n          // if live playlist, set start position to be fragment N-this.config.liveSyncDurationCount (usually 3)\n          if (newDetails.live) {\n            this.startPosition = this.computeLivePosition(sliding, newDetails);\n            logger.log(`configure startPosition to ${this.startPosition}`);\n          } else {\n            this.startPosition = 0;\n          }\n        }\n        this.lastCurrentTime = this.startPosition;\n      }\n      this.nextLoadPosition = this.startPosition;\n    }\n    // only switch batck to IDLE state if we were waiting for level to start downloading a new fragment\n    if (this.state === State.WAITING_LEVEL) {\n      this.state = State.IDLE;\n    }\n\n    // trigger handler right now\n    this.tick();\n  }\n\n  onKeyLoaded () {\n    if (this.state === State.KEY_LOADING) {\n      this.state = State.IDLE;\n      this.tick();\n    }\n  }\n\n  onFragLoaded (data) {\n    const { fragCurrent, hls, levels, media } = this;\n    const fragLoaded = data.frag;\n    if (this.state === State.FRAG_LOADING &&\n        fragCurrent &&\n        fragLoaded.type === 'main' &&\n        fragLoaded.level === fragCurrent.level &&\n        fragLoaded.sn === fragCurrent.sn) {\n      const stats = data.stats;\n      const currentLevel = levels[fragCurrent.level];\n      const details = currentLevel.details;\n      // reset frag bitrate test in any case after frag loaded event\n      // if this frag was loaded to perform a bitrate test AND if hls.nextLoadLevel is greater than 0\n      // then this means that we should be able to load a fragment at a higher quality level\n      this.bitrateTest = false;\n      this.stats = stats;\n\n      logger.log(`Loaded ${fragCurrent.sn} of [${details.startSN} ,${details.endSN}],level ${fragCurrent.level}`);\n      if (fragLoaded.bitrateTest && hls.nextLoadLevel) {\n        // switch back to IDLE state ... we just loaded a fragment to determine adequate start bitrate and initialize autoswitch algo\n        this.state = State.IDLE;\n        this.startFragRequested = false;\n        stats.tparsed = stats.tbuffered = window.performance.now();\n        hls.trigger(Event.FRAG_BUFFERED, { stats: stats, frag: fragCurrent, id: 'main' });\n        this.tick();\n      } else if (fragLoaded.sn === 'initSegment') {\n        this.state = State.IDLE;\n        stats.tparsed = stats.tbuffered = window.performance.now();\n        details.initSegment.data = data.payload;\n        hls.trigger(Event.FRAG_BUFFERED, { stats: stats, frag: fragCurrent, id: 'main' });\n        this.tick();\n      } else {\n        logger.log(`Parsing ${fragCurrent.sn} of [${details.startSN} ,${details.endSN}],level ${fragCurrent.level}, cc ${fragCurrent.cc}`);\n        this.state = State.PARSING;\n        this.pendingBuffering = true;\n        this.appended = false;\n\n        // Bitrate test frags are not usually buffered so the fragment tracker ignores them. If Hls.js decides to buffer\n        // it (and therefore ends up at this line), then the fragment tracker needs to be manually informed.\n        if (fragLoaded.bitrateTest) {\n          fragLoaded.bitrateTest = false;\n          this.fragmentTracker.onFragLoaded({\n            frag: fragLoaded\n          });\n        }\n\n        // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live) and if media is not seeking (this is to overcome potential timestamp drifts between playlists and fragments)\n        const accurateTimeOffset = !(media && media.seeking) && (details.PTSKnown || !details.live);\n        const initSegmentData = details.initSegment ? details.initSegment.data : [];\n        const audioCodec = this._getAudioCodec(currentLevel);\n\n        // transmux the MPEG-TS data to ISO-BMFF segments\n        const demuxer = this.demuxer = this.demuxer || new Demuxer(this.hls, 'main');\n        demuxer.push(\n          data.payload,\n          initSegmentData,\n          audioCodec,\n          currentLevel.videoCodec,\n          fragCurrent,\n          details.totalduration,\n          accurateTimeOffset\n        );\n      }\n    }\n    this.fragLoadError = 0;\n  }\n\n  onFragParsingInitSegment (data) {\n    const fragCurrent = this.fragCurrent;\n    const fragNew = data.frag;\n\n    if (fragCurrent &&\n        data.id === 'main' &&\n        fragNew.sn === fragCurrent.sn &&\n        fragNew.level === fragCurrent.level &&\n        this.state === State.PARSING) {\n      let tracks = data.tracks, trackName, track;\n\n      // if audio track is expected to come from audio stream controller, discard any coming from main\n      if (tracks.audio && this.altAudio) {\n        delete tracks.audio;\n      }\n\n      // include levelCodec in audio and video tracks\n      track = tracks.audio;\n      if (track) {\n        let audioCodec = this.levels[this.level].audioCodec,\n          ua = navigator.userAgent.toLowerCase();\n        if (audioCodec && this.audioCodecSwap) {\n          logger.log('swapping playlist audio codec');\n          if (audioCodec.indexOf('mp4a.40.5') !== -1) {\n            audioCodec = 'mp4a.40.2';\n          } else {\n            audioCodec = 'mp4a.40.5';\n          }\n        }\n        // in case AAC and HE-AAC audio codecs are signalled in manifest\n        // force HE-AAC , as it seems that most browsers prefers that way,\n        // except for mono streams OR on FF\n        // these conditions might need to be reviewed ...\n        if (this.audioCodecSwitch) {\n          // don't force HE-AAC if mono stream\n          if (track.metadata.channelCount !== 1 &&\n            // don't force HE-AAC if firefox\n            ua.indexOf('firefox') === -1) {\n            audioCodec = 'mp4a.40.5';\n          }\n        }\n        // HE-AAC is broken on Android, always signal audio codec as AAC even if variant manifest states otherwise\n        if (ua.indexOf('android') !== -1 && track.container !== 'audio/mpeg') { // Exclude mpeg audio\n          audioCodec = 'mp4a.40.2';\n          logger.log(`Android: force audio codec to ${audioCodec}`);\n        }\n        track.levelCodec = audioCodec;\n        track.id = data.id;\n      }\n      track = tracks.video;\n      if (track) {\n        track.levelCodec = this.levels[this.level].videoCodec;\n        track.id = data.id;\n      }\n      this.hls.trigger(Event.BUFFER_CODECS, tracks);\n      // loop through tracks that are going to be provided to bufferController\n      for (trackName in tracks) {\n        track = tracks[trackName];\n        logger.log(`main track:${trackName},container:${track.container},codecs[level/parsed]=[${track.levelCodec}/${track.codec}]`);\n        let initSegment = track.initSegment;\n        if (initSegment) {\n          this.appended = true;\n          // arm pending Buffering flag before appending a segment\n          this.pendingBuffering = true;\n          this.hls.trigger(Event.BUFFER_APPENDING, { type: trackName, data: initSegment, parent: 'main', content: 'initSegment' });\n        }\n      }\n      // trigger handler right now\n      this.tick();\n    }\n  }\n\n  onFragParsingData (data) {\n    const fragCurrent = this.fragCurrent;\n    const fragNew = data.frag;\n    if (fragCurrent &&\n        data.id === 'main' &&\n        fragNew.sn === fragCurrent.sn &&\n        fragNew.level === fragCurrent.level &&\n        !(data.type === 'audio' && this.altAudio) && // filter out main audio if audio track is loaded through audio stream controller\n        this.state === State.PARSING) {\n      let level = this.levels[this.level],\n        frag = fragCurrent;\n      if (!Number.isFinite(data.endPTS)) {\n        data.endPTS = data.startPTS + fragCurrent.duration;\n        data.endDTS = data.startDTS + fragCurrent.duration;\n      }\n\n      if (data.hasAudio === true) {\n        frag.addElementaryStream(ElementaryStreamTypes.AUDIO);\n      }\n\n      if (data.hasVideo === true) {\n        frag.addElementaryStream(ElementaryStreamTypes.VIDEO);\n      }\n\n      logger.log(`Parsed ${data.type},PTS:[${data.startPTS.toFixed(3)},${data.endPTS.toFixed(3)}],DTS:[${data.startDTS.toFixed(3)}/${data.endDTS.toFixed(3)}],nb:${data.nb},dropped:${data.dropped || 0}`);\n\n      // Detect gaps in a fragment  and try to fix it by finding a keyframe in the previous fragment (see _findFragments)\n      if (data.type === 'video') {\n        frag.dropped = data.dropped;\n        if (frag.dropped) {\n          if (!frag.backtracked) {\n            const levelDetails = level.details;\n            if (levelDetails && frag.sn === levelDetails.startSN) {\n              logger.warn('missing video frame(s) on first frag, appending with gap', frag.sn);\n            } else {\n              logger.warn('missing video frame(s), backtracking fragment', frag.sn);\n              // Return back to the IDLE state without appending to buffer\n              // Causes findFragments to backtrack a segment and find the keyframe\n              // Audio fragments arriving before video sets the nextLoadPosition, causing _findFragments to skip the backtracked fragment\n              this.fragmentTracker.removeFragment(frag);\n              frag.backtracked = true;\n              this.nextLoadPosition = data.startPTS;\n              this.state = State.IDLE;\n              this.fragPrevious = frag;\n              this.tick();\n              return;\n            }\n          } else {\n            logger.warn('Already backtracked on this fragment, appending with the gap', frag.sn);\n          }\n        } else {\n          // Only reset the backtracked flag if we've loaded the frag without any dropped frames\n          frag.backtracked = false;\n        }\n      }\n\n      let drift = LevelHelper.updateFragPTSDTS(level.details, frag, data.startPTS, data.endPTS, data.startDTS, data.endDTS),\n        hls = this.hls;\n      hls.trigger(Event.LEVEL_PTS_UPDATED, { details: level.details, level: this.level, drift: drift, type: data.type, start: data.startPTS, end: data.endPTS });\n      // has remuxer dropped video frames located before first keyframe ?\n      [data.data1, data.data2].forEach(buffer => {\n        // only append in PARSING state (rationale is that an appending error could happen synchronously on first segment appending)\n        // in that case it is useless to append following segments\n        if (buffer && buffer.length && this.state === State.PARSING) {\n          this.appended = true;\n          // arm pending Buffering flag before appending a segment\n          this.pendingBuffering = true;\n          hls.trigger(Event.BUFFER_APPENDING, { type: data.type, data: buffer, parent: 'main', content: 'data' });\n        }\n      });\n      // trigger handler right now\n      this.tick();\n    }\n  }\n\n  onFragParsed (data) {\n    const fragCurrent = this.fragCurrent;\n    const fragNew = data.frag;\n    if (fragCurrent &&\n        data.id === 'main' &&\n        fragNew.sn === fragCurrent.sn &&\n        fragNew.level === fragCurrent.level &&\n        this.state === State.PARSING) {\n      this.stats.tparsed = window.performance.now();\n      this.state = State.PARSED;\n      this._checkAppendedParsed();\n    }\n  }\n\n  onAudioTrackSwitching (data) {\n    // if any URL found on new audio track, it is an alternate audio track\n    let altAudio = !!data.url,\n      trackId = data.id;\n    // if we switch on main audio, ensure that main fragment scheduling is synced with media.buffered\n    // don't do anything if we switch to alt audio: audio stream controller is handling it.\n    // we will just have to change buffer scheduling on audioTrackSwitched\n    if (!altAudio) {\n      if (this.mediaBuffer !== this.media) {\n        logger.log('switching on main audio, use media.buffered to schedule main fragment loading');\n        this.mediaBuffer = this.media;\n        let fragCurrent = this.fragCurrent;\n        // we need to refill audio buffer from main: cancel any frag loading to speed up audio switch\n        if (fragCurrent.loader) {\n          logger.log('switching to main audio track, cancel main fragment load');\n          fragCurrent.loader.abort();\n        }\n        this.fragCurrent = null;\n        this.fragPrevious = null;\n        // destroy demuxer to force init segment generation (following audio switch)\n        if (this.demuxer) {\n          this.demuxer.destroy();\n          this.demuxer = null;\n        }\n        // switch to IDLE state to load new fragment\n        this.state = State.IDLE;\n      }\n      let hls = this.hls;\n      // switching to main audio, flush all audio and trigger track switched\n      hls.trigger(Event.BUFFER_FLUSHING, { startOffset: 0, endOffset: Number.POSITIVE_INFINITY, type: 'audio' });\n      hls.trigger(Event.AUDIO_TRACK_SWITCHED, { id: trackId });\n      this.altAudio = false;\n    }\n  }\n\n  onAudioTrackSwitched (data) {\n    let trackId = data.id,\n      altAudio = !!this.hls.audioTracks[trackId].url;\n    if (altAudio) {\n      let videoBuffer = this.videoBuffer;\n      // if we switched on alternate audio, ensure that main fragment scheduling is synced with video sourcebuffer buffered\n      if (videoBuffer && this.mediaBuffer !== videoBuffer) {\n        logger.log('switching on alternate audio, use video.buffered to schedule main fragment loading');\n        this.mediaBuffer = videoBuffer;\n      }\n    }\n    this.altAudio = altAudio;\n    this.tick();\n  }\n\n  onBufferCreated (data) {\n    let tracks = data.tracks, mediaTrack, name, alternate = false;\n    for (let type in tracks) {\n      let track = tracks[type];\n      if (track.id === 'main') {\n        name = type;\n        mediaTrack = track;\n        // keep video source buffer reference\n        if (type === 'video') {\n          this.videoBuffer = tracks[type].buffer;\n        }\n      } else {\n        alternate = true;\n      }\n    }\n    if (alternate && mediaTrack) {\n      logger.log(`alternate track found, use ${name}.buffered to schedule main fragment loading`);\n      this.mediaBuffer = mediaTrack.buffer;\n    } else {\n      this.mediaBuffer = this.media;\n    }\n  }\n\n  onBufferAppended (data) {\n    if (data.parent === 'main') {\n      const state = this.state;\n      if (state === State.PARSING || state === State.PARSED) {\n        // check if all buffers have been appended\n        this.pendingBuffering = (data.pending > 0);\n        this._checkAppendedParsed();\n      }\n    }\n  }\n\n  _checkAppendedParsed () {\n    // trigger handler right now\n    if (this.state === State.PARSED && (!this.appended || !this.pendingBuffering)) {\n      const frag = this.fragCurrent;\n      if (frag) {\n        const media = this.mediaBuffer ? this.mediaBuffer : this.media;\n        logger.log(`main buffered : ${TimeRanges.toString(media.buffered)}`);\n        this.fragPrevious = frag;\n        const stats = this.stats;\n        stats.tbuffered = window.performance.now();\n        // we should get rid of this.fragLastKbps\n        this.fragLastKbps = Math.round(8 * stats.total / (stats.tbuffered - stats.tfirst));\n        this.hls.trigger(Event.FRAG_BUFFERED, { stats: stats, frag: frag, id: 'main' });\n        this.state = State.IDLE;\n      }\n      this.tick();\n    }\n  }\n\n  onError (data) {\n    let frag = data.frag || this.fragCurrent;\n    // don't handle frag error not related to main fragment\n    if (frag && frag.type !== 'main') {\n      return;\n    }\n\n    // 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end\n    let mediaBuffered = !!this.media && BufferHelper.isBuffered(this.media, this.media.currentTime) && BufferHelper.isBuffered(this.media, this.media.currentTime + 0.5);\n\n    switch (data.details) {\n    case ErrorDetails.FRAG_LOAD_ERROR:\n    case ErrorDetails.FRAG_LOAD_TIMEOUT:\n    case ErrorDetails.KEY_LOAD_ERROR:\n    case ErrorDetails.KEY_LOAD_TIMEOUT:\n      if (!data.fatal) {\n        // keep retrying until the limit will be reached\n        if ((this.fragLoadError + 1) <= this.config.fragLoadingMaxRetry) {\n          // exponential backoff capped to config.fragLoadingMaxRetryTimeout\n          let delay = Math.min(Math.pow(2, this.fragLoadError) * this.config.fragLoadingRetryDelay, this.config.fragLoadingMaxRetryTimeout);\n          logger.warn(`mediaController: frag loading failed, retry in ${delay} ms`);\n          this.retryDate = window.performance.now() + delay;\n          // retry loading state\n          // if loadedmetadata is not set, it means that we are emergency switch down on first frag\n          // in that case, reset startFragRequested flag\n          if (!this.loadedmetadata) {\n            this.startFragRequested = false;\n            this.nextLoadPosition = this.startPosition;\n          }\n          this.fragLoadError++;\n          this.state = State.FRAG_LOADING_WAITING_RETRY;\n        } else {\n          logger.error(`mediaController: ${data.details} reaches max retry, redispatch as fatal ...`);\n          // switch error to fatal\n          data.fatal = true;\n          this.state = State.ERROR;\n        }\n      }\n      break;\n    case ErrorDetails.LEVEL_LOAD_ERROR:\n    case ErrorDetails.LEVEL_LOAD_TIMEOUT:\n      if (this.state !== State.ERROR) {\n        if (data.fatal) {\n          // if fatal error, stop processing\n          this.state = State.ERROR;\n          logger.warn(`streamController: ${data.details},switch to ${this.state} state ...`);\n        } else {\n          // in case of non fatal error while loading level, if level controller is not retrying to load level , switch back to IDLE\n          if (!data.levelRetry && this.state === State.WAITING_LEVEL) {\n            this.state = State.IDLE;\n          }\n        }\n      }\n      break;\n    case ErrorDetails.BUFFER_FULL_ERROR:\n      // if in appending state\n      if (data.parent === 'main' && (this.state === State.PARSING || this.state === State.PARSED)) {\n        // reduce max buf len if current position is buffered\n        if (mediaBuffered) {\n          this._reduceMaxBufferLength(this.config.maxBufferLength);\n          this.state = State.IDLE;\n        } else {\n          // current position is not buffered, but browser is still complaining about buffer full error\n          // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708\n          // in that case flush the whole buffer to recover\n          logger.warn('buffer full error also media.currentTime is not buffered, flush everything');\n          this.fragCurrent = null;\n          // flush everything\n          this.flushMainBuffer(0, Number.POSITIVE_INFINITY);\n        }\n      }\n      break;\n    default:\n      break;\n    }\n  }\n\n  _reduceMaxBufferLength (minLength) {\n    let config = this.config;\n    if (config.maxMaxBufferLength >= minLength) {\n      // reduce max buffer length as it might be too high. we do this to avoid loop flushing ...\n      config.maxMaxBufferLength /= 2;\n      logger.warn(`main:reduce max buffer length to ${config.maxMaxBufferLength}s`);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Checks the health of the buffer and attempts to resolve playback stalls.\n   * @private\n   */\n  _checkBuffer () {\n    const { media } = this;\n    if (!media || media.readyState === 0) {\n      // Exit early if we don't have media or if the media hasn't bufferd anything yet (readyState 0)\n      return;\n    }\n\n    const mediaBuffer = this.mediaBuffer ? this.mediaBuffer : media;\n    const buffered = mediaBuffer.buffered;\n\n    if (!this.loadedmetadata && buffered.length) {\n      this.loadedmetadata = true;\n      this._seekToStartPos();\n    } else if (this.immediateSwitch) {\n      this.immediateLevelSwitchEnd();\n    } else {\n      this.gapController.poll(this.lastCurrentTime, buffered);\n    }\n  }\n\n  onFragLoadEmergencyAborted () {\n    this.state = State.IDLE;\n    // if loadedmetadata is not set, it means that we are emergency switch down on first frag\n    // in that case, reset startFragRequested flag\n    if (!this.loadedmetadata) {\n      this.startFragRequested = false;\n      this.nextLoadPosition = this.startPosition;\n    }\n    this.tick();\n  }\n\n  onBufferFlushed () {\n    /* after successful buffer flushing, filter flushed fragments from bufferedFrags\n      use mediaBuffered instead of media (so that we will check against video.buffered ranges in case of alt audio track)\n    */\n    const media = this.mediaBuffer ? this.mediaBuffer : this.media;\n    if (media) {\n      // filter fragments potentially evicted from buffer. this is to avoid memleak on live streams\n      this.fragmentTracker.detectEvictedFragments(ElementaryStreamTypes.VIDEO, media.buffered);\n    }\n    // move to IDLE once flush complete. this should trigger new fragment loading\n    this.state = State.IDLE;\n    // reset reference to frag\n    this.fragPrevious = null;\n  }\n\n  swapAudioCodec () {\n    this.audioCodecSwap = !this.audioCodecSwap;\n  }\n\n  computeLivePosition (sliding, levelDetails) {\n    let targetLatency = this.config.liveSyncDuration !== undefined ? this.config.liveSyncDuration : this.config.liveSyncDurationCount * levelDetails.targetduration;\n    return sliding + Math.max(0, levelDetails.totalduration - targetLatency);\n  }\n\n  /**\n   * Seeks to the set startPosition if not equal to the mediaElement's current time.\n   * @private\n   */\n  _seekToStartPos () {\n    const { media } = this;\n    const currentTime = media.currentTime;\n    // only adjust currentTime if different from startPosition or if startPosition not buffered\n    // at that stage, there should be only one buffered range, as we reach that code after first fragment has been buffered\n    const startPosition = media.seeking ? currentTime : this.startPosition;\n    // if currentTime not matching with expected startPosition or startPosition not buffered but close to first buffered\n    if (currentTime !== startPosition) {\n      // if startPosition not buffered, let's seek to buffered.start(0)\n      logger.log(`target start position not buffered, seek to buffered.start(0) ${startPosition} from current time ${currentTime} `);\n      media.currentTime = startPosition;\n    }\n  }\n\n  _getAudioCodec (currentLevel) {\n    let audioCodec = this.config.defaultAudioCodec || currentLevel.audioCodec;\n    if (this.audioCodecSwap) {\n      logger.log('swapping playlist audio codec');\n      if (audioCodec) {\n        if (audioCodec.indexOf('mp4a.40.5') !== -1) {\n          audioCodec = 'mp4a.40.2';\n        } else {\n          audioCodec = 'mp4a.40.5';\n        }\n      }\n    }\n\n    return audioCodec;\n  }\n\n  get liveSyncPosition () {\n    return this._liveSyncPosition;\n  }\n\n  set liveSyncPosition (value) {\n    this._liveSyncPosition = value;\n  }\n}\nexport default StreamController;\n","import EventHandler from './event-handler';\n\n/**\n * Sub-class specialization of EventHandler base class.\n *\n * TaskLoop allows to schedule a task function being called (optionnaly repeatedly) on the main loop,\n * scheduled asynchroneously, avoiding recursive calls in the same tick.\n *\n * The task itself is implemented in `doTick`. It can be requested and called for single execution\n * using the `tick` method.\n *\n * It will be assured that the task execution method (`tick`) only gets called once per main loop \"tick\",\n * no matter how often it gets requested for execution. Execution in further ticks will be scheduled accordingly.\n *\n * If further execution requests have already been scheduled on the next tick, it can be checked with `hasNextTick`,\n * and cancelled with `clearNextTick`.\n *\n * The task can be scheduled as an interval repeatedly with a period as parameter (see `setInterval`, `clearInterval`).\n *\n * Sub-classes need to implement the `doTick` method which will effectively have the task execution routine.\n *\n * Further explanations:\n *\n * The baseclass has a `tick` method that will schedule the doTick call. It may be called synchroneously\n * only for a stack-depth of one. On re-entrant calls, sub-sequent calls are scheduled for next main loop ticks.\n *\n * When the task execution (`tick` method) is called in re-entrant way this is detected and\n * we are limiting the task execution per call stack to exactly one, but scheduling/post-poning further\n * task processing on the next main loop iteration (also known as \"next tick\" in the Node/JS runtime lingo).\n */\n\nexport default class TaskLoop extends EventHandler {\n  constructor (hls, ...events) {\n    super(hls, ...events);\n\n    this._tickInterval = null;\n    this._tickTimer = null;\n    this._tickCallCount = 0;\n    this._boundTick = this.tick.bind(this);\n  }\n\n  /**\n   * @override\n   */\n  onHandlerDestroying () {\n    // clear all timers before unregistering from event bus\n    this.clearNextTick();\n    this.clearInterval();\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  hasInterval () {\n    return !!this._tickInterval;\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  hasNextTick () {\n    return !!this._tickTimer;\n  }\n\n  /**\n   * @param {number} millis Interval time (ms)\n   * @returns {boolean} True when interval has been scheduled, false when already scheduled (no effect)\n   */\n  setInterval (millis) {\n    if (!this._tickInterval) {\n      this._tickInterval = setInterval(this._boundTick, millis);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @returns {boolean} True when interval was cleared, false when none was set (no effect)\n   */\n  clearInterval () {\n    if (this._tickInterval) {\n      clearInterval(this._tickInterval);\n      this._tickInterval = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @returns {boolean} True when timeout was cleared, false when none was set (no effect)\n   */\n  clearNextTick () {\n    if (this._tickTimer) {\n      clearTimeout(this._tickTimer);\n      this._tickTimer = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Will call the subclass doTick implementation in this main loop tick\n   * or in the next one (via setTimeout(,0)) in case it has already been called\n   * in this tick (in case this is a re-entrant call).\n   */\n  tick () {\n    this._tickCallCount++;\n    if (this._tickCallCount === 1) {\n      this.doTick();\n      // re-entrant call to tick from previous doTick call stack\n      // -> schedule a call on the next main loop iteration to process this task processing request\n      if (this._tickCallCount > 1) {\n        // make sure only one timer exists at any time at max\n        this.clearNextTick();\n        this._tickTimer = setTimeout(this._boundTick, 0);\n      }\n      this._tickCallCount = 0;\n    }\n  }\n\n  /**\n   * For subclass to implement task logic\n   * @abstract\n   */\n  doTick () {}\n}\n","/*\n * Level Controller\n*/\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport { logger } from '../utils/logger';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport { isCodecSupportedInMp4 } from '../utils/codecs';\nimport { addGroupId, computeReloadInterval } from './level-helper';\n\nconst { performance } = window;\nlet chromeOrFirefox;\n\nexport default class LevelController extends EventHandler {\n  constructor (hls) {\n    super(hls,\n      Event.MANIFEST_LOADED,\n      Event.LEVEL_LOADED,\n      Event.AUDIO_TRACK_SWITCHED,\n      Event.FRAG_LOADED,\n      Event.ERROR);\n\n    this.canload = false;\n    this.currentLevelIndex = null;\n    this.manualLevelIndex = -1;\n    this.timer = null;\n\n    chromeOrFirefox = /chrome|firefox/.test(navigator.userAgent.toLowerCase());\n  }\n\n  onHandlerDestroying () {\n    this.clearTimer();\n    this.manualLevelIndex = -1;\n  }\n\n  clearTimer () {\n    if (this.timer !== null) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n  }\n\n  startLoad () {\n    let levels = this._levels;\n\n    this.canload = true;\n    this.levelRetryCount = 0;\n\n    // clean up live level details to force reload them, and reset load errors\n    if (levels) {\n      levels.forEach(level => {\n        level.loadError = 0;\n        const levelDetails = level.details;\n        if (levelDetails && levelDetails.live) {\n          level.details = undefined;\n        }\n      });\n    }\n    // speed up live playlist refresh if timer exists\n    if (this.timer !== null) {\n      this.loadLevel();\n    }\n  }\n\n  stopLoad () {\n    this.canload = false;\n  }\n\n  onManifestLoaded (data) {\n    let levels = [];\n    let audioTracks = [];\n    let bitrateStart;\n    let levelSet = {};\n    let levelFromSet = null;\n    let videoCodecFound = false;\n    let audioCodecFound = false;\n\n    // regroup redundant levels together\n    data.levels.forEach(level => {\n      const attributes = level.attrs;\n      level.loadError = 0;\n      level.fragmentError = false;\n\n      videoCodecFound = videoCodecFound || !!level.videoCodec;\n      audioCodecFound = audioCodecFound || !!level.audioCodec;\n\n      // erase audio codec info if browser does not support mp4a.40.34.\n      // demuxer will autodetect codec and fallback to mpeg/audio\n      if (chromeOrFirefox && level.audioCodec && level.audioCodec.indexOf('mp4a.40.34') !== -1) {\n        level.audioCodec = undefined;\n      }\n\n      levelFromSet = levelSet[level.bitrate]; // FIXME: we would also have to match the resolution here\n\n      if (!levelFromSet) {\n        level.url = [level.url];\n        level.urlId = 0;\n        levelSet[level.bitrate] = level;\n        levels.push(level);\n      } else {\n        levelFromSet.url.push(level.url);\n      }\n\n      if (attributes) {\n        if (attributes.AUDIO) {\n          audioCodecFound = true;\n          addGroupId(levelFromSet || level, 'audio', attributes.AUDIO);\n        }\n        if (attributes.SUBTITLES) {\n          addGroupId(levelFromSet || level, 'text', attributes.SUBTITLES);\n        }\n      }\n    });\n\n    // remove audio-only level if we also have levels with audio+video codecs signalled\n    if (videoCodecFound && audioCodecFound) {\n      levels = levels.filter(({ videoCodec }) => !!videoCodec);\n    }\n\n    // only keep levels with supported audio/video codecs\n    levels = levels.filter(({ audioCodec, videoCodec }) => {\n      return (!audioCodec || isCodecSupportedInMp4(audioCodec, 'audio')) && (!videoCodec || isCodecSupportedInMp4(videoCodec, 'video'));\n    });\n\n    if (data.audioTracks) {\n      audioTracks = data.audioTracks.filter(track => !track.audioCodec || isCodecSupportedInMp4(track.audioCodec, 'audio'));\n      // Reassign id's after filtering since they're used as array indices\n      audioTracks.forEach((track, index) => {\n        track.id = index;\n      });\n    }\n\n    if (levels.length > 0) {\n      // start bitrate is the first bitrate of the manifest\n      bitrateStart = levels[0].bitrate;\n      // sort level on bitrate\n      levels.sort((a, b) => a.bitrate - b.bitrate);\n      this._levels = levels;\n      // find index of first level in sorted levels\n      for (let i = 0; i < levels.length; i++) {\n        if (levels[i].bitrate === bitrateStart) {\n          this._firstLevel = i;\n          logger.log(`manifest loaded,${levels.length} level(s) found, first bitrate:${bitrateStart}`);\n          break;\n        }\n      }\n\n      // Audio is only alternate if manifest include a URI along with the audio group tag\n      this.hls.trigger(Event.MANIFEST_PARSED, {\n        levels,\n        audioTracks,\n        firstLevel: this._firstLevel,\n        stats: data.stats,\n        audio: audioCodecFound,\n        video: videoCodecFound,\n        altAudio: audioTracks.some(t => !!t.url)\n      });\n    } else {\n      this.hls.trigger(Event.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR,\n        fatal: true,\n        url: this.hls.url,\n        reason: 'no level with compatible codecs found in manifest'\n      });\n    }\n  }\n\n  get levels () {\n    return this._levels;\n  }\n\n  get level () {\n    return this.currentLevelIndex;\n  }\n\n  set level (newLevel) {\n    let levels = this._levels;\n    if (levels) {\n      newLevel = Math.min(newLevel, levels.length - 1);\n      if (this.currentLevelIndex !== newLevel || !levels[newLevel].details) {\n        this.setLevelInternal(newLevel);\n      }\n    }\n  }\n\n  setLevelInternal (newLevel) {\n    const levels = this._levels;\n    const hls = this.hls;\n    // check if level idx is valid\n    if (newLevel >= 0 && newLevel < levels.length) {\n      // stopping live reloading timer if any\n      this.clearTimer();\n      if (this.currentLevelIndex !== newLevel) {\n        logger.log(`switching to level ${newLevel}`);\n        this.currentLevelIndex = newLevel;\n        const levelProperties = levels[newLevel];\n        levelProperties.level = newLevel;\n        hls.trigger(Event.LEVEL_SWITCHING, levelProperties);\n      }\n      const level = levels[newLevel];\n      const levelDetails = level.details;\n\n      // check if we need to load playlist for this level\n      if (!levelDetails || levelDetails.live) {\n        // level not retrieved yet, or live playlist we need to (re)load it\n        let urlId = level.urlId;\n        hls.trigger(Event.LEVEL_LOADING, { url: level.url[urlId], level: newLevel, id: urlId });\n      }\n    } else {\n      // invalid level id given, trigger error\n      hls.trigger(Event.ERROR, {\n        type: ErrorTypes.OTHER_ERROR,\n        details: ErrorDetails.LEVEL_SWITCH_ERROR,\n        level: newLevel,\n        fatal: false,\n        reason: 'invalid level idx'\n      });\n    }\n  }\n\n  get manualLevel () {\n    return this.manualLevelIndex;\n  }\n\n  set manualLevel (newLevel) {\n    this.manualLevelIndex = newLevel;\n    if (this._startLevel === undefined) {\n      this._startLevel = newLevel;\n    }\n\n    if (newLevel !== -1) {\n      this.level = newLevel;\n    }\n  }\n\n  get firstLevel () {\n    return this._firstLevel;\n  }\n\n  set firstLevel (newLevel) {\n    this._firstLevel = newLevel;\n  }\n\n  get startLevel () {\n    // hls.startLevel takes precedence over config.startLevel\n    // if none of these values are defined, fallback on this._firstLevel (first quality level appearing in variant manifest)\n    if (this._startLevel === undefined) {\n      let configStartLevel = this.hls.config.startLevel;\n      if (configStartLevel !== undefined) {\n        return configStartLevel;\n      } else {\n        return this._firstLevel;\n      }\n    } else {\n      return this._startLevel;\n    }\n  }\n\n  set startLevel (newLevel) {\n    this._startLevel = newLevel;\n  }\n\n  onError (data) {\n    if (data.fatal) {\n      if (data.type === ErrorTypes.NETWORK_ERROR) {\n        this.clearTimer();\n      }\n\n      return;\n    }\n\n    let levelError = false, fragmentError = false;\n    let levelIndex;\n\n    // try to recover not fatal errors\n    switch (data.details) {\n    case ErrorDetails.FRAG_LOAD_ERROR:\n    case ErrorDetails.FRAG_LOAD_TIMEOUT:\n    case ErrorDetails.KEY_LOAD_ERROR:\n    case ErrorDetails.KEY_LOAD_TIMEOUT:\n      levelIndex = data.frag.level;\n      fragmentError = true;\n      break;\n    case ErrorDetails.LEVEL_LOAD_ERROR:\n    case ErrorDetails.LEVEL_LOAD_TIMEOUT:\n      levelIndex = data.context.level;\n      levelError = true;\n      break;\n    case ErrorDetails.REMUX_ALLOC_ERROR:\n      levelIndex = data.level;\n      levelError = true;\n      break;\n    }\n\n    if (levelIndex !== undefined) {\n      this.recoverLevel(data, levelIndex, levelError, fragmentError);\n    }\n  }\n\n  /**\n   * Switch to a redundant stream if any available.\n   * If redundant stream is not available, emergency switch down if ABR mode is enabled.\n   *\n   * @param {Object} errorEvent\n   * @param {Number} levelIndex current level index\n   * @param {Boolean} levelError\n   * @param {Boolean} fragmentError\n   */\n  // FIXME Find a better abstraction where fragment/level retry management is well decoupled\n  recoverLevel (errorEvent, levelIndex, levelError, fragmentError) {\n    let { config } = this.hls;\n    let { details: errorDetails } = errorEvent;\n    let level = this._levels[levelIndex];\n    let redundantLevels, delay, nextLevel;\n\n    level.loadError++;\n    level.fragmentError = fragmentError;\n\n    if (levelError) {\n      if ((this.levelRetryCount + 1) <= config.levelLoadingMaxRetry) {\n        // exponential backoff capped to max retry timeout\n        delay = Math.min(Math.pow(2, this.levelRetryCount) * config.levelLoadingRetryDelay, config.levelLoadingMaxRetryTimeout);\n        // Schedule level reload\n        this.timer = setTimeout(() => this.loadLevel(), delay);\n        // boolean used to inform stream controller not to switch back to IDLE on non fatal error\n        errorEvent.levelRetry = true;\n        this.levelRetryCount++;\n        logger.warn(`level controller, ${errorDetails}, retry in ${delay} ms, current retry count is ${this.levelRetryCount}`);\n      } else {\n        logger.error(`level controller, cannot recover from ${errorDetails} error`);\n        this.currentLevelIndex = null;\n        // stopping live reloading timer if any\n        this.clearTimer();\n        // switch error to fatal\n        errorEvent.fatal = true;\n        return;\n      }\n    }\n\n    // Try any redundant streams if available for both errors: level and fragment\n    // If level.loadError reaches redundantLevels it means that we tried them all, no hope  => let's switch down\n    if (levelError || fragmentError) {\n      redundantLevels = level.url.length;\n\n      if (redundantLevels > 1 && level.loadError < redundantLevels) {\n        level.urlId = (level.urlId + 1) % redundantLevels;\n        level.details = undefined;\n\n        logger.warn(`level controller, ${errorDetails} for level ${levelIndex}: switching to redundant URL-id ${level.urlId}`);\n\n        // console.log('Current audio track group ID:', this.hls.audioTracks[this.hls.audioTrack].groupId);\n        // console.log('New video quality level audio group id:', level.attrs.AUDIO);\n      } else {\n        // Search for available level\n        if (this.manualLevelIndex === -1) {\n          // When lowest level has been reached, let's start hunt from the top\n          nextLevel = (levelIndex === 0) ? this._levels.length - 1 : levelIndex - 1;\n          logger.warn(`level controller, ${errorDetails}: switch to ${nextLevel}`);\n          this.hls.nextAutoLevel = this.currentLevelIndex = nextLevel;\n        } else if (fragmentError) {\n          // Allow fragment retry as long as configuration allows.\n          // reset this._level so that another call to set level() will trigger again a frag load\n          logger.warn(`level controller, ${errorDetails}: reload a fragment`);\n          this.currentLevelIndex = null;\n        }\n      }\n    }\n  }\n\n  // reset errors on the successful load of a fragment\n  onFragLoaded ({ frag }) {\n    if (frag !== undefined && frag.type === 'main') {\n      const level = this._levels[frag.level];\n      if (level !== undefined) {\n        level.fragmentError = false;\n        level.loadError = 0;\n        this.levelRetryCount = 0;\n      }\n    }\n  }\n\n  onLevelLoaded (data) {\n    const { level, details } = data;\n    // only process level loaded events matching with expected level\n    if (level !== this.currentLevelIndex) {\n      return;\n    }\n\n    const curLevel = this._levels[level];\n    // reset level load error counter on successful level loaded only if there is no issues with fragments\n    if (!curLevel.fragmentError) {\n      curLevel.loadError = 0;\n      this.levelRetryCount = 0;\n    }\n    // if current playlist is a live playlist, arm a timer to reload it\n    if (details.live) {\n      const reloadInterval = computeReloadInterval(curLevel.details, details, data.stats.trequest);\n      logger.log(`live playlist, reload in ${Math.round(reloadInterval)} ms`);\n      this.timer = setTimeout(() => this.loadLevel(), reloadInterval);\n    } else {\n      this.clearTimer();\n    }\n  }\n\n  onAudioTrackSwitched (data) {\n    const audioGroupId = this.hls.audioTracks[data.id].groupId;\n\n    const currentLevel = this.hls.levels[this.currentLevelIndex];\n    if (!currentLevel) {\n      return;\n    }\n\n    if (currentLevel.audioGroupIds) {\n      let urlId = -1;\n\n      for (let i = 0; i < currentLevel.audioGroupIds.length; i++) {\n        if (currentLevel.audioGroupIds[i] === audioGroupId) {\n          urlId = i;\n          break;\n        }\n      }\n\n      if (urlId !== currentLevel.urlId) {\n        currentLevel.urlId = urlId;\n        this.startLoad();\n      }\n    }\n  }\n\n  loadLevel () {\n    logger.debug('call to loadLevel');\n\n    if (this.currentLevelIndex !== null && this.canload) {\n      const levelObject = this._levels[this.currentLevelIndex];\n\n      if (typeof levelObject === 'object' &&\n        levelObject.url.length > 0) {\n        const level = this.currentLevelIndex;\n        const id = levelObject.urlId;\n        const url = levelObject.url[id];\n\n        logger.log(`Attempt loading level index ${level} with URL-id ${id}`);\n\n        // console.log('Current audio track group ID:', this.hls.audioTracks[this.hls.audioTrack].groupId);\n        // console.log('New video quality level audio group id:', levelObject.attrs.AUDIO, level);\n\n        this.hls.trigger(Event.LEVEL_LOADING, { url, level, id });\n      }\n    }\n  }\n\n  get nextLoadLevel () {\n    if (this.manualLevelIndex !== -1) {\n      return this.manualLevelIndex;\n    } else {\n      return this.hls.nextAutoLevel;\n    }\n  }\n\n  set nextLoadLevel (nextLevel) {\n    this.level = nextLevel;\n    if (this.manualLevelIndex === -1) {\n      this.hls.nextAutoLevel = nextLevel;\n    }\n  }\n}\n","\nexport function sendAddTrackEvent (track, videoEl) {\n  let event = null;\n  try {\n    event = new window.Event('addtrack');\n  } catch (err) {\n    // for IE11\n    event = document.createEvent('Event');\n    event.initEvent('addtrack', false, false);\n  }\n  event.track = track;\n  videoEl.dispatchEvent(event);\n}\n\nexport function sendRemoveTrackEvent (track, videoEl) {\n  // As of 05/2018 there is no working browser removetrack event\n  // Disabling the track doesn't remove it but does signify it isn't in use\n  track.mode = 'disabled';\n}\n\nexport function clearCurrentCues (track) {\n  if (track && track.cues) {\n    while (track.cues.length > 0) {\n      track.removeCue(track.cues[0]);\n    }\n  }\n}\n","/*\n * id3 metadata track controller\n*/\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport ID3 from '../demux/id3';\nimport { logger } from '../utils/logger';\nimport { sendAddTrackEvent, clearCurrentCues } from '../utils/texttrack-utils';\n\nclass ID3TrackController extends EventHandler {\n  constructor (hls) {\n    super(hls,\n      Event.MEDIA_ATTACHED,\n      Event.MEDIA_DETACHING,\n      Event.FRAG_PARSING_METADATA);\n    this.id3Track = undefined;\n    this.media = undefined;\n  }\n\n  destroy () {\n    EventHandler.prototype.destroy.call(this);\n  }\n\n  // Add ID3 metatadata text track.\n  onMediaAttached (data) {\n    this.media = data.media;\n    if (!this.media) {\n\n    }\n  }\n\n  onMediaDetaching () {\n    clearCurrentCues(this.id3Track);\n    this.id3Track = undefined;\n    this.media = undefined;\n  }\n\n  getID3Track (textTracks) {\n    for (let i = 0; i < textTracks.length; i++) {\n      let textTrack = textTracks[i];\n      if (textTrack.kind === 'metadata' && textTrack.label === 'id3') {\n        // send 'addtrack' when reusing the textTrack for metadata,\n        // same as what we do for captions\n        sendAddTrackEvent(textTrack, this.media);\n\n        return textTrack;\n      }\n    }\n    return this.media.addTextTrack('metadata', 'id3');\n  }\n\n  onFragParsingMetadata (data) {\n    const fragment = data.frag;\n    const samples = data.samples;\n\n    // create track dynamically\n    if (!this.id3Track) {\n      this.id3Track = this.getID3Track(this.media.textTracks);\n      this.id3Track.mode = 'hidden';\n    }\n\n    // Attempt to recreate Safari functionality by creating\n    // WebKitDataCue objects when available and store the decoded\n    // ID3 data in the value property of the cue\n    let Cue = window.WebKitDataCue || window.VTTCue || window.TextTrackCue;\n\n    for (let i = 0; i < samples.length; i++) {\n      const frames = ID3.getID3Frames(samples[i].data);\n      if (frames) {\n        const startTime = samples[i].pts;\n        let endTime = i < samples.length - 1 ? samples[i + 1].pts : fragment.endPTS;\n\n        if (startTime === endTime) {\n          // Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE\n          endTime += 0.0001;\n        } else if (startTime > endTime) {\n          logger.warn('detected an id3 sample with endTime < startTime, adjusting endTime to (startTime + 0.25)');\n          endTime = startTime + 0.25;\n        }\n\n        for (let j = 0; j < frames.length; j++) {\n          const frame = frames[j];\n          // Safari doesn't put the timestamp frame in the TextTrack\n          if (!ID3.isTimeStampFrame(frame)) {\n            const cue = new Cue(startTime, endTime, '');\n            cue.value = frame;\n            this.id3Track.addCue(cue);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default ID3TrackController;\n","/*\n * compute an Exponential Weighted moving average\n * - https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n *  - heavily inspired from shaka-player\n */\n\nclass EWMA {\n  //  About half of the estimated value will be from the last |halfLife| samples by weight.\n  constructor (halfLife) {\n    // Larger values of alpha expire historical data more slowly.\n    this.alpha_ = halfLife ? Math.exp(Math.log(0.5) / halfLife) : 0;\n    this.estimate_ = 0;\n    this.totalWeight_ = 0;\n  }\n\n  sample (weight, value) {\n    let adjAlpha = Math.pow(this.alpha_, weight);\n    this.estimate_ = value * (1 - adjAlpha) + adjAlpha * this.estimate_;\n    this.totalWeight_ += weight;\n  }\n\n  getTotalWeight () {\n    return this.totalWeight_;\n  }\n\n  getEstimate () {\n    if (this.alpha_) {\n      let zeroFactor = 1 - Math.pow(this.alpha_, this.totalWeight_);\n      return this.estimate_ / zeroFactor;\n    } else {\n      return this.estimate_;\n    }\n  }\n}\n\nexport default EWMA;\n","/*\n * EWMA Bandwidth Estimator\n *  - heavily inspired from shaka-player\n * Tracks bandwidth samples and estimates available bandwidth.\n * Based on the minimum of two exponentially-weighted moving averages with\n * different half-lives.\n */\n\nimport EWMA from '../utils/ewma';\n\nclass EwmaBandWidthEstimator {\n  constructor (hls, slow, fast, defaultEstimate) {\n    this.hls = hls;\n    this.defaultEstimate_ = defaultEstimate;\n    this.minWeight_ = 0.001;\n    this.minDelayMs_ = 50;\n    this.slow_ = new EWMA(slow);\n    this.fast_ = new EWMA(fast);\n  }\n\n  sample (durationMs, numBytes) {\n    durationMs = Math.max(durationMs, this.minDelayMs_);\n    let numBits = 8 * numBytes,\n      // weight is duration in seconds\n      durationS = durationMs / 1000,\n      // value is bandwidth in bits/s\n      bandwidthInBps = numBits / durationS;\n    this.fast_.sample(durationS, bandwidthInBps);\n    this.slow_.sample(durationS, bandwidthInBps);\n  }\n\n  canEstimate () {\n    let fast = this.fast_;\n    return (fast && fast.getTotalWeight() >= this.minWeight_);\n  }\n\n  getEstimate () {\n    if (this.canEstimate()) {\n      // console.log('slow estimate:'+ Math.round(this.slow_.getEstimate()));\n      // console.log('fast estimate:'+ Math.round(this.fast_.getEstimate()));\n      // Take the minimum of these two estimates.  This should have the effect of\n      // adapting down quickly, but up more slowly.\n      return Math.min(this.fast_.getEstimate(), this.slow_.getEstimate());\n    } else {\n      return this.defaultEstimate_;\n    }\n  }\n\n  destroy () {\n  }\n}\nexport default EwmaBandWidthEstimator;\n","/*\n * simple ABR Controller\n *  - compute next level based on last fragment bw heuristics\n *  - implement an abandon rules triggered if we have less than 2 frag buffered and if computed bw shows that we risk buffer stalling\n */\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport { BufferHelper } from '../utils/buffer-helper';\nimport { ErrorDetails } from '../errors';\nimport { logger } from '../utils/logger';\nimport EwmaBandWidthEstimator from '../utils/ewma-bandwidth-estimator';\n\nconst { performance } = window;\n\nclass AbrController extends EventHandler {\n  constructor (hls) {\n    super(hls, Event.FRAG_LOADING,\n      Event.FRAG_LOADED,\n      Event.FRAG_BUFFERED,\n      Event.ERROR);\n    this.lastLoadedFragLevel = 0;\n    this._nextAutoLevel = -1;\n    this.hls = hls;\n    this.timer = null;\n    this._bwEstimator = null;\n    this.onCheck = this._abandonRulesCheck.bind(this);\n  }\n\n  destroy () {\n    this.clearTimer();\n    EventHandler.prototype.destroy.call(this);\n  }\n\n  onFragLoading (data) {\n    const frag = data.frag;\n    if (frag.type === 'main') {\n      if (!this.timer) {\n        this.fragCurrent = frag;\n        this.timer = setInterval(this.onCheck, 100);\n      }\n\n      // lazy init of BwEstimator, rationale is that we use different params for Live/VoD\n      // so we need to wait for stream manifest / playlist type to instantiate it.\n      if (!this._bwEstimator) {\n        const hls = this.hls;\n        const config = hls.config;\n        const level = frag.level;\n        const isLive = hls.levels[level].details.live;\n\n        let ewmaFast;\n        let ewmaSlow;\n        if (isLive) {\n          ewmaFast = config.abrEwmaFastLive;\n          ewmaSlow = config.abrEwmaSlowLive;\n        } else {\n          ewmaFast = config.abrEwmaFastVoD;\n          ewmaSlow = config.abrEwmaSlowVoD;\n        }\n        this._bwEstimator = new EwmaBandWidthEstimator(hls, ewmaSlow, ewmaFast, config.abrEwmaDefaultEstimate);\n      }\n    }\n  }\n\n  _abandonRulesCheck () {\n    /*\n      monitor fragment retrieval time...\n      we compute expected time of arrival of the complete fragment.\n      we compare it to expected time of buffer starvation\n    */\n    const hls = this.hls;\n    const video = hls.media;\n    const frag = this.fragCurrent;\n\n    if (!frag) {\n      return;\n    }\n\n    const loader = frag.loader;\n    const minAutoLevel = hls.minAutoLevel;\n\n    // if loader has been destroyed or loading has been aborted, stop timer and return\n    if (!loader || (loader.stats && loader.stats.aborted)) {\n      logger.warn('frag loader destroy or aborted, disarm abandonRules');\n      this.clearTimer();\n      // reset forced auto level value so that next level will be selected\n      this._nextAutoLevel = -1;\n      return;\n    }\n    let stats = loader.stats;\n    /* only monitor frag retrieval time if\n    (video not paused OR first fragment being loaded(ready state === HAVE_NOTHING = 0)) AND autoswitching enabled AND not lowest level (=> means that we have several levels) */\n    if (video && stats && ((!video.paused && (video.playbackRate !== 0)) || !video.readyState) && frag.autoLevel && frag.level) {\n      const requestDelay = performance.now() - stats.trequest;\n      const playbackRate = Math.abs(video.playbackRate);\n\n      // monitor fragment load progress after half of expected fragment duration,to stabilize bitrate\n      if (requestDelay > (500 * frag.duration / playbackRate)) {\n        const levels = hls.levels;\n        const loadRate = Math.max(1, stats.bw ? stats.bw / 8 : stats.loaded * 1000 / requestDelay); // byte/s; at least 1 byte/s to avoid division by zero\n\n        // compute expected fragment length using frag duration and level bitrate. also ensure that expected len is gte than already loaded size\n        const level = levels[frag.level];\n        const levelBitrate = level.realBitrate ? Math.max(level.realBitrate, level.bitrate) : level.bitrate;\n        const expectedLen = stats.total ? stats.total : Math.max(stats.loaded, Math.round(frag.duration * levelBitrate / 8));\n        const pos = video.currentTime;\n        const fragLoadedDelay = (expectedLen - stats.loaded) / loadRate;\n        const bufferStarvationDelay = (BufferHelper.bufferInfo(video, pos, hls.config.maxBufferHole).end - pos) / playbackRate;\n\n        // consider emergency switch down only if we have less than 2 frag buffered AND\n        // time to finish loading current fragment is bigger than buffer starvation delay\n        // ie if we risk buffer starvation if bw does not increase quickly\n        if ((bufferStarvationDelay < (2 * frag.duration / playbackRate)) && (fragLoadedDelay > bufferStarvationDelay)) {\n          let fragLevelNextLoadedDelay;\n          let nextLoadLevel;\n          // lets iterate through lower level and try to find the biggest one that could avoid rebuffering\n          // we start from current level - 1 and we step down , until we find a matching level\n          for (nextLoadLevel = frag.level - 1; nextLoadLevel > minAutoLevel; nextLoadLevel--) {\n            // compute time to load next fragment at lower level\n            // 0.8 : consider only 80% of current bw to be conservative\n            // 8 = bits per byte (bps/Bps)\n            const levelNextBitrate = levels[nextLoadLevel].realBitrate\n              ? Math.max(levels[nextLoadLevel].realBitrate, levels[nextLoadLevel].bitrate)\n              : levels[nextLoadLevel].bitrate;\n\n            const fragLevelNextLoadedDelay = frag.duration * levelNextBitrate / (8 * 0.8 * loadRate);\n\n            if (fragLevelNextLoadedDelay < bufferStarvationDelay) {\n              // we found a lower level that be rebuffering free with current estimated bw !\n              break;\n            }\n          }\n          // only emergency switch down if it takes less time to load new fragment at lowest level instead\n          // of finishing loading current one ...\n          if (fragLevelNextLoadedDelay < fragLoadedDelay) {\n            logger.warn(`loading too slow, abort fragment loading and switch to level ${nextLoadLevel}:fragLoadedDelay[${nextLoadLevel}]<fragLoadedDelay[${frag.level - 1}];bufferStarvationDelay:${fragLevelNextLoadedDelay.toFixed(1)}<${fragLoadedDelay.toFixed(1)}:${bufferStarvationDelay.toFixed(1)}`);\n            // force next load level in auto mode\n            hls.nextLoadLevel = nextLoadLevel;\n            // update bw estimate for this fragment before cancelling load (this will help reducing the bw)\n            this._bwEstimator.sample(requestDelay, stats.loaded);\n            // abort fragment loading\n            loader.abort();\n            // stop abandon rules timer\n            this.clearTimer();\n            hls.trigger(Event.FRAG_LOAD_EMERGENCY_ABORTED, { frag: frag, stats: stats });\n          }\n        }\n      }\n    }\n  }\n\n  onFragLoaded (data) {\n    const frag = data.frag;\n    if (frag.type === 'main' && Number.isFinite(frag.sn)) {\n      // stop monitoring bw once frag loaded\n      this.clearTimer();\n      // store level id after successful fragment load\n      this.lastLoadedFragLevel = frag.level;\n      // reset forced auto level value so that next level will be selected\n      this._nextAutoLevel = -1;\n\n      // compute level average bitrate\n      if (this.hls.config.abrMaxWithRealBitrate) {\n        const level = this.hls.levels[frag.level];\n        let loadedBytes = (level.loaded ? level.loaded.bytes : 0) + data.stats.loaded;\n        let loadedDuration = (level.loaded ? level.loaded.duration : 0) + data.frag.duration;\n        level.loaded = { bytes: loadedBytes, duration: loadedDuration };\n        level.realBitrate = Math.round(8 * loadedBytes / loadedDuration);\n      }\n      // if fragment has been loaded to perform a bitrate test,\n      if (data.frag.bitrateTest) {\n        let stats = data.stats;\n        stats.tparsed = stats.tbuffered = stats.tload;\n        this.onFragBuffered(data);\n      }\n    }\n  }\n\n  onFragBuffered (data) {\n    const stats = data.stats;\n    const frag = data.frag;\n    // only update stats on first frag buffering\n    // if same frag is loaded multiple times, it might be in browser cache, and loaded quickly\n    // and leading to wrong bw estimation\n    // on bitrate test, also only update stats once (if tload = tbuffered == on FRAG_LOADED)\n    if (stats.aborted !== true && frag.type === 'main' && Number.isFinite(frag.sn) && ((!frag.bitrateTest || stats.tload === stats.tbuffered))) {\n      // use tparsed-trequest instead of tbuffered-trequest to compute fragLoadingProcessing; rationale is that  buffer appending only happens once media is attached\n      // in case we use config.startFragPrefetch while media is not attached yet, fragment might be parsed while media not attached yet, but it will only be buffered on media attached\n      // as a consequence it could happen really late in the process. meaning that appending duration might appears huge ... leading to underestimated throughput estimation\n      let fragLoadingProcessingMs = stats.tparsed - stats.trequest;\n      logger.log(`latency/loading/parsing/append/kbps:${Math.round(stats.tfirst - stats.trequest)}/${Math.round(stats.tload - stats.tfirst)}/${Math.round(stats.tparsed - stats.tload)}/${Math.round(stats.tbuffered - stats.tparsed)}/${Math.round(8 * stats.loaded / (stats.tbuffered - stats.trequest))}`);\n      this._bwEstimator.sample(fragLoadingProcessingMs, stats.loaded);\n      stats.bwEstimate = this._bwEstimator.getEstimate();\n      // if fragment has been loaded to perform a bitrate test, (hls.startLevel = -1), store bitrate test delay duration\n      if (frag.bitrateTest) {\n        this.bitrateTestDelay = fragLoadingProcessingMs / 1000;\n      } else {\n        this.bitrateTestDelay = 0;\n      }\n    }\n  }\n\n  onError (data) {\n    // stop timer in case of frag loading error\n    switch (data.details) {\n    case ErrorDetails.FRAG_LOAD_ERROR:\n    case ErrorDetails.FRAG_LOAD_TIMEOUT:\n      this.clearTimer();\n      break;\n    default:\n      break;\n    }\n  }\n\n  clearTimer () {\n    clearInterval(this.timer);\n    this.timer = null;\n  }\n\n  // return next auto level\n  get nextAutoLevel () {\n    const forcedAutoLevel = this._nextAutoLevel;\n    const bwEstimator = this._bwEstimator;\n    // in case next auto level has been forced, and bw not available or not reliable, return forced value\n    if (forcedAutoLevel !== -1 && (!bwEstimator || !bwEstimator.canEstimate())) {\n      return forcedAutoLevel;\n    }\n\n    // compute next level using ABR logic\n    let nextABRAutoLevel = this._nextABRAutoLevel;\n    // if forced auto level has been defined, use it to cap ABR computed quality level\n    if (forcedAutoLevel !== -1) {\n      nextABRAutoLevel = Math.min(forcedAutoLevel, nextABRAutoLevel);\n    }\n\n    return nextABRAutoLevel;\n  }\n  get _nextABRAutoLevel () {\n    let hls = this.hls;\n    const { maxAutoLevel, levels, config, minAutoLevel } = hls;\n    const video = hls.media;\n    const currentLevel = this.lastLoadedFragLevel;\n    const currentFragDuration = this.fragCurrent ? this.fragCurrent.duration : 0;\n    const pos = (video ? video.currentTime : 0);\n\n    // playbackRate is the absolute value of the playback rate; if video.playbackRate is 0, we use 1 to load as\n    // if we're playing back at the normal rate.\n    const playbackRate = ((video && (video.playbackRate !== 0)) ? Math.abs(video.playbackRate) : 1.0);\n    const avgbw = this._bwEstimator ? this._bwEstimator.getEstimate() : config.abrEwmaDefaultEstimate;\n    // bufferStarvationDelay is the wall-clock time left until the playback buffer is exhausted.\n    const bufferStarvationDelay = (BufferHelper.bufferInfo(video, pos, config.maxBufferHole).end - pos) / playbackRate;\n\n    // First, look to see if we can find a level matching with our avg bandwidth AND that could also guarantee no rebuffering at all\n    let bestLevel = this._findBestLevel(currentLevel, currentFragDuration, avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, config.abrBandWidthFactor, config.abrBandWidthUpFactor, levels);\n    if (bestLevel >= 0) {\n      return bestLevel;\n    } else {\n      logger.trace('rebuffering expected to happen, lets try to find a quality level minimizing the rebuffering');\n      // not possible to get rid of rebuffering ... let's try to find level that will guarantee less than maxStarvationDelay of rebuffering\n      // if no matching level found, logic will return 0\n      let maxStarvationDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxStarvationDelay) : config.maxStarvationDelay;\n      let bwFactor = config.abrBandWidthFactor;\n      let bwUpFactor = config.abrBandWidthUpFactor;\n\n      if (bufferStarvationDelay === 0) {\n        // in case buffer is empty, let's check if previous fragment was loaded to perform a bitrate test\n        let bitrateTestDelay = this.bitrateTestDelay;\n        if (bitrateTestDelay) {\n          // if it is the case, then we need to adjust our max starvation delay using maxLoadingDelay config value\n          // max video loading delay used in  automatic start level selection :\n          // in that mode ABR controller will ensure that video loading time (ie the time to fetch the first fragment at lowest quality level +\n          // the time to fetch the fragment at the appropriate quality level is less than ```maxLoadingDelay``` )\n          // cap maxLoadingDelay and ensure it is not bigger 'than bitrate test' frag duration\n          const maxLoadingDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxLoadingDelay) : config.maxLoadingDelay;\n          maxStarvationDelay = maxLoadingDelay - bitrateTestDelay;\n          logger.trace(`bitrate test took ${Math.round(1000 * bitrateTestDelay)}ms, set first fragment max fetchDuration to ${Math.round(1000 * maxStarvationDelay)} ms`);\n          // don't use conservative factor on bitrate test\n          bwFactor = bwUpFactor = 1;\n        }\n      }\n      bestLevel = this._findBestLevel(currentLevel, currentFragDuration, avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay + maxStarvationDelay, bwFactor, bwUpFactor, levels);\n      return Math.max(bestLevel, 0);\n    }\n  }\n\n  _findBestLevel (currentLevel, currentFragDuration, currentBw, minAutoLevel, maxAutoLevel, maxFetchDuration, bwFactor, bwUpFactor, levels) {\n    for (let i = maxAutoLevel; i >= minAutoLevel; i--) {\n      let levelInfo = levels[i];\n\n      if (!levelInfo) {\n        continue;\n      }\n\n      const levelDetails = levelInfo.details;\n      const avgDuration = levelDetails ? levelDetails.totalduration / levelDetails.fragments.length : currentFragDuration;\n      const live = levelDetails ? levelDetails.live : false;\n\n      let adjustedbw;\n      // follow algorithm captured from stagefright :\n      // https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/httplive/LiveSession.cpp\n      // Pick the highest bandwidth stream below or equal to estimated bandwidth.\n      // consider only 80% of the available bandwidth, but if we are switching up,\n      // be even more conservative (70%) to avoid overestimating and immediately\n      // switching back.\n      if (i <= currentLevel) {\n        adjustedbw = bwFactor * currentBw;\n      } else {\n        adjustedbw = bwUpFactor * currentBw;\n      }\n\n      const bitrate = levels[i].realBitrate ? Math.max(levels[i].realBitrate, levels[i].bitrate) : levels[i].bitrate;\n      const fetchDuration = bitrate * avgDuration / adjustedbw;\n\n      logger.trace(`level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: ${i}/${Math.round(adjustedbw)}/${bitrate}/${avgDuration}/${maxFetchDuration}/${fetchDuration}`);\n      // if adjusted bw is greater than level bitrate AND\n      if (adjustedbw > bitrate &&\n      // fragment fetchDuration unknown OR live stream OR fragment fetchDuration less than max allowed fetch duration, then this level matches\n      // we don't account for max Fetch Duration for live streams, this is to avoid switching down when near the edge of live sliding window ...\n      // special case to support startLevel = -1 (bitrateTest) on live streams : in that case we should not exit loop so that _findBestLevel will return -1\n        (!fetchDuration || (live && !this.bitrateTestDelay) || fetchDuration < maxFetchDuration)) {\n        // as we are looping from highest to lowest, this will return the best achievable quality level\n        return i;\n      }\n    }\n    // not enough time budget even with quality level 0 ... rebuffering might happen\n    return -1;\n  }\n\n  set nextAutoLevel (nextLevel) {\n    this._nextAutoLevel = nextLevel;\n  }\n}\n\nexport default AbrController;\n","/*\n * Buffer Controller\n */\n\nimport Events from '../events';\nimport EventHandler from '../event-handler';\nimport { logger } from '../utils/logger';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport { getMediaSource } from '../utils/mediasource-helper';\n\nimport { TrackSet } from '../types/track';\nimport { Segment } from '../types/segment';\nimport { BufferControllerConfig } from '../config';\n\n// Add extension properties to SourceBuffers from the DOM API.\ntype ExtendedSourceBuffer = SourceBuffer & {\n  ended?: boolean\n};\n\ntype SourceBufferName = 'video' | 'audio';\ntype SourceBuffers = Partial<Record<SourceBufferName, ExtendedSourceBuffer>>;\n\ninterface SourceBufferFlushRange {\n  start: number;\n  end: number;\n  type: SourceBufferName\n}\n\nconst MediaSource = getMediaSource();\n\nclass BufferController extends EventHandler {\n  // the value that we have set mediasource.duration to\n  // (the actual duration may be tweaked slighly by the browser)\n  private _msDuration: number | null = null;\n  // the value that we want to set mediaSource.duration to\n  private _levelDuration: number | null = null;\n  // the target duration of the current media playlist\n  private _levelTargetDuration: number = 10;\n  // current stream state: true - for live broadcast, false - for VoD content\n  private _live: boolean | null = null;\n  // cache the self generated object url to detect hijack of video tag\n  private _objectUrl: string | null = null;\n\n  // signals that the sourceBuffers need to be flushed\n  private _needsFlush: boolean = false;\n\n  // signals that mediaSource should have endOfStream called\n  private _needsEos: boolean = false;\n\n  private config: BufferControllerConfig;\n\n  // this is optional because this property is removed from the class sometimes\n  public audioTimestampOffset?: number;\n\n  // The number of BUFFER_CODEC events received before any sourceBuffers are created\n  public bufferCodecEventsExpected: number = 0;\n\n  // A reference to the attached media element\n  public media: HTMLMediaElement | null = null;\n\n  // A reference to the active media source\n  public mediaSource: MediaSource | null = null;\n\n  // List of pending segments to be appended to source buffer\n  public segments: Segment[] = [];\n\n  public parent?: string;\n\n  // A guard to see if we are currently appending to the source buffer\n  public appending: boolean = false;\n\n  // counters\n  public appended: number = 0;\n  public appendError: number = 0;\n  public flushBufferCounter: number = 0;\n\n  public tracks: TrackSet = {};\n  public pendingTracks: TrackSet = {};\n  public sourceBuffer: SourceBuffers = {};\n  public flushRange: SourceBufferFlushRange[] = [];\n\n  constructor (hls: any) {\n    super(hls,\n      Events.MEDIA_ATTACHING,\n      Events.MEDIA_DETACHING,\n      Events.MANIFEST_PARSED,\n      Events.BUFFER_RESET,\n      Events.BUFFER_APPENDING,\n      Events.BUFFER_CODECS,\n      Events.BUFFER_EOS,\n      Events.BUFFER_FLUSHING,\n      Events.LEVEL_PTS_UPDATED,\n      Events.LEVEL_UPDATED);\n\n    this.config = hls.config;\n  }\n\n  destroy () {\n    EventHandler.prototype.destroy.call(this);\n  }\n\n  onLevelPtsUpdated (data: { type: SourceBufferName, start: number }) {\n    let type = data.type;\n    let audioTrack = this.tracks.audio;\n\n    // Adjusting `SourceBuffer.timestampOffset` (desired point in the timeline where the next frames should be appended)\n    // in Chrome browser when we detect MPEG audio container and time delta between level PTS and `SourceBuffer.timestampOffset`\n    // is greater than 100ms (this is enough to handle seek for VOD or level change for LIVE videos). At the time of change we issue\n    // `SourceBuffer.abort()` and adjusting `SourceBuffer.timestampOffset` if `SourceBuffer.updating` is false or awaiting `updateend`\n    // event if SB is in updating state.\n    // More info here: https://github.com/video-dev/hls.js/issues/332#issuecomment-257986486\n\n    if (type === 'audio' && audioTrack && audioTrack.container === 'audio/mpeg') { // Chrome audio mp3 track\n      let audioBuffer = this.sourceBuffer.audio;\n      if (!audioBuffer) {\n        throw Error('Level PTS Updated and source buffer for audio uninitalized');\n      }\n\n      let delta = Math.abs(audioBuffer.timestampOffset - data.start);\n\n      // adjust timestamp offset if time delta is greater than 100ms\n      if (delta > 0.1) {\n        let updating = audioBuffer.updating;\n\n        try {\n          audioBuffer.abort();\n        } catch (err) {\n          logger.warn('can not abort audio buffer: ' + err);\n        }\n\n        if (!updating) {\n          logger.warn('change mpeg audio timestamp offset from ' + audioBuffer.timestampOffset + ' to ' + data.start);\n          audioBuffer.timestampOffset = data.start;\n        } else {\n          this.audioTimestampOffset = data.start;\n        }\n      }\n    }\n  }\n\n  onManifestParsed (data: { altAudio: boolean }) {\n    // in case of alt audio 2 BUFFER_CODECS events will be triggered, one per stream controller\n    // sourcebuffers will be created all at once when the expected nb of tracks will be reached\n    // in case alt audio is not used, only one BUFFER_CODEC event will be fired from main stream controller\n    // it will contain the expected nb of source buffers, no need to compute it\n    this.bufferCodecEventsExpected = data.altAudio ? 2 : 1;\n    logger.log(`${this.bufferCodecEventsExpected} bufferCodec event(s) expected`);\n  }\n\n  onMediaAttaching (data: { media: HTMLMediaElement }) {\n    let media = this.media = data.media;\n    if (media) {\n      // setup the media source\n      let ms = this.mediaSource = new MediaSource();\n      // Media Source listeners\n      ms.addEventListener('sourceopen', this._onMediaSourceOpen);\n      ms.addEventListener('sourceended', this._onMediaSourceEnded);\n      ms.addEventListener('sourceclose', this._onMediaSourceClose);\n      // link video and media Source\n      media.src = window.URL.createObjectURL(ms);\n      // cache the locally generated object url\n      this._objectUrl = media.src;\n    }\n  }\n\n  onMediaDetaching () {\n    logger.log('media source detaching');\n    let ms = this.mediaSource;\n    if (ms) {\n      if (ms.readyState === 'open') {\n        try {\n          // endOfStream could trigger exception if any sourcebuffer is in updating state\n          // we don't really care about checking sourcebuffer state here,\n          // as we are anyway detaching the MediaSource\n          // let's just avoid this exception to propagate\n          ms.endOfStream();\n        } catch (err) {\n          logger.warn(`onMediaDetaching:${err.message} while calling endOfStream`);\n        }\n      }\n      ms.removeEventListener('sourceopen', this._onMediaSourceOpen);\n      ms.removeEventListener('sourceended', this._onMediaSourceEnded);\n      ms.removeEventListener('sourceclose', this._onMediaSourceClose);\n\n      // Detach properly the MediaSource from the HTMLMediaElement as\n      // suggested in https://github.com/w3c/media-source/issues/53.\n      if (this.media) {\n        if (this._objectUrl) {\n          window.URL.revokeObjectURL(this._objectUrl);\n        }\n\n        // clean up video tag src only if it's our own url. some external libraries might\n        // hijack the video tag and change its 'src' without destroying the Hls instance first\n        if (this.media.src === this._objectUrl) {\n          this.media.removeAttribute('src');\n          this.media.load();\n        } else {\n          logger.warn('media.src was changed by a third party - skip cleanup');\n        }\n      }\n\n      this.mediaSource = null;\n      this.media = null;\n      this._objectUrl = null;\n      this.pendingTracks = {};\n      this.tracks = {};\n      this.sourceBuffer = {};\n      this.flushRange = [];\n      this.segments = [];\n      this.appended = 0;\n    }\n\n    this.hls.trigger(Events.MEDIA_DETACHED);\n  }\n\n  checkPendingTracks () {\n    let { bufferCodecEventsExpected, pendingTracks } = this;\n\n    // Check if we've received all of the expected bufferCodec events. When none remain, create all the sourceBuffers at once.\n    // This is important because the MSE spec allows implementations to throw QuotaExceededErrors if creating new sourceBuffers after\n    // data has been appended to existing ones.\n    // 2 tracks is the max (one for audio, one for video). If we've reach this max go ahead and create the buffers.\n    const pendingTracksCount = Object.keys(pendingTracks).length;\n    if ((pendingTracksCount && !bufferCodecEventsExpected) || pendingTracksCount === 2) {\n      // ok, let's create them now !\n      this.createSourceBuffers(pendingTracks);\n      this.pendingTracks = {};\n      // append any pending segments now !\n      this.doAppending();\n    }\n  }\n\n  private _onMediaSourceOpen = () => {\n    logger.log('media source opened');\n    this.hls.trigger(Events.MEDIA_ATTACHED, { media: this.media });\n    let mediaSource = this.mediaSource;\n    if (mediaSource) {\n      // once received, don't listen anymore to sourceopen event\n      mediaSource.removeEventListener('sourceopen', this._onMediaSourceOpen);\n    }\n    this.checkPendingTracks();\n  }\n\n  private _onMediaSourceClose = () => {\n    logger.log('media source closed');\n  }\n\n  private _onMediaSourceEnded = () => {\n    logger.log('media source ended');\n  }\n\n  private _onSBUpdateEnd = () => {\n    // update timestampOffset\n    if (this.audioTimestampOffset && this.sourceBuffer.audio) {\n      let audioBuffer = this.sourceBuffer.audio;\n\n      logger.warn(`change mpeg audio timestamp offset from ${audioBuffer.timestampOffset} to ${this.audioTimestampOffset}`);\n      audioBuffer.timestampOffset = this.audioTimestampOffset;\n      delete this.audioTimestampOffset;\n    }\n\n    if (this._needsFlush) {\n      this.doFlush();\n    }\n\n    if (this._needsEos) {\n      this.checkEos();\n    }\n\n    this.appending = false;\n    let parent = this.parent;\n    // count nb of pending segments waiting for appending on this sourcebuffer\n    let pending = this.segments.reduce((counter, segment) => (segment.parent === parent) ? counter + 1 : counter, 0);\n\n    // this.sourceBuffer is better to use than media.buffered as it is closer to the PTS data from the fragments\n    const timeRanges: Partial<Record<SourceBufferName, TimeRanges>> = {};\n    const sbSet = this.sourceBuffer;\n    for (let streamType in sbSet) {\n      const sb = sbSet[streamType as SourceBufferName];\n      if (!sb) {\n        throw Error(`handling source buffer update end error: source buffer for ${streamType} uninitilized and unable to update buffered TimeRanges.`);\n      }\n      timeRanges[streamType as SourceBufferName] = sb.buffered;\n    }\n\n    this.hls.trigger(Events.BUFFER_APPENDED, { parent, pending, timeRanges });\n    // don't append in flushing mode\n    if (!this._needsFlush) {\n      this.doAppending();\n    }\n\n    this.updateMediaElementDuration();\n\n    // appending goes first\n    if (pending === 0) {\n      this.flushLiveBackBuffer();\n    }\n  }\n\n  private _onSBUpdateError = (event: Event) => {\n    logger.error('sourceBuffer error:', event);\n    // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error\n    // this error might not always be fatal (it is fatal if decode error is set, in that case\n    // it will be followed by a mediaElement error ...)\n    this.hls.trigger(Events.ERROR, { type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.BUFFER_APPENDING_ERROR, fatal: false });\n    // we don't need to do more than that, as accordin to the spec, updateend will be fired just after\n  }\n\n  onBufferReset () {\n    const sourceBuffer = this.sourceBuffer;\n    for (let type in sourceBuffer) {\n      const sb = sourceBuffer[type];\n      try {\n        if (sb) {\n          if (this.mediaSource) {\n            this.mediaSource.removeSourceBuffer(sb);\n          }\n          sb.removeEventListener('updateend', this._onSBUpdateEnd);\n          sb.removeEventListener('error', this._onSBUpdateError);\n        }\n      } catch (err) {\n      }\n    }\n    this.sourceBuffer = {};\n    this.flushRange = [];\n    this.segments = [];\n    this.appended = 0;\n  }\n\n  onBufferCodecs (tracks: TrackSet) {\n    // if source buffer(s) not created yet, appended buffer tracks in this.pendingTracks\n    // if sourcebuffers already created, do nothing ...\n    if (Object.keys(this.sourceBuffer).length) {\n      return;\n    }\n\n    Object.keys(tracks).forEach(trackName => {\n      this.pendingTracks[trackName] = tracks[trackName];\n    });\n\n    this.bufferCodecEventsExpected = Math.max(this.bufferCodecEventsExpected - 1, 0);\n    if (this.mediaSource && this.mediaSource.readyState === 'open') {\n      this.checkPendingTracks();\n    }\n  }\n\n  createSourceBuffers (tracks: TrackSet) {\n    const { sourceBuffer, mediaSource } = this;\n    if (!mediaSource) {\n      throw Error('createSourceBuffers called when mediaSource was null');\n    }\n\n    for (let trackName in tracks) {\n      if (!sourceBuffer[trackName]) {\n        let track = tracks[trackName as keyof TrackSet];\n        if (!track) {\n          throw Error(`source buffer exists for track ${trackName}, however track does not`);\n        }\n        // use levelCodec as first priority\n        let codec = track.levelCodec || track.codec;\n        let mimeType = `${track.container};codecs=${codec}`;\n        logger.log(`creating sourceBuffer(${mimeType})`);\n        try {\n          let sb = sourceBuffer[trackName] = mediaSource.addSourceBuffer(mimeType);\n          sb.addEventListener('updateend', this._onSBUpdateEnd);\n          sb.addEventListener('error', this._onSBUpdateError);\n          this.tracks[trackName] = {\n            buffer: sb,\n            codec: codec,\n            container: track.container,\n            levelCodec: track.levelCodec\n          };\n        } catch (err) {\n          logger.error(`error while trying to add sourceBuffer:${err.message}`);\n          this.hls.trigger(Events.ERROR, { type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.BUFFER_ADD_CODEC_ERROR, fatal: false, err: err, mimeType: mimeType });\n        }\n      }\n    }\n    this.hls.trigger(Events.BUFFER_CREATED, { tracks: this.tracks });\n  }\n\n  onBufferAppending (data: Segment) {\n    if (!this._needsFlush) {\n      if (!this.segments) {\n        this.segments = [ data ];\n      } else {\n        this.segments.push(data);\n      }\n\n      this.doAppending();\n    }\n  }\n\n  // on BUFFER_EOS mark matching sourcebuffer(s) as ended and trigger checkEos()\n  // an undefined data.type will mark all buffers as EOS.\n  onBufferEos (data: { type?: SourceBufferName }) {\n    for (const type in this.sourceBuffer) {\n      if (!data.type || data.type === type) {\n        const sb = this.sourceBuffer[type as SourceBufferName];\n        if (sb && !sb.ended) {\n          sb.ended = true;\n          logger.log(`${type} sourceBuffer now EOS`);\n        }\n      }\n    }\n\n    this.checkEos();\n  }\n\n  // if all source buffers are marked as ended, signal endOfStream() to MediaSource.\n  checkEos () {\n    const { sourceBuffer, mediaSource } = this;\n    if (!mediaSource || mediaSource.readyState !== 'open') {\n      this._needsEos = false;\n      return;\n    }\n\n    for (let type in sourceBuffer) {\n      const sb = sourceBuffer[type as SourceBufferName];\n      if (!sb) continue;\n\n      if (!sb.ended) {\n        return;\n      }\n\n      if (sb.updating) {\n        this._needsEos = true;\n        return;\n      }\n    }\n\n    logger.log('all media data are available, signal endOfStream() to MediaSource and stop loading fragment');\n    // Notify the media element that it now has all of the media data\n    try {\n      mediaSource.endOfStream();\n    } catch (e) {\n      logger.warn('exception while calling mediaSource.endOfStream()');\n    }\n    this._needsEos = false;\n  }\n\n  onBufferFlushing (data: { startOffset: number, endOffset: number, type?: SourceBufferName }) {\n    if (data.type) {\n      this.flushRange.push({ start: data.startOffset, end: data.endOffset, type: data.type });\n    } else {\n      this.flushRange.push({ start: data.startOffset, end: data.endOffset, type: 'video' });\n      this.flushRange.push({ start: data.startOffset, end: data.endOffset, type: 'audio' });\n    }\n\n    // attempt flush immediately\n    this.flushBufferCounter = 0;\n    this.doFlush();\n  }\n\n  flushLiveBackBuffer () {\n    if (!this.media) {\n      throw Error('flushLiveBackBuffer called without attaching media');\n    }\n\n    // clear back buffer for live only\n    if (!this._live) {\n      return;\n    }\n\n    const liveBackBufferLength = this.config.liveBackBufferLength;\n    if (!isFinite(liveBackBufferLength) || liveBackBufferLength < 0) {\n      return;\n    }\n\n    const currentTime = this.media.currentTime;\n    const sourceBuffer = this.sourceBuffer;\n    const bufferTypes = Object.keys(sourceBuffer);\n    const targetBackBufferPosition = currentTime - Math.max(liveBackBufferLength, this._levelTargetDuration);\n\n    for (let index = bufferTypes.length - 1; index >= 0; index--) {\n      const bufferType = bufferTypes[index];\n      const sb = sourceBuffer[bufferType as SourceBufferName];\n      if (sb) {\n        const buffered = sb.buffered;\n        // when target buffer start exceeds actual buffer start\n        if (buffered.length > 0 && targetBackBufferPosition > buffered.start(0)) {\n          // remove buffer up until current time minus minimum back buffer length (removing buffer too close to current\n          // time will lead to playback freezing)\n          // credits for level target duration - https://github.com/videojs/http-streaming/blob/3132933b6aa99ddefab29c10447624efd6fd6e52/src/segment-loader.js#L91\n          this.removeBufferRange(bufferType, sb, 0, targetBackBufferPosition);\n        }\n      }\n    }\n  }\n\n  onLevelUpdated ({ details }: { details: { totalduration: number, targetduration?: number, averagetargetduration?: number, live: boolean, fragments: any[] } }) {\n    if (details.fragments.length > 0) {\n      this._levelDuration = details.totalduration + details.fragments[0].start;\n      this._levelTargetDuration = details.averagetargetduration || details.targetduration || 10;\n      this._live = details.live;\n      this.updateMediaElementDuration();\n    }\n  }\n\n  /**\n   * Update Media Source duration to current level duration or override to Infinity if configuration parameter\n   * 'liveDurationInfinity` is set to `true`\n   * More details: https://github.com/video-dev/hls.js/issues/355\n   */\n  updateMediaElementDuration () {\n    let { config } = this;\n    let duration: number;\n\n    if (this._levelDuration === null ||\n      !this.media ||\n      !this.mediaSource ||\n      !this.sourceBuffer ||\n      this.media.readyState === 0 ||\n      this.mediaSource.readyState !== 'open') {\n      return;\n    }\n\n    for (let type in this.sourceBuffer) {\n      const sb = this.sourceBuffer[type];\n      if (sb && sb.updating === true) {\n        // can't set duration whilst a buffer is updating\n        return;\n      }\n    }\n\n    duration = this.media.duration;\n    // initialise to the value that the media source is reporting\n    if (this._msDuration === null) {\n      this._msDuration = this.mediaSource.duration;\n    }\n\n    if (this._live === true && config.liveDurationInfinity === true) {\n      // Override duration to Infinity\n      logger.log('Media Source duration is set to Infinity');\n      this._msDuration = this.mediaSource.duration = Infinity;\n    } else if ((this._levelDuration > this._msDuration && this._levelDuration > duration) || !Number.isFinite(duration)) {\n      // levelDuration was the last value we set.\n      // not using mediaSource.duration as the browser may tweak this value\n      // only update Media Source duration if its value increase, this is to avoid\n      // flushing already buffered portion when switching between quality level\n      logger.log(`Updating Media Source duration to ${this._levelDuration.toFixed(3)}`);\n      this._msDuration = this.mediaSource.duration = this._levelDuration;\n    }\n  }\n\n  doFlush () {\n    // loop through all buffer ranges to flush\n    while (this.flushRange.length) {\n      let range = this.flushRange[0];\n      // flushBuffer will abort any buffer append in progress and flush Audio/Video Buffer\n      if (this.flushBuffer(range.start, range.end, range.type)) {\n        // range flushed, remove from flush array\n        this.flushRange.shift();\n        this.flushBufferCounter = 0;\n      } else {\n        this._needsFlush = true;\n        // avoid looping, wait for SB update end to retrigger a flush\n        return;\n      }\n    }\n    if (this.flushRange.length === 0) {\n      // everything flushed\n      this._needsFlush = false;\n\n      // let's recompute this.appended, which is used to avoid flush looping\n      let appended = 0;\n      let sourceBuffer = this.sourceBuffer;\n      try {\n        for (let type in sourceBuffer) {\n          const sb = sourceBuffer[type];\n          if (sb) {\n            appended += sb.buffered.length;\n          }\n        }\n      } catch (error) {\n        // error could be thrown while accessing buffered, in case sourcebuffer has already been removed from MediaSource\n        // this is harmess at this stage, catch this to avoid reporting an internal exception\n        logger.error('error while accessing sourceBuffer.buffered');\n      }\n      this.appended = appended;\n      this.hls.trigger(Events.BUFFER_FLUSHED);\n    }\n  }\n\n  doAppending () {\n    let { config, hls, segments, sourceBuffer } = this;\n    if (!Object.keys(sourceBuffer).length) {\n      // early exit if no source buffers have been initialized yet\n      return;\n    }\n\n    if (!this.media || this.media.error) {\n      this.segments = [];\n      logger.error('trying to append although a media error occured, flush segment and abort');\n      return;\n    }\n\n    if (this.appending) {\n      // logger.log(`sb appending in progress`);\n      return;\n    }\n\n    const segment = segments.shift();\n    if (!segment) { // handle undefined shift\n      return;\n    }\n\n    try {\n      const sb = sourceBuffer[segment.type];\n      if (!sb) {\n        // in case we don't have any source buffer matching with this segment type,\n        // it means that Mediasource fails to create sourcebuffer\n        // discard this segment, and trigger update end\n        this._onSBUpdateEnd();\n        return;\n      }\n\n      if (sb.updating) {\n        // if we are still updating the source buffer from the last segment, place this back at the front of the queue\n        segments.unshift(segment);\n        return;\n      }\n\n      // reset sourceBuffer ended flag before appending segment\n      sb.ended = false;\n      // logger.log(`appending ${segment.content} ${type} SB, size:${segment.data.length}, ${segment.parent}`);\n      this.parent = segment.parent;\n      sb.appendBuffer(segment.data);\n      this.appendError = 0;\n      this.appended++;\n      this.appending = true;\n    } catch (err) {\n      // in case any error occured while appending, put back segment in segments table\n      logger.error(`error while trying to append buffer:${err.message}`);\n      segments.unshift(segment);\n      let event = { type: ErrorTypes.MEDIA_ERROR, parent: segment.parent, details: '', fatal: false };\n      if (err.code === 22) {\n        // QuotaExceededError: http://www.w3.org/TR/html5/infrastructure.html#quotaexceedederror\n        // let's stop appending any segments, and report BUFFER_FULL_ERROR error\n        this.segments = [];\n        event.details = ErrorDetails.BUFFER_FULL_ERROR;\n      } else {\n        this.appendError++;\n        event.details = ErrorDetails.BUFFER_APPEND_ERROR;\n        /* with UHD content, we could get loop of quota exceeded error until\n          browser is able to evict some data from sourcebuffer. retrying help recovering this\n        */\n        if (this.appendError > config.appendErrorMaxRetry) {\n          logger.log(`fail ${config.appendErrorMaxRetry} times to append segment in sourceBuffer`);\n          this.segments = [];\n          event.fatal = true;\n        }\n      }\n      hls.trigger(Events.ERROR, event);\n    }\n  }\n\n  /*\n    flush specified buffered range,\n    return true once range has been flushed.\n    as sourceBuffer.remove() is asynchronous, flushBuffer will be retriggered on sourceBuffer update end\n  */\n  flushBuffer (startOffset: number, endOffset: number, sbType: SourceBufferName): boolean {\n    const sourceBuffer = this.sourceBuffer;\n    // exit if no sourceBuffers are initialized\n    if (!Object.keys(sourceBuffer).length) {\n      return true;\n    }\n\n    let currentTime: string = 'null';\n    if (this.media) {\n      currentTime = this.media.currentTime.toFixed(3);\n    }\n    logger.log(`flushBuffer,pos/start/end: ${currentTime}/${startOffset}/${endOffset}`);\n\n    // safeguard to avoid infinite looping : don't try to flush more than the nb of appended segments\n    if (this.flushBufferCounter >= this.appended) {\n      logger.warn('abort flushing too many retries');\n      return true;\n    }\n\n    const sb = sourceBuffer[sbType];\n    // we are going to flush buffer, mark source buffer as 'not ended'\n    if (sb) {\n      sb.ended = false;\n      if (!sb.updating) {\n        if (this.removeBufferRange(sbType, sb, startOffset, endOffset)) {\n          this.flushBufferCounter++;\n          return false;\n        }\n      } else {\n        logger.warn('cannot flush, sb updating in progress');\n        return false;\n      }\n    }\n\n    logger.log('buffer flushed');\n    // everything flushed !\n    return true;\n  }\n\n  /**\n   * Removes first buffered range from provided source buffer that lies within given start and end offsets.\n   *\n   * @param {string} type Type of the source buffer, logging purposes only.\n   * @param {SourceBuffer} sb Target SourceBuffer instance.\n   * @param {number} startOffset\n   * @param {number} endOffset\n   *\n   * @returns {boolean} True when source buffer remove requested.\n   */\n  removeBufferRange (type: string, sb: ExtendedSourceBuffer, startOffset: number, endOffset: number): boolean {\n    try {\n      for (let i = 0; i < sb.buffered.length; i++) {\n        let bufStart = sb.buffered.start(i);\n        let bufEnd = sb.buffered.end(i);\n        let removeStart = Math.max(bufStart, startOffset);\n        let removeEnd = Math.min(bufEnd, endOffset);\n\n        /* sometimes sourcebuffer.remove() does not flush\n          the exact expected time range.\n          to avoid rounding issues/infinite loop,\n          only flush buffer range of length greater than 500ms.\n        */\n        if (Math.min(removeEnd, bufEnd) - removeStart > 0.5) {\n          let currentTime: string = 'null';\n          if (this.media) {\n            currentTime = this.media.currentTime.toString();\n          }\n\n          logger.log(`sb remove ${type} [${removeStart},${removeEnd}], of [${bufStart},${bufEnd}], pos:${currentTime}`);\n          sb.remove(removeStart, removeEnd);\n          return true;\n        }\n      }\n    } catch (error) {\n      logger.warn('removeBufferRange failed', error);\n    }\n\n    return false;\n  }\n}\n\nexport default BufferController;\n","/*\n * cap stream level to media size dimension controller\n*/\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\n\nclass CapLevelController extends EventHandler {\n  constructor (hls) {\n    super(hls,\n      Event.FPS_DROP_LEVEL_CAPPING,\n      Event.MEDIA_ATTACHING,\n      Event.MANIFEST_PARSED,\n      Event.BUFFER_CODECS,\n      Event.MEDIA_DETACHING);\n\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\n    this.firstLevel = null;\n    this.levels = [];\n    this.media = null;\n    this.restrictedLevels = [];\n    this.timer = null;\n  }\n\n  destroy () {\n    if (this.hls.config.capLevelToPlayerSize) {\n      this.media = null;\n      this.stopCapping();\n    }\n  }\n\n  onFpsDropLevelCapping (data) {\n    // Don't add a restricted level more than once\n    if (CapLevelController.isLevelAllowed(data.droppedLevel, this.restrictedLevels)) {\n      this.restrictedLevels.push(data.droppedLevel);\n    }\n  }\n\n  onMediaAttaching (data) {\n    this.media = data.media instanceof window.HTMLVideoElement ? data.media : null;\n  }\n\n  onManifestParsed (data) {\n    const hls = this.hls;\n    this.restrictedLevels = [];\n    this.levels = data.levels;\n    this.firstLevel = data.firstLevel;\n    if (hls.config.capLevelToPlayerSize && data.video) {\n      // Start capping immediately if the manifest has signaled video codecs\n      this.startCapping();\n    }\n  }\n\n  // Only activate capping when playing a video stream; otherwise, multi-bitrate audio-only streams will be restricted\n  // to the first level\n  onBufferCodecs (data) {\n    const hls = this.hls;\n    if (hls.config.capLevelToPlayerSize && data.video) {\n      // If the manifest did not signal a video codec capping has been deferred until we're certain video is present\n      this.startCapping();\n    }\n  }\n\n  onLevelsUpdated (data) {\n    this.levels = data.levels;\n  }\n\n  onMediaDetaching () {\n    this.stopCapping();\n  }\n\n  detectPlayerSize () {\n    if (this.media) {\n      let levelsLength = this.levels ? this.levels.length : 0;\n      if (levelsLength) {\n        const hls = this.hls;\n        hls.autoLevelCapping = this.getMaxLevel(levelsLength - 1);\n        if (hls.autoLevelCapping > this.autoLevelCapping) {\n          // if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch\n          // usually happen when the user go to the fullscreen mode.\n          hls.streamController.nextLevelSwitch();\n        }\n        this.autoLevelCapping = hls.autoLevelCapping;\n      }\n    }\n  }\n\n  /*\n  * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)\n  */\n  getMaxLevel (capLevelIndex) {\n    if (!this.levels) {\n      return -1;\n    }\n\n    const validLevels = this.levels.filter((level, index) =>\n      CapLevelController.isLevelAllowed(index, this.restrictedLevels) && index <= capLevelIndex\n    );\n\n    return CapLevelController.getMaxLevelByMediaSize(validLevels, this.mediaWidth, this.mediaHeight);\n  }\n\n  startCapping () {\n    if (this.timer) {\n      // Don't reset capping if started twice; this can happen if the manifest signals a video codec\n      return;\n    }\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\n    this.hls.firstLevel = this.getMaxLevel(this.firstLevel);\n    clearInterval(this.timer);\n    this.timer = setInterval(this.detectPlayerSize.bind(this), 1000);\n    this.detectPlayerSize();\n  }\n\n  stopCapping () {\n    this.restrictedLevels = [];\n    this.firstLevel = null;\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\n    if (this.timer) {\n      this.timer = clearInterval(this.timer);\n      this.timer = null;\n    }\n  }\n\n  get mediaWidth () {\n    let width;\n    const media = this.media;\n    if (media) {\n      width = media.width || media.clientWidth || media.offsetWidth;\n      width *= CapLevelController.contentScaleFactor;\n    }\n    return width;\n  }\n\n  get mediaHeight () {\n    let height;\n    const media = this.media;\n    if (media) {\n      height = media.height || media.clientHeight || media.offsetHeight;\n      height *= CapLevelController.contentScaleFactor;\n    }\n    return height;\n  }\n\n  static get contentScaleFactor () {\n    let pixelRatio = 1;\n    try {\n      pixelRatio = window.devicePixelRatio;\n    } catch (e) {}\n    return pixelRatio;\n  }\n\n  static isLevelAllowed (level, restrictedLevels = []) {\n    return restrictedLevels.indexOf(level) === -1;\n  }\n\n  static getMaxLevelByMediaSize (levels, width, height) {\n    if (!levels || (levels && !levels.length)) {\n      return -1;\n    }\n\n    // Levels can have the same dimensions but differing bandwidths - since levels are ordered, we can look to the next\n    // to determine whether we've chosen the greatest bandwidth for the media's dimensions\n    const atGreatestBandiwdth = (curLevel, nextLevel) => {\n      if (!nextLevel) {\n        return true;\n      }\n\n      return curLevel.width !== nextLevel.width || curLevel.height !== nextLevel.height;\n    };\n\n    // If we run through the loop without breaking, the media's dimensions are greater than every level, so default to\n    // the max level\n    let maxLevelIndex = levels.length - 1;\n\n    for (let i = 0; i < levels.length; i += 1) {\n      const level = levels[i];\n      if ((level.width >= width || level.height >= height) && atGreatestBandiwdth(level, levels[i + 1])) {\n        maxLevelIndex = i;\n        break;\n      }\n    }\n\n    return maxLevelIndex;\n  }\n}\n\nexport default CapLevelController;\n","/*\n * FPS Controller\n*/\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport { logger } from '../utils/logger';\n\nconst { performance } = window;\n\nclass FPSController extends EventHandler {\n  constructor (hls) {\n    super(hls, Event.MEDIA_ATTACHING);\n  }\n\n  destroy () {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n\n    this.isVideoPlaybackQualityAvailable = false;\n  }\n\n  onMediaAttaching (data) {\n    const config = this.hls.config;\n    if (config.capLevelOnFPSDrop) {\n      const video = this.video = data.media instanceof window.HTMLVideoElement ? data.media : null;\n      if (typeof video.getVideoPlaybackQuality === 'function') {\n        this.isVideoPlaybackQualityAvailable = true;\n      }\n\n      clearInterval(this.timer);\n      this.timer = setInterval(this.checkFPSInterval.bind(this), config.fpsDroppedMonitoringPeriod);\n    }\n  }\n\n  checkFPS (video, decodedFrames, droppedFrames) {\n    let currentTime = performance.now();\n    if (decodedFrames) {\n      if (this.lastTime) {\n        let currentPeriod = currentTime - this.lastTime,\n          currentDropped = droppedFrames - this.lastDroppedFrames,\n          currentDecoded = decodedFrames - this.lastDecodedFrames,\n          droppedFPS = 1000 * currentDropped / currentPeriod,\n          hls = this.hls;\n        hls.trigger(Event.FPS_DROP, { currentDropped: currentDropped, currentDecoded: currentDecoded, totalDroppedFrames: droppedFrames });\n        if (droppedFPS > 0) {\n          // logger.log('checkFPS : droppedFPS/decodedFPS:' + droppedFPS/(1000 * currentDecoded / currentPeriod));\n          if (currentDropped > hls.config.fpsDroppedMonitoringThreshold * currentDecoded) {\n            let currentLevel = hls.currentLevel;\n            logger.warn('drop FPS ratio greater than max allowed value for currentLevel: ' + currentLevel);\n            if (currentLevel > 0 && (hls.autoLevelCapping === -1 || hls.autoLevelCapping >= currentLevel)) {\n              currentLevel = currentLevel - 1;\n              hls.trigger(Event.FPS_DROP_LEVEL_CAPPING, { level: currentLevel, droppedLevel: hls.currentLevel });\n              hls.autoLevelCapping = currentLevel;\n              hls.streamController.nextLevelSwitch();\n            }\n          }\n        }\n      }\n      this.lastTime = currentTime;\n      this.lastDroppedFrames = droppedFrames;\n      this.lastDecodedFrames = decodedFrames;\n    }\n  }\n\n  checkFPSInterval () {\n    const video = this.video;\n    if (video) {\n      if (this.isVideoPlaybackQualityAvailable) {\n        let videoPlaybackQuality = video.getVideoPlaybackQuality();\n        this.checkFPS(video, videoPlaybackQuality.totalVideoFrames, videoPlaybackQuality.droppedVideoFrames);\n      } else {\n        this.checkFPS(video, video.webkitDecodedFrameCount, video.webkitDroppedFrameCount);\n      }\n    }\n  }\n}\n\nexport default FPSController;\n","/**\n * XHR based logger\n*/\n\nimport { logger } from '../utils/logger';\n\nconst { performance, XMLHttpRequest } = window;\n\nclass XhrLoader {\n  constructor (config) {\n    if (config && config.xhrSetup) {\n      this.xhrSetup = config.xhrSetup;\n    }\n  }\n\n  destroy () {\n    this.abort();\n    this.loader = null;\n  }\n\n  abort () {\n    let loader = this.loader;\n    if (loader && loader.readyState !== 4) {\n      this.stats.aborted = true;\n      loader.abort();\n    }\n\n    window.clearTimeout(this.requestTimeout);\n    this.requestTimeout = null;\n    window.clearTimeout(this.retryTimeout);\n    this.retryTimeout = null;\n  }\n\n  load (context, config, callbacks) {\n    this.context = context;\n    this.config = config;\n    this.callbacks = callbacks;\n    this.stats = { trequest: performance.now(), retry: 0 };\n    this.retryDelay = config.retryDelay;\n    this.loadInternal();\n  }\n\n  loadInternal () {\n    let xhr, context = this.context;\n    xhr = this.loader = new XMLHttpRequest();\n\n    let stats = this.stats;\n    stats.tfirst = 0;\n    stats.loaded = 0;\n    const xhrSetup = this.xhrSetup;\n\n    try {\n      if (xhrSetup) {\n        try {\n          xhrSetup(xhr, context.url);\n        } catch (e) {\n          // fix xhrSetup: (xhr, url) => {xhr.setRequestHeader(\"Content-Language\", \"test\");}\n          // not working, as xhr.setRequestHeader expects xhr.readyState === OPEN\n          xhr.open('GET', context.url, true);\n          xhrSetup(xhr, context.url);\n        }\n      }\n      if (!xhr.readyState) {\n        xhr.open('GET', context.url, true);\n      }\n    } catch (e) {\n      // IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS\n      this.callbacks.onError({ code: xhr.status, text: e.message }, context, xhr);\n      return;\n    }\n\n    if (context.rangeEnd) {\n      xhr.setRequestHeader('Range', 'bytes=' + context.rangeStart + '-' + (context.rangeEnd - 1));\n    }\n\n    xhr.onreadystatechange = this.readystatechange.bind(this);\n    xhr.onprogress = this.loadprogress.bind(this);\n    xhr.responseType = context.responseType;\n\n    // setup timeout before we perform request\n    this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), this.config.timeout);\n    xhr.send();\n  }\n\n  readystatechange (event) {\n    let xhr = event.currentTarget,\n      readyState = xhr.readyState,\n      stats = this.stats,\n      context = this.context,\n      config = this.config;\n\n    // don't proceed if xhr has been aborted\n    if (stats.aborted) {\n      return;\n    }\n\n    // >= HEADERS_RECEIVED\n    if (readyState >= 2) {\n      // clear xhr timeout and rearm it if readyState less than 4\n      window.clearTimeout(this.requestTimeout);\n      if (stats.tfirst === 0) {\n        stats.tfirst = Math.max(performance.now(), stats.trequest);\n      }\n\n      if (readyState === 4) {\n        let status = xhr.status;\n        // http status between 200 to 299 are all successful\n        if (status >= 200 && status < 300) {\n          stats.tload = Math.max(stats.tfirst, performance.now());\n          let data, len;\n          if (context.responseType === 'arraybuffer') {\n            data = xhr.response;\n            len = data.byteLength;\n          } else {\n            data = xhr.responseText;\n            len = data.length;\n          }\n          stats.loaded = stats.total = len;\n          let response = { url: xhr.responseURL, data: data };\n          this.callbacks.onSuccess(response, stats, context, xhr);\n        } else {\n          // if max nb of retries reached or if http status between 400 and 499 (such error cannot be recovered, retrying is useless), return error\n          if (stats.retry >= config.maxRetry || (status >= 400 && status < 499)) {\n            logger.error(`${status} while loading ${context.url}`);\n            this.callbacks.onError({ code: status, text: xhr.statusText }, context, xhr);\n          } else {\n            // retry\n            logger.warn(`${status} while loading ${context.url}, retrying in ${this.retryDelay}...`);\n            // aborts and resets internal state\n            this.destroy();\n            // schedule retry\n            this.retryTimeout = window.setTimeout(this.loadInternal.bind(this), this.retryDelay);\n            // set exponential backoff\n            this.retryDelay = Math.min(2 * this.retryDelay, config.maxRetryDelay);\n            stats.retry++;\n          }\n        }\n      } else {\n        // readyState >= 2 AND readyState !==4 (readyState = HEADERS_RECEIVED || LOADING) rearm timeout as xhr not finished yet\n        this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), config.timeout);\n      }\n    }\n  }\n\n  loadtimeout () {\n    logger.warn(`timeout while loading ${this.context.url}`);\n    this.callbacks.onTimeout(this.stats, this.context, null);\n  }\n\n  loadprogress (event) {\n    let xhr = event.currentTarget,\n      stats = this.stats;\n\n    stats.loaded = event.loaded;\n    if (event.lengthComputable) {\n      stats.total = event.total;\n    }\n\n    let onProgress = this.callbacks.onProgress;\n    if (onProgress) {\n      // third arg is to provide on progress data\n      onProgress(stats, this.context, null, xhr);\n    }\n  }\n}\n\nexport default XhrLoader;\n","/**\n * HLS config\n */\n\nimport AbrController from './controller/abr-controller';\nimport BufferController from './controller/buffer-controller';\nimport CapLevelController from './controller/cap-level-controller';\nimport FPSController from './controller/fps-controller';\nimport XhrLoader from './utils/xhr-loader';\n// import FetchLoader from './utils/fetch-loader';\n\nimport AudioTrackController from './controller/audio-track-controller';\nimport AudioStreamController from './controller/audio-stream-controller';\n\nimport * as Cues from './utils/cues';\nimport TimelineController from './controller/timeline-controller';\nimport SubtitleTrackController from './controller/subtitle-track-controller';\nimport { SubtitleStreamController } from './controller/subtitle-stream-controller';\nimport EMEController from './controller/eme-controller';\n\ntype ABRControllerConfig = {\n  abrEwmaFastLive: number,\n  abrEwmaSlowLive: number,\n  abrEwmaFastVoD: number,\n  abrEwmaSlowVoD: number,\n  abrEwmaDefaultEstimate: number,\n  abrBandWidthFactor: number,\n  abrBandWidthUpFactor: number,\n  abrMaxWithRealBitrate: boolean,\n  maxStarvationDelay: number,\n  maxLoadingDelay: number,\n};\n\nexport type BufferControllerConfig = {\n  appendErrorMaxRetry: number,\n  liveDurationInfinity: boolean,\n  liveBackBufferLength: number,\n};\n\ntype CapLevelControllerConfig = {\n  capLevelToPlayerSize: boolean\n};\n\ntype EMEControllerConfig = {\n  emeEnabled: boolean,\n  emeInitDataInFrag: boolean,\n  requestMediaKeySystemAccessFunc: ((supportedConfigurations: MediaKeySystemConfiguration[]) => Promise<MediaKeySystemAccess>) | undefined,\n  getEMEInitializationDataFunc: ((levelOrAudioTrack, initDataType: string | null, initData: ArrayBuffer | null) => Promise<EMEInitDataInfo>) | undefined,\n  getEMELicenseFunc: ((levelOrAudioTrack, event: MediaKeyMessageEvent) => Promise<ArrayBuffer>) | undefined,\n};\n\nexport interface EMEInitDataInfo {\n  initDataType: string,\n  initData: ArrayBuffer\n}\n\ntype FragmentLoaderConfig = {\n  fLoader: any, // TODO(typescript-loader): Once Loader is typed fill this in\n\n  fragLoadingTimeOut: number,\n  fragLoadingMaxRetry: number,\n  fragLoadingRetryDelay: number,\n  fragLoadingMaxRetryTimeout: number,\n};\n\ntype FPSControllerConfig = {\n  capLevelOnFPSDrop: boolean,\n  fpsDroppedMonitoringPeriod: number,\n  fpsDroppedMonitoringThreshold: number,\n};\n\ntype LevelControllerConfig = {\n  startLevel?: number\n};\n\ntype MP4RemuxerConfig = {\n  stretchShortVideoTrack: boolean,\n  maxAudioFramesDrift: number,\n};\n\ntype PlaylistLoaderConfig = {\n  pLoader: any, // TODO(typescript-loader): Once Loader is typed fill this in\n\n  manifestLoadingTimeOut: number,\n  manifestLoadingMaxRetry: number,\n  manifestLoadingRetryDelay: number,\n  manifestLoadingMaxRetryTimeout: number,\n\n  levelLoadingTimeOut: number,\n  levelLoadingMaxRetry: number,\n  levelLoadingRetryDelay: number,\n  levelLoadingMaxRetryTimeout: number\n};\n\ntype StreamControllerConfig = {\n  autoStartLoad: boolean,\n  startPosition: number,\n  defaultAudioCodec?: string,\n  initialLiveManifestSize: number,\n  maxBufferLength: number,\n  maxBufferSize: number,\n  maxBufferHole: number,\n\n  lowBufferWatchdogPeriod: number,\n  highBufferWatchdogPeriod: number,\n  nudgeOffset: number,\n  nudgeMaxRetry: number,\n  maxFragLookUpTolerance: number,\n  liveSyncDurationCount: number,\n  liveMaxLatencyDurationCount: number,\n  liveSyncDuration?: number,\n  liveMaxLatencyDuration?: number,\n  maxMaxBufferLength: number,\n\n  startFragPrefetch: boolean,\n};\n\ntype TimelineControllerConfig = {\n  cueHandler: any, // TODO(typescript-cues): Type once file is done\n  enableCEA708Captions: boolean,\n  enableWebVTT: boolean,\n  captionsTextTrack1Label: string,\n  captionsTextTrack1LanguageCode: string,\n  captionsTextTrack2Label: string,\n  captionsTextTrack2LanguageCode: string,\n};\n\ntype TSDemuxerConfig = {\n  forceKeyFrameOnDiscontinuity: boolean,\n};\n\ntype HlsConfig =\n  {\n    debug: boolean,\n    enableWorker: boolean,\n    enableSoftwareAES: boolean,\n    minAutoBitrate: number,\n    loader: any, // TODO(typescript-xhrloader): Type once XHR is done\n    xhrSetup?: (xhr: XMLHttpRequest, url: string) => void,\n\n    // Alt Audio\n    audioStreamController?: any, // TODO(typescript-audiostreamcontroller): Type once file is done\n    audioTrackController?: any, // TODO(typescript-audiotrackcontroller): Type once file is done\n    // Subtitle\n    subtitleStreamController?: any, // TODO(typescript-subtitlestreamcontroller): Type once file is done\n    subtitleTrackController?: any, // TODO(typescript-subtitletrackcontroller): Type once file is done\n    timelineController?: any, // TODO(typescript-timelinecontroller): Type once file is done\n    // EME\n    emeController?: typeof EMEController,\n\n    abrController: any, // TODO(typescript-abrcontroller): Type once file is done\n    bufferController: typeof BufferController,\n    capLevelController: any, // TODO(typescript-caplevelcontroller): Type once file is done\n    fpsController: any, // TODO(typescript-fpscontroller): Type once file is done\n  } &\n  ABRControllerConfig &\n  BufferControllerConfig &\n  CapLevelControllerConfig &\n  EMEControllerConfig &\n  FPSControllerConfig &\n  FragmentLoaderConfig &\n  LevelControllerConfig &\n  MP4RemuxerConfig &\n  PlaylistLoaderConfig &\n  StreamControllerConfig &\n  Partial<TimelineControllerConfig> &\n  TSDemuxerConfig;\n\nexport const hlsDefaultConfig: HlsConfig = {\n  autoStartLoad: true, // used by stream-controller\n  startPosition: -1, // used by stream-controller\n  defaultAudioCodec: void 0, // used by stream-controller\n  debug: false, // used by logger\n  capLevelOnFPSDrop: false, // used by fps-controller\n  capLevelToPlayerSize: false, // used by cap-level-controller\n  initialLiveManifestSize: 1, // used by stream-controller\n  maxBufferLength: 30, // used by stream-controller\n  maxBufferSize: 60 * 1000 * 1000, // used by stream-controller\n  maxBufferHole: 0.5, // used by stream-controller\n\n  lowBufferWatchdogPeriod: 0.5, // used by stream-controller\n  highBufferWatchdogPeriod: 3, // used by stream-controller\n  nudgeOffset: 0.1, // used by stream-controller\n  nudgeMaxRetry: 3, // used by stream-controller\n  maxFragLookUpTolerance: 0.25, // used by stream-controller\n  liveSyncDurationCount: 3, // used by stream-controller\n  liveMaxLatencyDurationCount: Infinity, // used by stream-controller\n  liveSyncDuration: void 0, // used by stream-controller\n  liveMaxLatencyDuration: void 0, // used by stream-controller\n  liveDurationInfinity: false, // used by buffer-controller\n  liveBackBufferLength: Infinity, // used by buffer-controller\n  maxMaxBufferLength: 600, // used by stream-controller\n  enableWorker: true, // used by demuxer\n  enableSoftwareAES: true, // used by decrypter\n  manifestLoadingTimeOut: 10000, // used by playlist-loader\n  manifestLoadingMaxRetry: 1, // used by playlist-loader\n  manifestLoadingRetryDelay: 1000, // used by playlist-loader\n  manifestLoadingMaxRetryTimeout: 64000, // used by playlist-loader\n  startLevel: void 0, // used by level-controller\n  levelLoadingTimeOut: 10000, // used by playlist-loader\n  levelLoadingMaxRetry: 4, // used by playlist-loader\n  levelLoadingRetryDelay: 1000, // used by playlist-loader\n  levelLoadingMaxRetryTimeout: 64000, // used by playlist-loader\n  fragLoadingTimeOut: 20000, // used by fragment-loader\n  fragLoadingMaxRetry: 6, // used by fragment-loader\n  fragLoadingRetryDelay: 1000, // used by fragment-loader\n  fragLoadingMaxRetryTimeout: 64000, // used by fragment-loader\n  startFragPrefetch: false, // used by stream-controller\n  fpsDroppedMonitoringPeriod: 5000, // used by fps-controller\n  fpsDroppedMonitoringThreshold: 0.2, // used by fps-controller\n  appendErrorMaxRetry: 3, // used by buffer-controller\n  loader: XhrLoader,\n  // loader: FetchLoader,\n  fLoader: void 0, // used by fragment-loader\n  pLoader: void 0, // used by playlist-loader\n  xhrSetup: void 0, // used by xhr-loader\n  // fetchSetup: void 0,\n  abrController: AbrController,\n  bufferController: BufferController,\n  capLevelController: CapLevelController,\n  fpsController: FPSController,\n  stretchShortVideoTrack: false, // used by mp4-remuxer\n  maxAudioFramesDrift: 1, // used by mp4-remuxer\n  forceKeyFrameOnDiscontinuity: true, // used by ts-demuxer\n  abrEwmaFastLive: 3, // used by abr-controller\n  abrEwmaSlowLive: 9, // used by abr-controller\n  abrEwmaFastVoD: 3, // used by abr-controller\n  abrEwmaSlowVoD: 9, // used by abr-controller\n  abrEwmaDefaultEstimate: 5e5, // 500 kbps  // used by abr-controller\n  abrBandWidthFactor: 0.95, // used by abr-controller\n  abrBandWidthUpFactor: 0.7, // used by abr-controller\n  abrMaxWithRealBitrate: false, // used by abr-controller\n  maxStarvationDelay: 4, // used by abr-controller\n  maxLoadingDelay: 4, // used by abr-controller\n  minAutoBitrate: 0, // used by hls\n  emeEnabled: false, // used by eme-controller\n  emeInitDataInFrag: true, // used by eme-controller\n  requestMediaKeySystemAccessFunc: undefined, // used by eme-controller\n  getEMEInitializationDataFunc: undefined, // used by eme-controller\n  getEMELicenseFunc: undefined, // used by eme-controllers\n\n  // Dynamic Modules\n  ...timelineConfig(),\n  subtitleStreamController: (__USE_SUBTITLES__) ? SubtitleStreamController : void 0,\n  subtitleTrackController: (__USE_SUBTITLES__) ? SubtitleTrackController : void 0,\n  timelineController: (__USE_SUBTITLES__) ? TimelineController : void 0,\n  audioStreamController: (__USE_ALT_AUDIO__) ? AudioStreamController : void 0,\n  audioTrackController: (__USE_ALT_AUDIO__) ? AudioTrackController : void 0,\n  emeController: (__USE_EME_DRM__) ? EMEController : void 0\n};\n\nfunction timelineConfig (): TimelineControllerConfig {\n  if (!__USE_SUBTITLES__) {\n    // intentionally doing this over returning Partial<TimelineControllerConfig> above\n    // this has the added nice property of still requiring the object below to completely define all props.\n    return {} as any;\n  }\n  return {\n    cueHandler: Cues, // used by timeline-controller\n    enableCEA708Captions: true, // used by timeline-controller\n    enableWebVTT: true, // used by timeline-controller\n    captionsTextTrack1Label: 'English', // used by timeline-controller\n    captionsTextTrack1LanguageCode: 'en', // used by timeline-controller\n    captionsTextTrack2Label: 'Spanish', // used by timeline-controller\n    captionsTextTrack2LanguageCode: 'es' // used by timeline-controller\n  };\n}\n","import * as URLToolkit from 'url-toolkit';\n\nimport {\n  ErrorTypes,\n  ErrorDetails\n} from './errors';\n\nimport PlaylistLoader from './loader/playlist-loader';\nimport FragmentLoader from './loader/fragment-loader';\nimport KeyLoader from './loader/key-loader';\n\nimport { FragmentTracker } from './controller/fragment-tracker';\nimport StreamController from './controller/stream-controller';\nimport LevelController from './controller/level-controller';\nimport ID3TrackController from './controller/id3-track-controller';\n\nimport { isSupported } from './is-supported';\nimport { logger, enableLogs } from './utils/logger';\nimport { hlsDefaultConfig } from './config';\n\nimport HlsEvents from './events';\n\nimport { Observer } from './observer';\n\n/**\n * @module Hls\n * @class\n * @constructor\n */\nexport default class Hls extends Observer {\n  /**\n   * @type {string}\n   */\n  static get version () {\n    return __VERSION__;\n  }\n\n  /**\n   * @type {boolean}\n   */\n  static isSupported () {\n    return isSupported();\n  }\n\n  /**\n   * @type {HlsEvents}\n   */\n  static get Events () {\n    return HlsEvents;\n  }\n\n  /**\n   * @type {HlsErrorTypes}\n   */\n  static get ErrorTypes () {\n    return ErrorTypes;\n  }\n\n  /**\n   * @type {HlsErrorDetails}\n   */\n  static get ErrorDetails () {\n    return ErrorDetails;\n  }\n\n  /**\n   * @type {HlsConfig}\n   */\n  static get DefaultConfig () {\n    if (!Hls.defaultConfig) {\n      return hlsDefaultConfig;\n    }\n\n    return Hls.defaultConfig;\n  }\n\n  /**\n   * @type {HlsConfig}\n   */\n  static set DefaultConfig (defaultConfig) {\n    Hls.defaultConfig = defaultConfig;\n  }\n\n  /**\n   * Creates an instance of an HLS client that can attach to exactly one `HTMLMediaElement`.\n   *\n   * @constructs Hls\n   * @param {HlsConfig} config\n   */\n  constructor (config = {}) {\n    super();\n\n    const defaultConfig = Hls.DefaultConfig;\n\n    if ((config.liveSyncDurationCount || config.liveMaxLatencyDurationCount) && (config.liveSyncDuration || config.liveMaxLatencyDuration)) {\n      throw new Error('Illegal hls.js config: don\\'t mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration');\n    }\n\n    for (let prop in defaultConfig) {\n      if (prop in config) continue;\n      config[prop] = defaultConfig[prop];\n    }\n\n    if (config.liveMaxLatencyDurationCount !== void 0 && config.liveMaxLatencyDurationCount <= config.liveSyncDurationCount) {\n      throw new Error('Illegal hls.js config: \"liveMaxLatencyDurationCount\" must be gt \"liveSyncDurationCount\"');\n    }\n\n    if (config.liveMaxLatencyDuration !== void 0 && (config.liveMaxLatencyDuration <= config.liveSyncDuration || config.liveSyncDuration === void 0)) {\n      throw new Error('Illegal hls.js config: \"liveMaxLatencyDuration\" must be gt \"liveSyncDuration\"');\n    }\n\n    enableLogs(config.debug);\n    this.config = config;\n    this._autoLevelCapping = -1;\n\n    // core controllers and network loaders\n\n    /**\n     * @member {AbrController} abrController\n     */\n    const abrController = this.abrController = new config.abrController(this); // eslint-disable-line new-cap\n\n    const bufferController = new config.bufferController(this); // eslint-disable-line new-cap\n    const capLevelController = this.capLevelController = new config.capLevelController(this); // eslint-disable-line new-cap\n    const fpsController = new config.fpsController(this); // eslint-disable-line new-cap\n    const playListLoader = new PlaylistLoader(this);\n    const fragmentLoader = new FragmentLoader(this);\n    const keyLoader = new KeyLoader(this);\n    const id3TrackController = new ID3TrackController(this);\n\n    // network controllers\n\n    /**\n     * @member {LevelController} levelController\n     */\n    const levelController = this.levelController = new LevelController(this);\n\n    // FIXME: FragmentTracker must be defined before StreamController because the order of event handling is important\n    const fragmentTracker = new FragmentTracker(this);\n\n    /**\n     * @member {StreamController} streamController\n     */\n    const streamController = this.streamController = new StreamController(this, fragmentTracker);\n\n    let networkControllers = [levelController, streamController];\n\n    // optional audio stream controller\n    /**\n     * @var {ICoreComponent | Controller}\n     */\n    let Controller = config.audioStreamController;\n    if (Controller) {\n      networkControllers.push(new Controller(this, fragmentTracker));\n    }\n\n    /**\n     * @member {INetworkController[]} networkControllers\n     */\n    this.networkControllers = networkControllers;\n\n    /**\n     * @var {ICoreComponent[]}\n     */\n    const coreComponents = [\n      playListLoader,\n      fragmentLoader,\n      keyLoader,\n      abrController,\n      bufferController,\n      capLevelController,\n      fpsController,\n      id3TrackController,\n      fragmentTracker\n    ];\n\n    // optional audio track and subtitle controller\n    Controller = config.audioTrackController;\n    if (Controller) {\n      const audioTrackController = new Controller(this);\n\n      /**\n       * @member {AudioTrackController} audioTrackController\n       */\n      this.audioTrackController = audioTrackController;\n      coreComponents.push(audioTrackController);\n    }\n\n    Controller = config.subtitleTrackController;\n    if (Controller) {\n      const subtitleTrackController = new Controller(this);\n\n      /**\n       * @member {SubtitleTrackController} subtitleTrackController\n       */\n      this.subtitleTrackController = subtitleTrackController;\n      networkControllers.push(subtitleTrackController);\n    }\n\n    Controller = config.emeController;\n    if (Controller) {\n      const emeController = new Controller(this);\n\n      /**\n       * @member {EMEController} emeController\n       */\n      this.emeController = emeController;\n      coreComponents.push(emeController);\n    }\n\n    // optional subtitle controllers\n    Controller = config.subtitleStreamController;\n    if (Controller) {\n      networkControllers.push(new Controller(this, fragmentTracker));\n    }\n    Controller = config.timelineController;\n    if (Controller) {\n      coreComponents.push(new Controller(this));\n    }\n\n    /**\n     * @member {ICoreComponent[]}\n     */\n    this.coreComponents = coreComponents;\n  }\n\n  /**\n   * Dispose of the instance\n   */\n  destroy () {\n    logger.log('destroy');\n    this.trigger(HlsEvents.DESTROYING);\n    this.detachMedia();\n    this.coreComponents.concat(this.networkControllers).forEach(component => {\n      component.destroy();\n    });\n    this.url = null;\n    this.removeAllListeners();\n    this._autoLevelCapping = -1;\n  }\n\n  /**\n   * Attach a media element\n   * @param {HTMLMediaElement} media\n   */\n  attachMedia (media) {\n    logger.log('attachMedia');\n    this.media = media;\n    this.trigger(HlsEvents.MEDIA_ATTACHING, { media: media });\n  }\n\n  /**\n   * Detach from the media\n   */\n  detachMedia () {\n    logger.log('detachMedia');\n    this.trigger(HlsEvents.MEDIA_DETACHING);\n    this.media = null;\n  }\n\n  /**\n   * Set the source URL. Can be relative or absolute.\n   * @param {string} url\n   */\n  loadSource (url) {\n    url = URLToolkit.buildAbsoluteURL(window.location.href, url, { alwaysNormalize: true });\n    logger.log(`loadSource:${url}`);\n    this.url = url;\n    // when attaching to a source URL, trigger a playlist load\n    this.trigger(HlsEvents.MANIFEST_LOADING, { url: url });\n  }\n\n  /**\n   * Start loading data from the stream source.\n   * Depending on default config, client starts loading automatically when a source is set.\n   *\n   * @param {number} startPosition Set the start position to stream from\n   * @default -1 None (from earliest point)\n   */\n  startLoad (startPosition = -1) {\n    logger.log(`startLoad(${startPosition})`);\n    this.networkControllers.forEach(controller => {\n      controller.startLoad(startPosition);\n    });\n  }\n\n  /**\n   * Stop loading of any stream data.\n   */\n  stopLoad () {\n    logger.log('stopLoad');\n    this.networkControllers.forEach(controller => {\n      controller.stopLoad();\n    });\n  }\n\n  /**\n   * Swap through possible audio codecs in the stream (for example to switch from stereo to 5.1)\n   */\n  swapAudioCodec () {\n    logger.log('swapAudioCodec');\n    this.streamController.swapAudioCodec();\n  }\n\n  /**\n   * When the media-element fails, this allows to detach and then re-attach it\n   * as one call (convenience method).\n   *\n   * Automatic recovery of media-errors by this process is configurable.\n   */\n  recoverMediaError () {\n    logger.log('recoverMediaError');\n    let media = this.media;\n    this.detachMedia();\n    this.attachMedia(media);\n  }\n\n  /**\n   * @type {QualityLevel[]}\n   */\n  get levels () {\n    return this.levelController.levels;\n  }\n\n  /**\n   * Index of quality level currently played\n   * @type {number}\n   */\n  get currentLevel () {\n    return this.streamController.currentLevel;\n  }\n\n  /**\n   * Set quality level index immediately .\n   * This will flush the current buffer to replace the quality asap.\n   * That means playback will interrupt at least shortly to re-buffer and re-sync eventually.\n   * @type {number} -1 for automatic level selection\n   */\n  set currentLevel (newLevel) {\n    logger.log(`set currentLevel:${newLevel}`);\n    this.loadLevel = newLevel;\n    this.streamController.immediateLevelSwitch();\n  }\n\n  /**\n   * Index of next quality level loaded as scheduled by stream controller.\n   * @type {number}\n   */\n  get nextLevel () {\n    return this.streamController.nextLevel;\n  }\n\n  /**\n   * Set quality level index for next loaded data.\n   * This will switch the video quality asap, without interrupting playback.\n   * May abort current loading of data, and flush parts of buffer (outside currently played fragment region).\n   * @type {number} -1 for automatic level selection\n   */\n  set nextLevel (newLevel) {\n    logger.log(`set nextLevel:${newLevel}`);\n    this.levelController.manualLevel = newLevel;\n    this.streamController.nextLevelSwitch();\n  }\n\n  /**\n   * Return the quality level of the currently or last (of none is loaded currently) segment\n   * @type {number}\n   */\n  get loadLevel () {\n    return this.levelController.level;\n  }\n\n  /**\n   * Set quality level index for next loaded data in a conservative way.\n   * This will switch the quality without flushing, but interrupt current loading.\n   * Thus the moment when the quality switch will appear in effect will only be after the already existing buffer.\n   * @type {number} newLevel -1 for automatic level selection\n   */\n  set loadLevel (newLevel) {\n    logger.log(`set loadLevel:${newLevel}`);\n    this.levelController.manualLevel = newLevel;\n  }\n\n  /**\n   * get next quality level loaded\n   * @type {number}\n   */\n  get nextLoadLevel () {\n    return this.levelController.nextLoadLevel;\n  }\n\n  /**\n   * Set quality level of next loaded segment in a fully \"non-destructive\" way.\n   * Same as `loadLevel` but will wait for next switch (until current loading is done).\n   * @type {number} level\n   */\n  set nextLoadLevel (level) {\n    this.levelController.nextLoadLevel = level;\n  }\n\n  /**\n   * Return \"first level\": like a default level, if not set,\n   * falls back to index of first level referenced in manifest\n   * @type {number}\n   */\n  get firstLevel () {\n    return Math.max(this.levelController.firstLevel, this.minAutoLevel);\n  }\n\n  /**\n   * Sets \"first-level\", see getter.\n   * @type {number}\n   */\n  set firstLevel (newLevel) {\n    logger.log(`set firstLevel:${newLevel}`);\n    this.levelController.firstLevel = newLevel;\n  }\n\n  /**\n   * Return start level (level of first fragment that will be played back)\n   * if not overrided by user, first level appearing in manifest will be used as start level\n   * if -1 : automatic start level selection, playback will start from level matching download bandwidth\n   * (determined from download of first segment)\n   * @type {number}\n   */\n  get startLevel () {\n    return this.levelController.startLevel;\n  }\n\n  /**\n   * set  start level (level of first fragment that will be played back)\n   * if not overrided by user, first level appearing in manifest will be used as start level\n   * if -1 : automatic start level selection, playback will start from level matching download bandwidth\n   * (determined from download of first segment)\n   * @type {number} newLevel\n   */\n  set startLevel (newLevel) {\n    logger.log(`set startLevel:${newLevel}`);\n    const hls = this;\n    // if not in automatic start level detection, ensure startLevel is greater than minAutoLevel\n    if (newLevel !== -1) {\n      newLevel = Math.max(newLevel, hls.minAutoLevel);\n    }\n\n    hls.levelController.startLevel = newLevel;\n  }\n\n  /**\n   * set  dynamically set capLevelToPlayerSize against (`CapLevelController`)\n   *\n   * @type {boolean}\n   */\n  set capLevelToPlayerSize (shouldStartCapping) {\n    const newCapLevelToPlayerSize = !!shouldStartCapping;\n\n    if (newCapLevelToPlayerSize !== this.config.capLevelToPlayerSize) {\n      if (newCapLevelToPlayerSize) {\n        this.capLevelController.startCapping(); // If capping occurs, nextLevelSwitch will happen based on size.\n      } else {\n        this.capLevelController.stopCapping();\n        this.autoLevelCapping = -1;\n        this.streamController.nextLevelSwitch(); // Now we're uncapped, get the next level asap.\n      }\n\n      this.config.capLevelToPlayerSize = newCapLevelToPlayerSize;\n    }\n  }\n\n  /**\n   * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)\n   * @type {number}\n   */\n  get autoLevelCapping () {\n    return this._autoLevelCapping;\n  }\n\n  /**\n   * get bandwidth estimate\n   * @type {number}\n   */\n  get bandwidthEstimate () {\n    const bwEstimator = this.abrController._bwEstimator;\n    return bwEstimator ? bwEstimator.getEstimate() : NaN;\n  }\n\n  /**\n   * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)\n   * @type {number}\n   */\n  set autoLevelCapping (newLevel) {\n    logger.log(`set autoLevelCapping:${newLevel}`);\n    this._autoLevelCapping = newLevel;\n  }\n\n  /**\n   * True when automatic level selection enabled\n   * @type {boolean}\n   */\n  get autoLevelEnabled () {\n    return (this.levelController.manualLevel === -1);\n  }\n\n  /**\n   * Level set manually (if any)\n   * @type {number}\n   */\n  get manualLevel () {\n    return this.levelController.manualLevel;\n  }\n\n  /**\n   * min level selectable in auto mode according to config.minAutoBitrate\n   * @type {number}\n   */\n  get minAutoLevel () {\n    const hls = this;\n    const levels = hls.levels;\n    const minAutoBitrate = hls.config.minAutoBitrate;\n    const len = levels ? levels.length : 0;\n    for (let i = 0; i < len; i++) {\n      const levelNextBitrate = levels[i].realBitrate ? Math.max(levels[i].realBitrate, levels[i].bitrate) : levels[i].bitrate;\n      if (levelNextBitrate > minAutoBitrate) {\n        return i;\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * max level selectable in auto mode according to autoLevelCapping\n   * @type {number}\n   */\n  get maxAutoLevel () {\n    const hls = this;\n    const levels = hls.levels;\n    const autoLevelCapping = hls.autoLevelCapping;\n    let maxAutoLevel;\n    if (autoLevelCapping === -1 && levels && levels.length) {\n      maxAutoLevel = levels.length - 1;\n    } else {\n      maxAutoLevel = autoLevelCapping;\n    }\n\n    return maxAutoLevel;\n  }\n\n  /**\n   * next automatically selected quality level\n   * @type {number}\n   */\n  get nextAutoLevel () {\n    const hls = this;\n    // ensure next auto level is between  min and max auto level\n    return Math.min(Math.max(hls.abrController.nextAutoLevel, hls.minAutoLevel), hls.maxAutoLevel);\n  }\n\n  /**\n   * this setter is used to force next auto level.\n   * this is useful to force a switch down in auto mode:\n   * in case of load error on level N, hls.js can set nextAutoLevel to N-1 for example)\n   * forced value is valid for one fragment. upon succesful frag loading at forced level,\n   * this value will be resetted to -1 by ABR controller.\n   * @type {number}\n   */\n  set nextAutoLevel (nextLevel) {\n    const hls = this;\n    hls.abrController.nextAutoLevel = Math.max(hls.minAutoLevel, nextLevel);\n  }\n\n  /**\n   * @type {AudioTrack[]}\n   */\n  get audioTracks () {\n    const audioTrackController = this.audioTrackController;\n    return audioTrackController ? audioTrackController.audioTracks : [];\n  }\n\n  /**\n   * index of the selected audio track (index in audio track lists)\n   * @type {number}\n   */\n  get audioTrack () {\n    const audioTrackController = this.audioTrackController;\n    return audioTrackController ? audioTrackController.audioTrack : -1;\n  }\n\n  /**\n   * selects an audio track, based on its index in audio track lists\n   * @type {number}\n   */\n  set audioTrack (audioTrackId) {\n    const audioTrackController = this.audioTrackController;\n    if (audioTrackController) {\n      audioTrackController.audioTrack = audioTrackId;\n    }\n  }\n\n  /**\n   * @type {Seconds}\n   */\n  get liveSyncPosition () {\n    return this.streamController.liveSyncPosition;\n  }\n\n  /**\n   * get alternate subtitle tracks list from playlist\n   * @type {SubtitleTrack[]}\n   */\n  get subtitleTracks () {\n    const subtitleTrackController = this.subtitleTrackController;\n    return subtitleTrackController ? subtitleTrackController.subtitleTracks : [];\n  }\n\n  /**\n   * index of the selected subtitle track (index in subtitle track lists)\n   * @type {number}\n   */\n  get subtitleTrack () {\n    const subtitleTrackController = this.subtitleTrackController;\n    return subtitleTrackController ? subtitleTrackController.subtitleTrack : -1;\n  }\n\n  /**\n   * select an subtitle track, based on its index in subtitle track lists\n   * @type{number}\n   */\n  set subtitleTrack (subtitleTrackId) {\n    const subtitleTrackController = this.subtitleTrackController;\n    if (subtitleTrackController) {\n      subtitleTrackController.subtitleTrack = subtitleTrackId;\n    }\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get subtitleDisplay () {\n    const subtitleTrackController = this.subtitleTrackController;\n    return subtitleTrackController ? subtitleTrackController.subtitleDisplay : false;\n  }\n\n  /**\n   * Enable/disable subtitle display rendering\n   * @type {boolean}\n   */\n  set subtitleDisplay (value) {\n    const subtitleTrackController = this.subtitleTrackController;\n    if (subtitleTrackController) {\n      subtitleTrackController.subtitleDisplay = value;\n    }\n  }\n}\n","import { getMediaSource } from './utils/mediasource-helper';\n\nexport function isSupported (): boolean {\n  const mediaSource = getMediaSource();\n  const sourceBuffer = SourceBuffer || (window as any).WebKitSourceBuffer;\n  const isTypeSupported = mediaSource &&\n    typeof mediaSource.isTypeSupported === 'function' &&\n    mediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\n\n  // if SourceBuffer is exposed ensure its API is valid\n  // safari and old version of Chrome doe not expose SourceBuffer globally so checking SourceBuffer.prototype is impossible\n  const sourceBufferValidAPI = !sourceBuffer ||\n    (sourceBuffer.prototype &&\n      typeof sourceBuffer.prototype.appendBuffer === 'function' &&\n      typeof sourceBuffer.prototype.remove === 'function');\n  return !!isTypeSupported && !!sourceBufferValidAPI;\n}\n"],"sourceRoot":""}